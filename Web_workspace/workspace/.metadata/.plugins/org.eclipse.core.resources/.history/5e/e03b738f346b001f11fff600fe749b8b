<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>회원가입 페이지</title>
<style type="text/css">

/* 테이블 스타일 */
table {
    width: 600px; /* 테이블의 너비를 600px로 설정하여 화면에 더 넓게 보이도록 설정. 테이블의 전체 너비가 600px로 고정됩니다. */
    border-collapse: collapse; /* 테이블의 경계를 합쳐서 하나의 선처럼 보이게 만듭니다. 각 셀 사이에 경계선이 따로 표시되지 않습니다. */
    border: 1px solid #ccc; /* 테이블의 바깥쪽 테두리를 밝은 회색(#ccc)으로 설정합니다. solid는 실선의 형태를 나타냅니다. */
    margin: 50px auto; /* 테이블을 상단에서 50px만큼 떨어뜨리고, 좌우 중앙에 배치합니다. auto는 수평 중앙 정렬을 의미합니다. */
    padding: 20px; /* 테이블 내부에 20px의 여백을 설정하여 콘텐츠가 테두리와 너무 가까이 붙지 않도록 만듭니다. */
    box-shadow: 0 0 14px rgba(0, 0, 0, 0.9); /* 테이블에 그림자를 추가하여 입체감을 줍니다. 첫 번째 두 값(0 0)은 그림자의 위치를 설정하고, 14px은 그림자의 흐림 정도를 나타냅니다. rgba(0, 0, 0, 0.9)는 검정색 그림자를 90% 불투명하게 표시합니다. */
}

/* 테이블 셀 스타일 */
td {
    padding: 10px; /* 각 셀의 내부에 10px의 여백을 설정하여 텍스트와 입력 필드가 테두리와 가까워지지 않도록 만듭니다. */
    vertical-align: middle; /* 셀 안의 내용이 셀의 수직 방향으로 가운데에 위치하도록 정렬합니다. */
    font-weight: bold; /* 셀 내부의 텍스트를 굵게 표시하여 강조합니다. */
}

/* 첫 번째 열(레이블) 스타일 */
td:first-child {
    width: 100px; /* 첫 번째 열의 너비를 100px로 고정하여 다른 열들과 일관된 레이아웃을 유지합니다. */
    text-align: right; /* 첫 번째 열의 텍스트를 오른쪽 정렬하여 입력 필드와 일관된 간격을 유지합니다. */
    padding-right: 10px; /* 텍스트와 입력 필드 사이에 10px의 여백을 추가하여 필드와 레이블이 너무 가까워지지 않도록 합니다. */
}

/* 마지막 열(입력 필드) 스타일 */
td:last-child {
    text-align: left; /* 마지막 열의 텍스트를 왼쪽 정렬하여 사용자가 입력할 때 자연스러운 위치에 필드가 나타나도록 만듭니다. */
}

/* 두 열을 합친 셀(버튼들) 중앙 정렬 */
td[colspan="2"] {
    text-align: center; /* 두 열을 합친 셀(예: 버튼들이 위치한 셀)을 가운데 정렬하여 버튼들이 화면 중앙에 위치하도록 설정합니다. */
}

/* 입력 필드 및 드롭다운 목록 스타일 */
input[type="text"], input[type="password"], select {
    width: 75%; /* 입력 필드와 드롭다운 목록의 너비를 75%로 설정하여 페이지에서 적절한 크기로 보이도록 합니다. 화면 크기에 따라 입력 필드의 비율이 유지됩니다. */
    padding: 5px; /* 입력 필드 내부에 5px의 여백을 추가하여 텍스트와 필드 경계선 사이에 공간을 둡니다. */
    box-sizing: border-box; /* padding과 border를 포함한 전체 너비를 유지하도록 설정하여 입력 필드의 크기가 변하지 않도록 합니다. */
    border: 1px solid #ccc; /* 입력 필드의 테두리를 밝은 회색(#ccc) 실선으로 설정하여 경계가 분명히 드러나도록 합니다. */
    border-radius: 4px; /* 테두리의 모서리를 둥글게 처리하여 부드러운 외관을 만듭니다. */
}

/* 라디오 버튼 스타일 */
input[type="radio"] {
    margin: 0 10px 0 0; /* 라디오 버튼과 라벨 사이에 10px의 간격을 추가하여 버튼과 텍스트가 너무 붙어 있지 않도록 합니다. */
}

/* 버튼 스타일 */
input[type="button"], input[type="submit"], input[type="reset"] {
    width: 120px; /* 버튼의 너비를 120px로 고정하여 일정한 크기를 유지합니다. */
    padding: 10px; /* 버튼 내부에 10px의 여백을 추가하여 버튼의 클릭 가능한 영역을 넓힙니다. */
    margin-top: 10px; /* 버튼 위에 10px의 여백을 추가하여 다른 요소와의 간격을 둡니다. */
    border: 1px solid #ccc; /* 버튼의 테두리를 밝은 회색(#ccc) 실선으로 설정하여 깔끔하게 구분되도록 합니다. */
    border-radius: 4px; /* 버튼의 모서리를 둥글게 처리하여 부드러운 느낌을 줍니다. */
    background-color: #f9f9f9; /* 버튼의 배경색을 밝은 회색으로 설정하여 페이지와 잘 어우러지도록 합니다. */
    cursor: pointer; /* 버튼 위에 마우스를 올리면 커서가 손가락 모양으로 변경되어 클릭 가능함을 시각적으로 알려줍니다. */
}

/* 버튼 hover 시 스타일 */
input[type="button"]:hover, input[type="submit"]:hover, input[type="reset"]:hover {
    background-color: #ddd; /* 버튼에 마우스를 올리면 배경색이 더 어두운 회색으로 변경되어 사용자가 버튼과 상호작용하고 있음을 알 수 있습니다. */
}

/* 폼 스타일 */
form {
    background-color: #fdfdfd; /* 폼의 배경색을 밝은 회색으로 설정하여 깔끔하고 부드러운 느낌을 줍니다. */
    border-radius: 8px; /* 폼의 테두리를 둥글게 처리하여 페이지의 다른 요소들과 잘 어우러지도록 합니다. */
    padding: 20px; /* 폼 내부에 20px의 여백을 추가하여 입력 필드와 테두리 사이에 충분한 공간을 둡니다. */
}

/* 이메일 및 아이디 필드 정렬을 위한 Flexbox */
.email-field, .id-field {
    display: flex; /* Flexbox를 사용하여 이메일 및 아이디 필드가 수평으로 나란히 정렬되도록 합니다. 이 방식은 필드들이 자동으로 정렬되고 유연하게 배치될 수 있도록 도와줍니다. */
    align-items: center; /* Flexbox의 각 요소가 수직 방향으로 가운데에 정렬되도록 하여 텍스트와 입력 필드가 균형 있게 배치됩니다. */
}

/* 이메일 입력 필드 스타일 */
.email-field input[type="text"], .email-field input[type="email"], .email-field select, .email-field datalist {
    width: 45%; /* 이메일 입력 필드와 도메인 선택 필드의 너비를 45%로 설정하여 동일한 비율로 나란히 배치될 수 있도록 합니다. */
    margin-right: 5px; /* 이메일 앞부분과 도메인 입력 필드 사이에 5px의 간격을 추가하여 필드들이 너무 붙어 있지 않도록 합니다. */
}

/* 아이디 입력 필드 스타일 */
.id-field input[type="text"] {
    width: 75%; /* 아이디 입력 필드의 너비를 75%로 설정하여 중복 체크 버튼과 적절한 균형을 맞춥니다. */
}

/* 아이디 중복 체크 버튼 스타일 */
.id-field input[type="button"] {
    width: auto; /* 버튼의 너비를 자동으로 설정하여 텍스트 크기에 맞춰 버튼 크기가 조정되도록 합니다. */
    padding: 6px 10px; /* 버튼 내부에 6px의 상하 여백, 10px의 좌우 여백을 추가하여 클릭 영역을 넓히고, 시각적으로 균형 있게 보이도록 만듭니다. */
    height: 36px; /* 버튼의 높이를 입력 필드와 동일하게 맞춰서 시각적인 일관성을 유지합니다. */
}

/* 전화번호 입력 필드 스타일 */
.phone-field {
    display: flex; /* 전화번호 입력 필드를 수평으로 나란히 배치하여 가독성을 높이고, 세 부분이 적절히 정렬되도록 합니다. */
    gap: 5px; /* 각 전화번호 입력 필드 사이에 5px의 간격을 두어 입력할 때 시각적인 여유 공간을 제공합니다. */
}

/* 오류 메시지를 표시할 div 스타일 */
#idDiv, #nameDiv, #pwdDiv, #repwdDiv {
    display: block; /* 각 오류 메시지를 블록 요소로 설정하여 입력 필드 아래에 나타나도록 설정 */
    color: red; /* 오류 메시지를 빨간색으로 설정 */
    font-size: 9pt; /* 글자 크기를 설정 */
    font-weight: bold; /* 텍스트를 굵게 설정 */
    margin-top: 5px; /* 입력 필드와 오류 메시지 사이에 여백 추가 */
}

.id-field, .email-field {
    display: block; /* Flexbox 사용 해제, 수직으로 정렬되도록 설정 */
    align-items: flex-start; /* 요소들이 수직으로 정렬되도록 설정 */
}


</style>
</head>
<body>
	
	<a class="navbar-brand" href="../mainpage.html">
            <img src="../image/home.png" alt="Home" width="30" height="30"/>
    </a>
    <h3 align="center">회원가입</h3> <!-- 회원가입 제목을 가운데 정렬하고, h3 태그로 크기 설정 -->
	<hr/> <!-- 제목 아래에 구분선을 추가 -->
	
	<!-- 사용자가 입력한 데이터를 서버에 전송할 수 있도록 method="post"로 설정 -->
    <form name="memberForm" method="post" action="/projectJSP/member/memberWrite.jsp">
        <table>
            <!-- 이름 입력 필드 -->
            <tr>
                <td>이름</td>
                <td>
                <input type="text" name="name" id="name" placeholder="이름 입력">
                <div id="nameDiv"></div> <!-- 오류 메시지나 확인 메시지를 표시할 div 영역 -->
                </td>
            </tr>

            <!-- 아이디 입력 필드 -->
            <tr>
                <td>아이디</td>
                <td class="id-field">
                    <input type="text" name="id" size="30" id="id" placeholder="아이디 입력">
                    <input type="button" onclick="checkId()" value="중복체크"/> <!-- 아이디 중복체크 버튼 -->
                    <input type="text" id="check" value="" />
                    <div id="idDiv"></div> <!-- 아이디 중복 검사 결과를 표시할 div -->
                </td>
            </tr>

            <!-- 비밀번호 입력 필드 -->
            <tr>
                <td>비밀번호</td>
                <td>
                <input type="password" name="pwd" size="40" id="pwd" placeholder="비밀번호 입력">
                <div id="pwDiv"></div> <!-- 비밀번호 입력 관련 오류 메시지를 표시할 div -->
                </td>
            </tr>

            <!-- 비밀번호 재입력 필드 -->
            <tr>
                <td>재확인</td>
                <td><input type="password" name="repwd" size="40" id="repwd" placeholder="비밀번호 재입력">
                <div id="repwDiv"></div> <!-- 비밀번호 재입력 관련 오류 메시지를 표시할 div -->
                </td>
            </tr>

            <!-- 성별 선택 필드 -->
            <tr>
                <td>성별</td>
                <td>
                    <input type="radio" name="gender" value="M" checked="checked" />남자 
                    <input type="radio" name="gender" value="F" />여자 
                </td>
            </tr>

            <!-- 이메일 입력 필드 -->
            <tr>
                <td>이메일</td>
                <td class="email-field">
                    <!-- 사용자가 입력할 이메일의 앞부분 (email1) -->
                    <input type="text" name="email1" id="email1" placeholder="이메일 입력">
                    @ <!-- 이미 포함된 '@' 기호를 사용하여 이메일의 앞뒤를 구분 -->
                    <!-- 사용자가 입력할 이메일의 뒷부분 (email2) -->
                    <input type="text" name="email2" id="email2" placeholder="직접입력" list="email_list" oninput="change()" />
                    <datalist id="email_list">
                        <option value="naver.com"></option>
                        <option value="gmail.com"></option>
                        <option value="hanmail.com"></option>
                        <option value="daum.net"></option>
                    </datalist>
                </td>
            </tr>

            <!-- 휴대전화 입력 필드 -->
            <tr>
                <td>휴대전화</td>
                <td class="phone-field">
                    <select name="tel1" id="tel1"> 
                    	<optgroup label="hp">
                        <option value="010">010</option>
                        <option value="011">011</option>
                        <option value="019">019</option>
                        </optgroup>
                    </select>
                    -
                    <input type="text" name="tel2" size="5" maxlength="4" id="tel2" placeholder="앞자리">
                    -
                    <input type="text" name="tel3" size="5" maxlength="4" id="tel3" placeholder="뒷자리">
                </td>
            </tr>

            <!-- 주소 입력 필드 -->
            <tr>
                <td>주소</td>
                <td>
                    <input type="text" name="zipcode" id="zipcode" size="6" readonly placeholder="우편번호">
                    <input type="button" value="우편번호 검색" onclick="checkPost()">
                    <br>
                    <input type="text" name="addr1" id="addr1" size="60" readonly placeholder="주소">
                    <br>
                    <input type="text" name="addr2" id="addr2" size="60" placeholder="상세주소">
                </td>
            </tr>

            <!-- 하단 버튼 필드 -->
            <tr>
                <td colspan="2" align="center">
                    <input type="submit" value="회원가입" /> 
                    <input type="reset" value="다시입력"/> 
                    <input type="button" value="뒤로가기" onclick="window.location.href='../index.jsp';"> 
                </td>
            </tr>
        </table>
    </form>
    
<script src="//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js"></script> <!-- 우편번호 검색 API -->
<script src="../js/member.js"></script> <!-- JavaScript 함수 파일 로드 -->
  
</body>
</html>

<!--
validateForm() 함수 설명:

이 함수는 회원가입 폼을 제출하기 전에 모든 입력 값들이 유효한지 확인하는 역할을 합니다.
여러 유효성 검사 항목을 통해 사용자 입력의 오류를 체크하고, 오류가 있으면 폼 제출을 막습니다.

1. 이름 유효성 검사
    - 이름 필드가 비어있는지 확인합니다.
    - 이름에 숫자나 특수문자가 포함되지 않았는지 검사합니다.
    - 오류가 있으면 오류 메시지를 출력하고, 없으면 메시지를 제거합니다.

2. 아이디 중복 체크 확인
    - 사용자가 아이디 중복 체크를 완료했는지 확인합니다.
    - 중복 체크가 완료되지 않았으면 경고 메시지를 띄우고 폼 제출을 막습니다.

3. 비밀번호 유효성 검사
    - 비밀번호의 길이가 3자 이상인지 확인합니다.
    - 비밀번호와 재입력된 비밀번호가 일치하는지 확인합니다.
    - 비밀번호에 숫자와 특수문자가 포함되었는지 검사합니다.
    - 위의 조건을 만족하지 않으면 폼 제출을 막고 오류 메시지를 출력합니다.

4. 이메일 유효성 검사
    - 사용자가 입력한 이메일이 유효한 형식인지 확인합니다.
    - 이메일 앞부분과 도메인(예: naver.com)을 결합하여 전체 이메일을 만듭니다.
    - 정규식을 사용하여 이메일 형식이 유효한지 검사합니다.
    - 유효하지 않은 이메일 형식이면 경고 메시지를 띄우고 폼 제출을 막습니다.

5. 모든 유효성 검사를 통과한 경우 폼을 제출할 수 있도록 허용합니다.
-->

