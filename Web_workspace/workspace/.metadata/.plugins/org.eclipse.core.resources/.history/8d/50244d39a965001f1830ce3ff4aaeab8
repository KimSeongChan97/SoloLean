<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JSON 배열에 관하여...</title>
<link rel="stylesheet" href="../css/common.css">
<link rel="stylesheet" href="../css/reset.css">
</head>
<body>

<h1 class="title">$.ajax() 함수를 사용한 JSON 데이터(배열) 읽기[2]</h1> 
	<div class="exec">
		<input type="button" value="JSON 데이터 가져오기" id="mybtn"/> 
	</div>
	
	<div class="console" id="result"></div>

<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
$(function(){
	$('#mybtn').click(function(){
		// 버튼 클릭 시 실행되는 이벤트 핸들러입니다.
		// 사용자가 "JSON 데이터 가져오기" 버튼을 클릭하면, 아래의 AJAX 요청이 실행됩니다.
		$.ajax({
				type: 'get', 
				// HTTP 요청 방식을 'GET'으로 설정합니다. 'GET' 방식은 주로 서버에서 데이터를 가져오기 위해 사용됩니다.
				url: '../json/json02.json', 
				// 요청할 JSON 파일의 URL입니다. 이 경우, 상대 경로를 사용하여 json02.json 파일에서 데이터를 가져옵니다.
				dataType: 'json', 
				// 서버로부터 반환되는 데이터의 형식을 JSON으로 지정합니다. 이는 jQuery가 응답 데이터를 자동으로 JSON 객체로 파싱하도록 합니다.
				success: function(data){
					// AJAX 요청이 성공적으로 완료되었을 때 호출되는 함수입니다.
					console.log(JSON.stringify(data));
					// 서버로부터 받아온 JSON 데이터를 문자열로 변환하여 콘솔에 출력합니다.
					// JSON.stringify()는 JSON 객체를 문자열로 변환하여 출력할 때 사용됩니다.
					
					console.log(data.school.subject);
					// JSON 데이터 내 'school' 객체의 'subject' 배열을 콘솔에 출력합니다.
					// 이 배열에는 여러 과목에 대한 정보가 포함되어 있습니다.
					console.log(data.school.subject[0].teacher);
					// 'subject' 배열의 첫 번째 요소에 있는 'teacher' 값을 콘솔에 출력합니다.
					
					/*
					let subject = data.school.subject;
					// 'subject' 배열을 변수에 저장합니다. 이 배열에는 여러 과목의 정보가 포함되어 있으며, 각 요소는 객체입니다.
					
					for(let i=0; i<subject.length; i++){
						// 'subject' 배열의 길이만큼 반복문을 실행합니다. 각 반복에서 배열의 각 요소에 접근하여 처리합니다.
						let div = `<div>` + 
						// 각 과목 정보를 담을 <div> 요소를 생성합니다. 이 <div>는 이후에 DOM에 추가될 것입니다.
						`<p>${data.school.subject[i].title}</p>` + 
						// 현재 반복 중인 배열 요소의 'title' 값을 <p> 태그로 감싸고, 이를 div 문자열에 추가합니다.
						// 예를 들어, 'title' 값이 "Mathematics"라면, <p>Mathematics</p>가 생성됩니다.
						`<p>` + data.school.subject[i].time + `</p>` +  
						// 현재 반복 중인 배열 요소의 'time' 값을 <p> 태그로 감싸고, 이를 div 문자열에 추가합니다.
						// 예를 들어, 'time' 값이 "10:00 AM"이라면, <p>10:00 AM</p>가 생성됩니다.
						`<p>` + data.school.subject[i].teacher + `</p>` + 
						// 현재 반복 중인 배열 요소의 'teacher' 값을 <p> 태그로 감싸고, 이를 div 문자열에 추가합니다.
						// 예를 들어, 'teacher' 값이 "Mr. Kim"이라면, <p>Mr. Kim</p>가 생성됩니다.
						`</div>`;
						
						$('#result').append(div).append('<br/>');
						// 생성된 div 문자열을 #result 요소에 추가하고, 각 과목 정보 사이에 줄바꿈을 위해 <br/> 태그를 추가합니다.
						// .append() 메소드는 기존 내용을 유지하면서 새로운 내용을 추가하는 데 사용됩니다.
					}// for
					*/
					
					$.each(data.school.subject, function(index, items){
						let div = `<div>` + 
						`<p>${data.school.subject[i].title}</p>` + 
						`<p>` + data.school.subject[i].time + `</p>` +  
						`<p>` + data.school.subject[i].teacher + `</p>` + 
						`</div>`;
						
						$('#result').append(div).append('<br/>');
					}); // $.each()
					
				},
				error: function(e){
					// AJAX 요청이 실패했을 때 호출되는 함수입니다.
					// 요청이 실패하는 이유로는 서버 오류, 네트워크 문제, 요청한 파일이 없을 경우 등이 있습니다.
					console.log(e);
					// 에러 정보를 콘솔에 출력하여 디버깅에 도움을 줍니다.
				}
		});
	});
});
</script>
</body>
</html>
