package guestbook.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import guestbook.bean.GuestbookDTO;

public class GuestbookDAO {
    private String driver = "oracle.jdbc.driver.OracleDriver";
    // 오라클 JDBC 드라이버의 클래스 이름을 문자열로 지정합니다.
    // 이 드라이버는 자바 프로그램이 오라클 데이터베이스와 상호작용할 수 있도록 해줍니다.
    // Class.forName() 메서드에서 이 드라이버를 로드하여 데이터베이스와의 통신을 가능하게 합니다.
    // Class.forName("oracle.jdbc.driver.OracleDriver")는 자바 리플렉션 기능을 사용하여 이 클래스를 동적으로 로드합니다.
    // 이 작업은 오라클 데이터베이스와의 연결을 위해 필수적인 준비 단계입니다.

    private String url = "jdbc:oracle:thin:@localhost:1521:xe"; 
    // 오라클 데이터베이스에 연결하기 위한 URL입니다.
    // 이 예제에서는 로컬호스트에서 실행 중인 XE(Express Edition) 데이터베이스에 연결합니다.
    // 'thin' 드라이버는 오라클 서버에 직접 접속하는 네이티브 드라이버입니다.
    // 'localhost'는 데이터베이스가 로컬에서 실행되고 있음을 나타내며, '1521'은 오라클의 기본 포트 번호입니다.
    // 여기서 사용된 JDBC URL 형식은 오라클 데이터베이스에 접속하기 위한 형식이며, 각 부분이 의미하는 바는 다음과 같습니다:
    // "jdbc:oracle:thin:@호스트:포트:SID" 형식에서 'thin'은 JDBC Thin 드라이버를 의미하고, 
    // 'localhost'는 데이터베이스가 실행 중인 서버의 호스트명을 의미합니다.
    // '1521'은 데이터베이스의 포트 번호, 'xe'는 데이터베이스 식별자(SID)입니다.

    private String username = "C##JAVA";  // DB 사용자명
    // 데이터베이스에 접속하기 위한 사용자명을 지정합니다.
    // 이 사용자명은 오라클 데이터베이스에 설정된 계정명입니다.
    // 'C##'는 사용자가 생성한 컨테이너 데이터베이스(CDB)의 사용자라는 것을 의미합니다.
    // 이 사용자는 데이터베이스 내에서 특정 권한을 가진 사용자이며, 
    // DB 접속 및 데이터 조작을 위해 필요한 인증 정보를 제공합니다.

    private String password = "1234";  // DB 비밀번호
    // 데이터베이스에 접속하기 위한 비밀번호를 지정합니다.
    // 해당 비밀번호는 username에 해당하는 사용자의 비밀번호입니다.
    // DB 연결 시 이 비밀번호를 사용하여 사용자가 데이터베이스에 접근할 수 있는 권한을 확인받습니다.

    private Connection conn; // 데이터베이스와의 연결을 나타내는 객체입니다.
    // Connection 객체는 SQL 쿼리를 실행할 때 데이터베이스와 연결을 유지합니다.
    // 이 객체를 통해 SQL 문을 데이터베이스에 전달하고, 그 결과를 받아올 수 있습니다.
    // Connection 객체는 데이터베이스와의 네트워크 연결을 관리하고, 
    // 연결된 세션 동안 SQL 명령을 실행하는 데 사용됩니다.

    private PreparedStatement pstmt; // SQL 문을 실행하기 위한 객체입니다.
    // PreparedStatement는 SQL 문을 미리 컴파일하여 성능을 높이고 SQL 인젝션 공격을 방지합니다.
    // SQL 문에 포함된 변수(파라미터)를 ?로 표시하고, 나중에 해당 변수에 값을 설정합니다.
    // PreparedStatement는 반복적으로 실행해야 하는 SQL 문을 효율적으로 실행하기 위해 사용됩니다.
    // 일반 Statement와 달리 SQL 문을 미리 컴파일해두기 때문에 반복 실행 시 속도가 더 빠릅니다.

    private ResultSet rs; // SQL 쿼리의 결과를 저장하기 위한 객체입니다.
    // ResultSet은 SELECT 쿼리의 결과를 저장하고, 그 결과를 한 행씩 읽어옵니다.
    // 데이터베이스에서 읽어온 데이터를 순차적으로 접근할 수 있게 합니다.
    // SELECT 문을 실행한 후, 반환된 결과 집합을 메모리에 저장하고, 
    // 이를 순차적으로 처리하여 데이터베이스로부터 조회된 데이터를 활용할 수 있습니다.

    private static GuestbookDAO guestbookDAO = new GuestbookDAO();
    // 싱글톤 패턴을 사용하여 GuestbookDAO 클래스의 유일한 인스턴스를 생성합니다.
    // 싱글톤 패턴은 클래스의 인스턴스가 오직 하나만 생성되도록 보장하며, 
    // 해당 인스턴스를 전역적으로 사용할 수 있게 합니다.
    // 이는 데이터베이스 연결을 관리하는 데 유용하며, 메모리 사용을 최적화할 수 있습니다.
    // 싱글톤 패턴을 사용하면 시스템 내에서 하나의 DAO 객체만 존재하게 되어 자원 관리가 용이해지고,
    // 동일한 DAO 인스턴스를 통해 여러 곳에서 동일한 데이터베이스 작업을 수행할 수 있습니다.

    // 싱글톤 패턴으로 GuestbookDAO 인스턴스 생성 및 반환
    public static GuestbookDAO getInstance() {
        // 이 메서드를 통해 GuestbookDAO의 유일한 인스턴스를 반환합니다.
        // 외부에서 이 메서드를 통해서만 GuestbookDAO 객체에 접근할 수 있습니다.
        return guestbookDAO;
        // 이 메서드는 GuestbookDAO의 인스턴스를 전역적으로 접근할 수 있도록 보장하며,
        // 다른 클래스에서 GuestbookDAO 객체를 여러 번 생성하지 않고도 접근할 수 있게 합니다.
    }

    public GuestbookDAO() {
        // public 생성자를 통해 외부에서 객체 생성을 막고, 오직 getInstance()를 통해서만 접근할 수 있게 합니다.
        // 싱글톤 패턴을 구현하기 위해 생성자를 private으로 선언해야 하지만,
        // 예제를 위해 public으로 유지합니다.
        // GuestbookDAO 클래스의 생성자는 클래스가 최초로 로드될 때 한 번 실행되며,
        // 오라클 드라이버를 로드하고 데이터베이스와의 연결을 설정하는 역할을 합니다.

        try {
            // 드라이버 로딩
            // JDBC 드라이버를 메모리에 로드합니다. 이 작업은 데이터베이스와의 연결을 시작하기 전에 반드시 필요합니다.
            // 이때, 드라이버 클래스의 정적 초기화 블록에서 DriverManager에 드라이버가 등록됩니다.
            Class.forName(driver);
            // Class.forName() 메서드는 드라이버 클래스를 메모리에 로드하여 실행 준비를 완료합니다.
            // 이 과정에서 오라클 드라이버가 내부적으로 DriverManager에 등록됩니다.
            // DriverManager는 이후 데이터베이스 연결을 관리합니다.
            // 이 코드가 성공적으로 실행되면, JDBC 드라이버가 프로그램 내에 등록되고,
            // 이후 데이터베이스와의 연결이 필요할 때 드라이버가 사용될 준비가 완료됩니다.

        } catch (ClassNotFoundException e) {
            // 드라이버 클래스가 존재하지 않을 경우 발생하는 예외를 처리합니다.
            // 주로 드라이버 라이브러리가 클래스패스에 포함되지 않았을 때 발생합니다.
            e.printStackTrace();
            // e.printStackTrace()는 예외의 자세한 정보를 출력합니다. 이 정보를 통해 어디에서 오류가 발생했는지 파악할 수 있습니다.
            // ClassNotFoundException이 발생하면 프로그램이 데이터베이스와 통신할 수 없게 되므로,
            // 이 예외를 적절히 처리해야 합니다.
        }
    }

    private Connection getConnection() throws SQLException {
        // 데이터베이스와의 연결을 설정하고, 그 연결을 나타내는 Connection 객체를 반환합니다.
        // DriverManager.getConnection() 메서드를 사용하여 데이터베이스에 접속합니다.
        // 이 메서드는 JDBC URL, 사용자명, 비밀번호를 인자로 받아 데이터베이스에 연결합니다.
        return DriverManager.getConnection(url, username, password);
        // 이 코드가 실행되면, JDBC 드라이버가 오라클 데이터베이스에 연결을 시도하고, 연결에 성공하면 Connection 객체가 반환됩니다.
        // 이 연결 객체를 사용해 데이터베이스에 SQL 문을 전달하고 결과를 받을 수 있습니다.
        // getConnection() 메서드는 데이터베이스와의 연결을 설정하고,
        // 이후 SQL 문을 실행할 수 있는 상태를 준비합니다.
    }

    public void guestbookWrite(GuestbookDTO guestbookDTO) {
        // guestbookWrite 메서드는 guestbookDTO 객체를 받아 이를 데이터베이스에 삽입하는 기능을 수행합니다.
        // 이 메서드는 사용자로부터 입력받은 방명록 데이터를 데이터베이스에 저장합니다.
        try {
            conn = getConnection(); 
            // getConnection() 메서드를 호출하여 데이터베이스 연결을 얻습니다.
            // 이 연결을 통해 SQL 문을 데이터베이스에 전달할 수 있습니다.
            
            String sql = """
                    insert into guestbook values(seq_guestbook.nextval, ?,?,?,?,?, sysdate)
                    """;
            // SQL INSERT 문을 정의합니다. 이 문장은 guestbook 테이블에 새 레코드를 삽입하며,
            // seq_guestbook.nextval을 통해 자동으로 증가하는 시퀀스 값을 사용합니다.
            // ?는 SQL 문에서 파라미터를 나타내며, 나중에 pstmt.setString()을 통해 값이 채워집니다.
            // 이 문장은 데이터베이스에서 다음과 같이 실행됩니다:
            // INSERT INTO guestbook VALUES (다음 시퀀스 값, 이름, 이메일, 홈페이지, 제목, 내용, 현재 시간);
            // SYSDATE는 현재 시스템의 날짜와 시간을 나타냅니다.
            // 시퀀스(seq_guestbook)는 고유 키로, 중복되지 않는 값을 생성합니다.
            // 시퀀스는 자동으로 증가하는 숫자로, 새 레코드를 삽입할 때 고유한 값을 부여하는 데 사용됩니다.
            // 이는 primary key로 사용되어 각 레코드를 고유하게 식별할 수 있게 해줍니다.

            pstmt = conn.prepareStatement(sql); 
            // PreparedStatement 객체를 생성합니다. 이 객체는 SQL 문을 실행하기 위해 사용됩니다.
            // conn.prepareStatement(sql)은 주어진 SQL 문을 미리 컴파일하여 PreparedStatement 객체로 반환합니다.
            // PreparedStatement는 SQL 문을 실행할 때마다 문장을 다시 컴파일할 필요가 없어 성능이 향상됩니다.
            // 또한, ?를 사용한 파라미터 바인딩으로 SQL 인젝션 공격을 방지할 수 있습니다.
            // PreparedStatement는 SQL 문을 미리 컴파일하기 때문에 실행 속도가 더 빠르고,
            // 파라미터 바인딩을 통해 SQL 인젝션 공격으로부터 시스템을 보호할 수 있습니다.

            // ? 에 데이터 대입
            // 각 ?에 해당하는 위치에 guestbookDTO 객체로부터 값을 가져와 대입합니다.
            pstmt.setString(1, guestbookDTO.getName()); // 첫 번째 ?에 이름 값을 대입합니다.
            // 첫 번째 파라미터에는 guestbookDTO 객체에서 가져온 사용자의 이름이 대입됩니다.
            // 사용자가 입력한 이름이 데이터베이스의 name 컬럼에 저장됩니다.
            pstmt.setString(2, guestbookDTO.getEmail()); // 두 번째 ?에 이메일 값을 대입합니다.
            // 두 번째 파라미터에는 guestbookDTO 객체에서 가져온 사용자의 이메일이 대입됩니다.
            // 사용자가 입력한 이메일 주소가 데이터베이스의 email 컬럼에 저장됩니다.
            pstmt.setString(3, guestbookDTO.getHomepage()); // 세 번째 ?에 홈페이지 값을 대입합니다.
            // 세 번째 파라미터에는 guestbookDTO 객체에서 가져온 사용자의 홈페이지 URL이 대입됩니다.
            // 사용자가 입력한 홈페이지 주소가 데이터베이스의 homepage 컬럼에 저장됩니다.
            pstmt.setString(4, guestbookDTO.getSubject()); // 네 번째 ?에 제목 값을 대입합니다.
            // 네 번째 파라미터에는 guestbookDTO 객체에서 가져온 방명록 제목이 대입됩니다.
            // 사용자가 입력한 제목이 데이터베이스의 subject 컬럼에 저장됩니다.
            pstmt.setString(5, guestbookDTO.getContent()); // 다섯 번째 ?에 내용 값을 대입합니다.
            // 다섯 번째 파라미터에는 guestbookDTO 객체에서 가져온 방명록 내용이 대입됩니다.
            // 사용자가 입력한 내용이 데이터베이스의 content 컬럼에 저장됩니다.

            pstmt.executeUpdate(); 
            // SQL 문을 실행하여 데이터베이스에 변경 사항을 적용합니다. 
            // 이 메서드는 실행된 행의 수를 반환합니다. 하지만 여기서는 반환값을 사용하지 않습니다.
            // executeUpdate() 메서드는 INSERT, UPDATE, DELETE와 같은 데이터 변경 SQL 문을 실행할 때 사용됩니다.
            // 이 메서드는 실행된 행의 수를 반환하므로, 이를 통해 몇 개의 행이 변경되었는지 알 수 있습니다.
            // 예를 들어, 방명록에 새로운 항목이 추가되면 이 메서드는 1을 반환합니다.
            // 방명록 항목이 데이터베이스에 성공적으로 저장되면 해당 행의 수가 반환됩니다.
            
        } catch (SQLException e) {
            // SQL 실행 중 오류가 발생할 경우 예외를 처리합니다.
            // 예를 들어, 데이터베이스 연결 오류, SQL 문법 오류 등이 발생할 수 있습니다.
            e.printStackTrace();
            // 예외가 발생하면 해당 예외의 스택 추적 정보를 출력하여 오류 원인을 파악합니다.
            // SQL 예외가 발생할 경우, 이 예외 정보를 통해 문제를 해결할 수 있는 단서를 얻을 수 있습니다.
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                // PreparedStatement 객체를 닫아 자원을 해제합니다.
                // pstmt.close()는 PreparedStatement 객체가 사용한 리소스를 해제하고, 데이터베이스와의 연결을 종료합니다.
                if (conn != null) conn.close();
                // Connection 객체를 닫아 데이터베이스 연결을 종료합니다.
                // conn.close()는 데이터베이스와의 연결을 종료하여 불필요한 리소스 사용을 방지합니다.
                // 자원을 해제하지 않으면 메모리 누수나 다른 문제가 발생할 수 있습니다.
                // SQL 작업이 완료된 후에는 반드시 자원을 해제하여 시스템 자원의 낭비를 방지해야 합니다.
            } catch (SQLException e) {
                // 자원 해제 중 예외가 발생할 경우 이를 처리합니다.
                // 예를 들어, 연결 종료 중에 발생하는 SQL 예외를 처리합니다.
                e.printStackTrace();
                // 예외가 발생하면 해당 예외의 스택 추적 정보를 출력하여 오류 원인을 파악합니다.
                // 자원 해제 중 발생하는 예외는 드물지만, 발생할 경우 문제 해결을 위해 반드시 처리해야 합니다.
            }
        }
    }

    // 추가된 메서드: 방명록 리스트를 가져오는 메서드
    public List<GuestbookDTO> getAllGuestbooks(int startNum, endNum) {
        List<GuestbookDTO> list = new ArrayList<>();
        // 방명록 데이터를 담을 리스트를 생성합니다.
        // 이 리스트는 방명록의 각 항목을 담을 DTO 객체들을 저장합니다.
        // List는 자바의 Collection 인터페이스 중 하나로, 데이터의 순서가 중요할 때 사용됩니다.
        // ArrayList는 List 인터페이스를 구현한 클래스 중 하나로, 크기가 가변적인 배열을 사용하여 데이터를 저장합니다.
        // 이 리스트는 방명록 항목들이 순서대로 저장되며, 필요에 따라 순서대로 조회할 수 있습니다.
        
        try {
            conn = getConnection();
            // 데이터베이스 연결을 얻습니다.
            // 데이터베이스에 접근하여 SQL 문을 실행할 수 있도록 합니다.
            // 이 연결 객체를 통해 SQL 문을 데이터베이스에 전달하고, 그 결과를 받아올 수 있습니다.

            String sql = "SELECT * FROM guestbook ORDER BY seq DESC";
            // 방명록 데이터를 가져오기 위한 SQL SELECT 문을 정의합니다.
            // 최근에 작성된 글이 먼저 출력되도록 ORDER BY 절을 사용하여 내림차순으로 정렬합니다.
            // seq 컬럼을 기준으로 내림차순 정렬하여 최신 항목이 리스트의 맨 위에 오도록 합니다.
            // ORDER BY 절은 SQL 쿼리의 결과를 정렬하는 데 사용되며, 여기서는 seq 컬럼을 기준으로 내림차순으로 정렬합니다.
            
            pstmt = conn.prepareStatement(sql);
            // SQL 문을 실행하기 위해 PreparedStatement 객체를 생성합니다.
            // 이 객체는 미리 컴파일된 SQL 문을 실행하는 데 사용됩니다.
            // PreparedStatement는 SQL 문을 미리 컴파일하여 SQL 문을 빠르고 안전하게 실행할 수 있도록 합니다.
            
            rs = pstmt.executeQuery();
            // SQL SELECT 문을 실행하고 그 결과를 ResultSet에 저장합니다.
            // ResultSet은 SQL 쿼리의 결과를 담고 있으며, 한 행씩 데이터를 읽어올 수 있습니다.
            // executeQuery() 메서드는 SELECT 문을 실행하고, 그 결과를 ResultSet 객체로 반환합니다.
            // 이 객체를 통해 쿼리 결과를 한 행씩 처리할 수 있습니다.

            while (rs.next()) {
                // ResultSet의 다음 행으로 이동하면서 데이터가 있으면 계속 반복합니다.
                // rs.next()는 다음 행으로 커서를 이동시키고, 결과가 있으면 true를 반환합니다.
                // rs.next()는 ResultSet의 다음 행으로 이동하면서 해당 행에 데이터가 존재하는지 확인합니다.
                
                GuestbookDTO guestbookDTO = new GuestbookDTO();
                // ResultSet의 현재 행에서 데이터를 읽어와 GuestbookDTO 객체에 저장합니다.
                // 이 DTO 객체는 방명록의 한 항목을 나타내며, 각 컬럼의 값을 속성으로 가집니다.
                // GuestbookDTO는 데이터베이스에서 조회한 방명록 항목을 자바 객체로 변환하여 관리합니다.
                // 이 객체는 이후 클라이언트에게 전달되거나 다른 로직에서 사용될 수 있습니다.
                
                guestbookDTO.setSeq(rs.getInt("seq"));
                // ResultSet에서 seq 컬럼의 값을 읽어와 DTO의 seq 속성에 저장합니다.
                // rs.getInt("seq")는 seq 컬럼의 값을 정수형으로 가져와 guestbookDTO 객체에 설정합니다.
                // seq는 각 방명록 항목을 고유하게 식별하는 값입니다.
                guestbookDTO.setName(rs.getString("name"));
                // ResultSet에서 name 컬럼의 값을 읽어와 DTO의 name 속성에 저장합니다.
                // rs.getString("name")는 name 컬럼의 값을 문자열로 가져와 guestbookDTO 객체에 설정합니다.
                // name은 방명록을 작성한 사용자의 이름을 나타냅니다.
                guestbookDTO.setEmail(rs.getString("email"));
                // ResultSet에서 email 컬럼의 값을 읽어와 DTO의 email 속성에 저장합니다.
                // rs.getString("email")는 email 컬럼의 값을 문자열로 가져와 guestbookDTO 객체에 설정합니다.
                // email은 사용자가 방명록 작성 시 입력한 이메일 주소를 나타냅니다.
                guestbookDTO.setHomepage(rs.getString("homepage"));
                // ResultSet에서 homepage 컬럼의 값을 읽어와 DTO의 homepage 속성에 저장합니다.
                // rs.getString("homepage")는 homepage 컬럼의 값을 문자열로 가져와 guestbookDTO 객체에 설정합니다.
                // homepage는 사용자가 입력한 개인 홈페이지 URL을 나타냅니다.
                guestbookDTO.setSubject(rs.getString("subject"));
                // ResultSet에서 subject 컬럼의 값을 읽어와 DTO의 subject 속성에 저장합니다.
                // rs.getString("subject")는 subject 컬럼의 값을 문자열로 가져와 guestbookDTO 객체에 설정합니다.
                // subject는 방명록 항목의 제목을 나타냅니다.
                guestbookDTO.setContent(rs.getString("content"));
                // ResultSet에서 content 컬럼의 값을 읽어와 DTO의 content 속성에 저장합니다.
                // rs.getString("content")는 content 컬럼의 값을 문자열로 가져와 guestbookDTO 객체에 설정합니다.
                // content는 방명록 항목의 내용을 나타냅니다.
                guestbookDTO.setLogtime(rs.getDate("logtime"));
                // ResultSet에서 logtime 컬럼의 값을 읽어와 DTO의 logtime 속성에 저장합니다.
                // rs.getDate("logtime")는 logtime 컬럼의 값을 날짜 형식으로 가져와 guestbookDTO 객체에 설정합니다.
                // logtime은 방명록 항목이 작성된 시간을 나타냅니다.
                
                list.add(guestbookDTO);
                // 리스트에 GuestbookDTO 객체를 추가합니다.
                // 이 리스트는 나중에 모든 방명록 항목을 클라이언트에 전달하기 위해 사용됩니다.
                // 리스트에 추가된 GuestbookDTO 객체는 이후 클라이언트에게 전달되어 방명록 페이지에 출력됩니다.
            } // while
            
        } catch (SQLException e) {
            // SQL 실행 중 오류가 발생할 경우 예외를 처리합니다.
            e.printStackTrace();
            // 예외가 발생하면 해당 예외의 스택 추적 정보를 출력하여 오류 원인을 파악합니다.
            // SQL 예외가 발생할 경우, 로그를 통해 문제의 원인을 분석하고 해결할 수 있습니다.
            list = null;
        } finally {
            try {
                if (rs != null) rs.close();
                // ResultSet 객체를 닫아 자원을 해제합니다.
                // ResultSet은 데이터베이스에서 가져온 결과를 담고 있으므로, 사용 후에는 반드시 닫아야 합니다.
                // 자원을 해제하지 않으면 메모리 누수 및 다른 문제가 발생할 수 있습니다.
                if (pstmt != null) pstmt.close();
                // PreparedStatement 객체를 닫아 자원을 해제합니다.
                // PreparedStatement 객체는 SQL 문을 실행하기 위한 자원을 점유하므로, 사용 후 반드시 해제해야 합니다.
                if (conn != null) conn.close();
                // Connection 객체를 닫아 데이터베이스 연결을 종료합니다.
                // 데이터베이스 연결은 제한된 자원이므로, 사용 후에는 반드시 닫아야 합니다.
                // 자원 해제를 통해 시스템 자원을 효율적으로 관리하고, 잠재적인 문제를 예방할 수 있습니다.
            } catch (SQLException e) {
                e.printStackTrace();
                // 자원 해제 중 예외가 발생할 경우 이를 처리합니다.
                // 예외가 발생하면 해당 예외의 스택 추적 정보를 출력하여 오류 원인을 파악합니다.
            }
        }
        
        return list;
        // 방명록 리스트를 반환합니다.
        // 이 리스트는 방명록의 모든 항목을 포함하고 있으며, 클라이언트에 전달되어 출력됩니다.
        // 최종적으로 리스트에 저장된 모든 방명록 항목이 클라이언트에 전달되며,
        // 클라이언트는 이 데이터를 통해 방명록 페이지를 렌더링할 수 있습니다.
    }
}
