<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

    <%-- 
        int x = Integer.parseInt(request.getParameter("x");
        int y = Integer.parseInt(request.getParameter("y");
        
        // 이 부분은 JSP 스크립틀릿을 이용한 자바 코드입니다.
        // 사용자가 입력한 x와 y 값을 `request.getParameter("x")`로 받아오는데,
        // GET 또는 POST 방식으로 전달된 HTTP 요청 파라미터의 값을 가져오는 방식입니다.
        // 여기서 중요한 점은 `getParameter`로 가져오는 값은 **문자열**이므로,
        // 자바에서 숫자 연산을 하기 위해선 **Integer.parseInt()**로 문자열을 정수로 변환합니다.
        // 이 코드는 x와 y 값을 받아서 정수로 변환한 후, 그 값들을 활용하려고 합니다.
        // 그러나 이 방식은 JSP에서 스크립틀릿(<% %>)을 사용하는 방식이고,
        // 최근 JSP에서는 EL(Expression Language)을 선호하여,
        // 자바 코드가 아닌 표현 언어로 값을 처리하는 것을 권장합니다.
        // 하지만 이 코드 자체는 JSP 스크립틀릿의 동작 방식을 보여주는 좋은 예시입니다.
    --%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>

<body>

    <%-- <%=x %> + <%=x %> = <%=x+y %> --%>
    <%-- 
        이 부분은 스크립틀릿을 사용한 코드입니다. 
        위에서 변환된 x와 y 값을 HTML 문서에 출력하는 부분입니다.
        <%= %>는 JSP에서 스크립틀릿을 사용하여 값을 출력하는 표현식입니다.
        여기서는 x와 y의 값을 각각 더한 결과를 화면에 출력하는데 사용됩니다.
        EL을 사용하지 않고 스크립틀릿을 사용하여 자바 코드를 삽입하는 방식입니다.
        그러나 최근 JSP에서는 EL을 권장하기 때문에,
        스크립틀릿을 사용하는 것은 가능하면 피하는 것이 좋습니다.
        EL은 더 간결하고 유지보수가 용이하기 때문입니다.
    --%>

    <%-- <p> 계산 결과 : ${param.x } + ${param.y } = ${param.x + param.y }</p> --%>
    <%-- 
        이 부분은 EL(Expression Language)을 사용한 코드입니다. 
        ${param.x}와 ${param.y}는 각각 GET이나 POST 요청을 통해 전달된 x와 y 값을 나타냅니다.
        EL을 사용하면 자바 코드를 작성하지 않고도 JSP에서 데이터를 쉽게 다룰 수 있습니다.
        여기서는 ${param.x}와 ${param.y}로 각각 x와 y 값을 가져오고, 그 값을 더하는 방식입니다.
        ${param.x + param.y}는 두 값을 더한 결과를 화면에 출력하는 것입니다.
        EL은 자바 코드 없이 표현식으로 데이터를 처리하므로 코드가 더 간결하고 직관적입니다.
        최근의 JSP 개발에서는 EL을 사용하여 이렇게 데이터를 처리하는 것이 일반적입니다.
    --%>

    <p> 계산 결과 : ${param['x'] } + ${param['y'] } = ${param['x'] + param['y'] }</p>
    <%-- 
        이 코드도 EL을 사용하는 방식입니다. ${param['x']}와 ${param['y']}는 사용자가 입력한 x와 y 값을 가져옵니다.
        앞서 사용한 ${param.x}와 동일하게 x, y 파라미터 값을 EL로 가져오는 방식입니다.
        차이점은 []를 사용하여 파라미터 이름을 명시적으로 가져오는 방식입니다.
        ${param['x'] + param['y']}는 두 값을 더한 결과를 표현합니다.
        EL을 사용하면 자바 코드를 사용할 필요 없이 직관적으로 JSP에서 데이터를 처리할 수 있습니다.
        그리고 ${param['x']}와 ${param.x}는 거의 동일하게 동작하지만, 
        [] 안에 파라미터 이름을 넣으면 더 명시적으로 이름을 지정할 수 있습니다. 
        이 방식은 파라미터 이름에 특수문자나 공백이 있는 경우에도 사용될 수 있습니다.
    --%>
    
    <br/>
    
    <p> 계산 결과 : ${param['x'] } - ${param['y'] } = ${param['x'] - param['y'] }</p>
    <br/>
    
    <p> 계산 결과 : ${param.x } * ${param.y } = ${param.x * param.y } </p>
    <br/>
    
    <p> 계산 결과 : ${param.x } / ${param.y } = ${param.x / param.y } </p>

    <a href="elInput.jsp"> 다시 입력하기 </a>
    <%-- 
        이 코드는 사용자가 입력한 값을 다시 입력할 수 있도록 "elInput.jsp"로 돌아가는 링크입니다.
        '다시 입력하기' 버튼을 클릭하면 다시 elInput.jsp로 이동하여 값을 다시 입력할 수 있게 합니다.
        이는 단순한 HTML 링크로, JSP가 처리하는 로직과는 관계없습니다.
        사용자 경험을 향상시키기 위해 다시 입력 페이지로 쉽게 돌아가도록 하는 좋은 예시입니다.
    --%>

</body>
</html>

<!-- 

param의 의미
param: JSP에서 GET 또는 POST 요청으로 전달된 파라미터 값을 가져올 때 사용됩니다.
예를 들어, <input> 요소에 사용자가 입력한 값은 URL 파라미터로 전송되며, 이를 param으로 받아와 사용할 수 있습니다.

동작 과정
elInput.jsp에서 사용자가 X와 Y 값을 입력하고, 폼이 제출되면 그 값이 HTTP 요청 파라미터로 서버에 전달됩니다.

이때, X와 Y는 각각 name="x"와 name="y"로 지정되어 있으므로, 그 값들은 x, y라는 파라미터로 전송됩니다.
elResult.jsp에서 param 객체를 사용해 전송된 값을 읽어옵니다. 즉, param.x는 elInput.jsp에서 제출된 x 파라미터의 값을 의미합니다.

param과 관련된 EL 객체
${param['파라미터 이름']}: 특정 요청 파라미터의 값을 가져옵니다.
${paramValues['파라미터 이름']}: 배열 형태로 동일한 이름을 가진 여러 요청 파라미터의 값을 가져옵니다.

  -->
