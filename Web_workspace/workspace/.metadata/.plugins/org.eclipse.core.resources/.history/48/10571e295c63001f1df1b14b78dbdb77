<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>DOM에 대하여...</title>
<style type="text/css">

/* 테이블의 모든 테두리 선을 하나로 합치기 위해 border-collapse 속성을 설정합니다. 
   이를 통해 테이블 셀 사이의 이중 테두리가 사라지고, 단일 테두리가 표시됩니다. */
table {
	border-collapse: collapse;
}

/* 각 셀(td)의 크기를 고정합니다. 
   너비는 50px, 높이도 50px로 설정되어 있으며, 텍스트는 가운데 정렬됩니다. */
td {
	width: 50px;
	height: 50px;
	text-align: center; /* 텍스트를 수평 중앙 정렬 */
}

</style>
</head>
<body>
	<h1>Document Object Model</h1>
	<!-- 3x3 테이블을 생성합니다. 각 셀은 번호로 구분되어 있습니다. -->
	<table border="1">
		<tr>
			<td>1번</td>
			<td>2번</td>
			<td>3번</td>
		</tr>
		<tr>
			<td>4번</td>
			<td>5번</td>
			<td>6번</td>
		</tr>
		<tr>
			<td>7번</td>
			<td>8번</td>
			<td>9번</td>
		</tr>
	</table>
	
<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
// 문서가 준비되면 jQuery 코드가 실행됩니다.
$(function(){
	// 테이블의 다섯 번째 셀(td:eq(4))을 선택하여 배경색을 빨간색으로 변경합니다.
	$('td').eq(4).css('background', '#ff0000'); // 5번 셀의 배경색을 빨간색으로 설정

	// 다섯 번째 셀의 이전 셀(td:eq(4).prev())을 선택하여 배경색을 파란색으로 변경합니다.
	// 이 방법은 게시판 댓글 기능을 구현할 때, 이전 요소로 이동하는 방식에 많이 사용됩니다.
	$('td:eq(4)').prev().css('background', '#0000ff'); // 4번 셀의 배경색을 파란색으로 설정

	// 다섯 번째 셀의 다음 셀(td:eq(4).next())을 선택하여 배경색을 초록색으로 변경합니다.
	$('td:eq(4)').next().css('background', '#00ff00'); // 6번 셀의 배경색을 초록색으로 설정

	// 다섯 번째 셀의 부모 요소인 <tr>을 선택하여 해당 행의 텍스트 색상을 흰색으로 변경합니다.
	// parent() 함수는 현재 요소의 상위 요소를 선택하는 데 사용됩니다.
	$('td:eq(4)').parent().css('color', '#ffffff'); // 5번 셀이 속한 행의 텍스트 색상을 흰색으로 변경

	// 다섯 번째 셀의 부모 요소의 이전 행을 선택하여 해당 행의 텍스트 색상을 파란색으로 변경합니다.
	$('td:eq(4)').parent().prev().css('color', '#0000ff'); // 1~3번 셀이 속한 행의 텍스트 색상을 파란색으로 변경

	// 다섯 번째 셀의 부모 요소의 다음 행을 선택하여 해당 행의 텍스트 색상을 빨간색으로 변경합니다.
	$('td:eq(4)').parent().next().css('color', '#ff0000'); // 7~9번 셀이 속한 행의 텍스트 색상을 빨간색으로 변경

	// 다섯 번째 셀의 부모 요소의 다음 행의 모든 자식 요소들(td)을 선택하여 밑줄을 긋습니다.
	// children() 함수는 현재 요소의 직계 하위 요소들을 선택합니다.
	$('td:eq(4)').parent().next().children().css('text-decoration', 'underline'); // 7~9번 셀의 텍스트에 밑줄 추가

	// 다섯 번째 셀의 부모 요소의 다음 행의 자식 중 두 번째 요소의 텍스트를 굵게 만듭니다.
	$('td:eq(4)').parent().next().children().eq(1).css('font-weight', 'bold'); // 8번 셀의 텍스트를 굵게 설정

});

/* 
요소 탐색과 생성
jQuery는 특정 HTML 요소에 대한 객체를 기준으로 그 주변 요소나 태그의 트리 구조를 탐색할 수 있다.
jQuery는 웹브라우저에 보여지는 HTML 태그 안에 HTML 요소를 생성하여 포함시키도록 하는 기능을 지원한다.

DOM (Document Object Model)
DOM은 HTML과 XML 문서에 대한 구조적 정보를 제공하는 양식이다. 
즉, DOM이 HTML과 XML 문서의 뼈대를 의미한다.
DOM은 문서 구조나 외양 및 내용을 바꿀 수 있도록 프로그램에서 접근할 수 있는 방법을 제공하는 인터페이스를 말한다.
DOM은 프로퍼티와 메소드를 가지는 객체와 노드의 트리형 구조로 표현되는데,
이 구조는 스크립트나 다른 언어에서 웹페이지에 접근할 때 필수적이다.

(1) DOM의 구성요소
① Element : (= HTML 태그) 하나의 태그 요소를 의미한다.
② Attribute : (= HTML 태그 속성) 하나의 Element에 속해 있는 속성들을 의미한다.
③ Node : 하나의 Element에서 시작되는 트리 구조, 
         하나의 노드 안에는 여러 개의 노드가 포함되어 있을 수 있다.

(2) DOM 트리 구조

DOM 객체의 제어
다이나믹한 대화형 웹페이지 제작에서 DOM을 제어하는 것은 중요하다.
jQuery의 기능들도 모두 DOM을 제어했기 때문에 가능한 것이다.
jQuery가 제공하는 5개 함수를 통해, 하나의 요소를 기준으로 상대적으로 탐색할 수 있다.
  ① next() : 현재 요소를 기준으로 다음 요소를 리턴한다.
  ② prev() : 현재 요소를 기준으로 이전 요소를 리턴한다.
  ③ parent() : 현재 요소를 기준으로 상위 요소를 리턴한다.
  ④ children() : 현재 요소를 기준으로 하위 요소를 배열로 리턴한다.
  ⑤ eq(n) : 현재 요소를 기준으로 하위 요소 중 n번째 요소를 선택한다. n은 0부터 시작한다.

조상과 자손의 검색
(1) 직계 자손이나 항렬이 같은 친척 찾기
next(), prev(), parent(), children(), eq(n) 함수들은 특정 요소와 인접해 있는 다른 요소들을
탐색한다. 즉, 이 함수들은 HTML 태그의 Node를 타고 다니는 것과 같은 효과를 갖는다.

(2) 가까운 조상 찾기
parents() : HTML 요소가 인접해 있지 않더라도, 현재 객체 요소의 상위 태그 중에서 
파라미터로 전달된 셀렉터가 가리키는 가장 가까운 요소를 찾는다.
사용법 $("CSS셀렉터").parents("CSS셀렉터");

(3) 가까운 자식 찾기
find() : HTML 요소가 인접해 있지 않더라도, 현재 객체 요소의 하위 태그 중에서 
파라미터로 전달된 셀렉터가 가리키는 가장 가까운 요소를 검색한다.
사용법 $("CSS셀렉터").find("CSS셀렉터");
-->

</script>
</body>
</html>
