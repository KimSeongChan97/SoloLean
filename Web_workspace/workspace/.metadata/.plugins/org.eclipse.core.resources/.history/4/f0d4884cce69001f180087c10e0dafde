<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>방명록</title>
<style type="text/css">
/* 테이블의 테두리를 병합하여 깔끔하게 보이도록 설정 */
table {
	border-collapse: collapse; /* 테이블의 경계선을 합쳐서 중복되지 않도록 함 */
	/* border-collapse 속성은 테이블의 경계선을 병합하여 깔끔한 외형을 만들어줌 */
}
/* 테이블 셀(td, th)의 내부 여백을 설정하여 요소들이 여유있게 배치되도록 함 */
td, th {
	padding: 5px; /* 각 셀의 내용물 주위에 여백을 추가하여 가독성을 높임 */
	/* padding 속성은 각 셀 내부의 여백을 설정하여 텍스트나 입력 필드가 너무 테두리에 붙어 있지 않도록 여유 공간을 제공함 */
}
/* 각 입력 필드의 너비를 설정하여 사용자에게 더 넓은 입력 공간을 제공 */
input[name="name"] {
	width: 200px; /* 이름 입력 필드의 너비를 200px로 설정 */
	/* 너비(width) 속성은 입력 필드의 가로 길이를 지정함으로써 사용자에게 충분한 입력 공간을 제공함 */
}
input[name="email"] {
	width: 300px; /* 이메일 입력 필드의 너비를 300px로 설정 */
	/* 이름 필드보다 더 많은 글자를 입력해야 하는 이메일 필드의 특성을 고려해 더 넓은 공간을 제공함 */
}
input[name="homepage"] {
	width: 350px; /* 홈페이지 입력 필드의 너비를 350px로 설정 */
	/* 홈페이지 URL은 더 길 수 있으므로 너비를 더 넓게 설정함 */
}
input[name="subject"] {
	width: 400px; /* 제목 입력 필드의 너비를 400px로 설정 */
	/* 제목은 상대적으로 길 수 있어 가장 넓은 공간을 제공함 */
}
/* 제목과 내용에 대한 오류 메시지를 빨간색으로 표시하고, 작은 폰트 크기를 사용 */
#subjectDiv, #contentDiv {
	color: red; /* 오류 메시지를 빨간색으로 설정하여 시각적으로 경고함 */
	/* color 속성은 텍스트의 색상을 설정함. 빨간색(red)은 경고 메시지로 자주 사용됨 */
	font-size: 9pt; /* 작은 폰트 크기를 사용하여 가볍게 경고 메시지를 표시함 */
	/* font-size 속성은 텍스트의 크기를 설정함. 9pt는 비교적 작은 크기로 경고를 표시하는 데 적합함 */
	font-weight: bold; /* 오류 메시지를 강조하기 위해 글자를 굵게 표시 */
	/* font-weight 속성은 텍스트의 굵기를 설정함. bold로 설정하여 텍스트를 굵게 만들어 강조함 */
}

</style>
</head>
<body>
	<form id="guestbookWriteForm" method="post" action="/guestbookServlet/write">
		<!-- 테이블을 사용하여 입력 폼을 구성 -->
		<!-- table 태그는 데이터를 구조적으로 배치하는데 사용됨. 이 경우 입력 폼을 테이블 형태로 정리하여 가독성을 높임 -->
		<table border="1">
			<!-- 테이블의 테두리를 표시하기 위해 border 속성을 사용 -->
			<tr>
				<td>작성자</td>
				<!-- 작성자 이름을 입력받는 필드 -->
				<td><input type="text" name="name" placeholder="작성자 입력"/></td>
				<!-- 사용자가 입력해야 할 내용을 미리 안내하기 위해 placeholder 속성 사용 -->
				<!-- placeholder 속성은 입력 필드가 비어 있을 때 사용자에게 안내 텍스트를 제공하여 입력 내용을 쉽게 이해할 수 있게 도와줌 -->
			</tr>
			<tr>
				<td>이메일</td>
				<!-- 사용자의 이메일 주소를 입력받는 필드 -->
				<td><input type="text" name="email" placeholder="이메일 입력"/></td>
				<!-- 사용자가 입력해야 할 내용을 미리 안내하기 위해 placeholder 속성 사용 -->
				<!-- 이메일 주소를 입력하는 필드로, 사용자가 어떤 내용을 입력해야 하는지 명확히 알 수 있도록 안내함 -->
			</tr>
			<tr>
				<td>홈페이지</td>
				<!-- 사용자의 홈페이지 주소를 입력받는 필드. 기본값은 'http://' -->
				<td><input type="text" name="homepage" value="http://" /></td>
				<!-- 사용자가 쉽게 URL을 입력할 수 있도록 기본값 설정 -->
				<!-- value 속성을 통해 기본값을 설정하면, 사용자는 빈 필드 대신 예시값을 볼 수 있어 입력 작업이 더 쉬워짐 -->
			</tr>
			<tr>
				<td>제목</td>
				<td>
					<!-- 방명록 제목을 입력받는 필드 -->
					<input type="text" name="subject" id="subject" placeholder="제목입력" />
					<!-- 제목 입력과 관련된 오류 메시지를 표시할 div -->
					<div id="subjectDiv"></div>
					<!-- 제목 입력 오류 메시지를 보여줄 div로, 초기에는 비어 있음 -->
					<!-- div 요소는 블록 레벨 컨테이너로, 제목 입력과 관련된 오류 메시지를 표시하는 용도로 사용됨 -->
				</td>
			</tr>
			<tr>
				<td>내용</td>
				<td>
					<!-- 방명록 내용을 입력받는 필드 -->
					<textarea cols="60" rows="15" id="content" name="content"></textarea>
					<!-- textarea 요소는 여러 줄의 텍스트를 입력받는 필드로, 사용자가 방명록 내용을 작성할 수 있도록 함 -->
					<!-- cols와 rows 속성은 텍스트 입력 영역의 가로, 세로 크기를 지정함 -->
					<div id="contentDiv"></div>
					<!-- 내용 입력과 관련된 오류 메시지를 표시할 div -->
					<!-- 내용 입력 오류 메시지를 보여줄 div로, 초기에는 비어 있음 -->
				</td>
			</tr>
			<tr>
				<td colspan="2" align="center">
					<!-- 글을 제출하는 버튼. 클릭하면 폼 데이터가 서버로 전송됨 -->
					<input type="button" id="writeBtn" value="글쓰기" />
					<!-- 글쓰기를 클릭하면 자바스크립트를 통해 폼 검증 후 데이터 전송 -->
					<!-- type이 "button"인 경우, 버튼은 클릭할 때 아무 동작도 하지 않지만 JavaScript로 제어할 수 있음 -->
					<!-- 폼을 초기화하는 버튼. 모든 입력 필드의 값을 초기 상태로 되돌림 -->
					<input type="reset" value="다시작성" />
					<!-- 사용자가 폼을 초기화하여 처음부터 다시 작성할 수 있도록 함 -->
					<!-- reset 버튼은 폼 내의 모든 입력 필드를 초기값으로 되돌림 -->
					<!-- 글 목록으로 이동하는 버튼. -->
					<input type="button" id="list" value="글목록" 
					onclick="location.href = '/guestbookServlet/list?pg=1'"  />
					<!-- 글 목록 버튼을 클릭하면 사용자가 방명록 목록 페이지로 이동 -->
					<!-- onclick 속성을 통해 JavaScript 코드가 실행되며, 클릭 시 사용자를 특정 페이지로 이동시킴 -->
					<!-- location.href를 사용하여 사용자가 클릭할 때 /guestbookServlet/list 페이지의 1번 페이지로 이동하도록 설정함 -->					
				</td>
			</tr>
		</table>
		
	</form>

<!-- 최신 jQuery 라이브러리를 포함하여 이후 자바스크립트에서 jQuery를 사용 가능하게 함 -->
<script type="text/javascript" src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<!-- jQuery는 DOM 조작, 이벤트 처리, 애니메이션 등을 쉽게 할 수 있도록 도와주는 JavaScript 라이브러리 -->
<script type="text/javascript">
$(function(){
	// '글쓰기' 버튼이 클릭되었을 때 실행되는 함수
	// $(function(){})는 문서가 준비되었을 때 실행되는 jQuery의 단축 표현식으로, DOM이 완전히 로드된 후에 코드가 실행되도록 보장함
	$('#writeBtn').click(function(){
		// 오류 메시지를 표시하는 div를 비움 (기존 메시지 삭제)
		$('#subjectDiv').empty();
		$('#contentDiv').empty();
		// 새로운 검증 작업을 위해 오류 메시지 div의 내용을 비워 초기화
		// empty() 메서드는 선택한 요소의 모든 자식 요소를 제거함으로써 기존의 오류 메시지를 없애줌
		
		// 제목 입력 필드의 값이 비어있는지 확인
		if($('#subject').val() == ''){
			$('#subjectDiv').html('제목 입력하세요 !'); // 제목이 비어있다면 오류 메시지 표시
			$('#subject').focus(); // 제목 입력 필드로 포커스를 이동하여 사용자에게 입력을 유도
			// 제목이 입력되지 않은 경우 오류 메시지를 표시하고 입력 필드로 포커스를 이동
			// focus() 메서드는 특정 입력 필드에 포커스를 주어 사용자가 쉽게 입력을 시작할 수 있도록 함
		} 
		// 내용 입력 필드의 값이 비어있는지 확인
		else if($('#content').val() == ''){
			$('#contentDiv').html('내용 입력하세요 !'); // 내용이 비어있다면 오류 메시지 표시
			$('#content').focus(); // 내용 입력 필드로 포커스를 이동하여 사용자에게 입력을 유도
			// 내용이 입력되지 않은 경우 오류 메시지를 표시하고 입력 필드로 포커스를 이동
		} 
		// 제목과 내용이 모두 입력되었을 경우, 폼을 서버로 제출
		else
			$('#guestbookWriteForm').submit(); // 폼 데이터를 서버로 전송
			// 폼에 입력된 데이터가 검증을 통과했을 때, 서버로 제출하여 데이터를 처리
			// submit() 메서드는 폼을 서버에 제출하는 기능을 수행함. 여기서는 검증을 통과한 경우에만 폼을 제출함
	});
	
	/* 	
	// 제목 입력 필드에서 포커스가 벗어났을 때 (blur 이벤트 발생 시) 실행되는 함수 
	$('input[name="subject"]').blur(function(){
		$('#subjectDiv').empty(); // 오류 메시지 div를 초기화 (기존 메시지 삭제)
		let subject = $('input[name="subject"]').val(); // 제목 입력 필드의 값을 가져옴
		if (!subject) { // 제목이 비어있는지 확인
			$('#subjectDiv').html('제목을 입력하세요 !'); // 오류 메시지를 div에 표시
			$('input[name="subject"]').focus(); // 제목 입력 필드에 다시 포커스를 줌
			return false; // 추가 동작을 막기 위해 false 반환
		}
	}); // 제목 검증 끝

	// 내용 입력 필드에서 포커스가 벗어났을 때 (blur 이벤트 발생 시) 실행되는 함수 
	$('textarea[name="content"]').blur(function(){
		let content = $('textarea[name="content"]').val(); // 내용 입력 필드의 값을 가져옴
		$('#contentDiv').empty(); // 오류 메시지 div를 초기화
		if (!content) { // 내용이 비어있는지 확인
			$('#contentDiv').html('내용을 입력하세요 !'); // 오류 메시지를 div에 표시
			$('textarea[name="content"]').focus(); // 내용 입력 필드에 다시 포커스를 줌
			return false; // 추가 동작을 막기 위해 false 반환
		}
	}); // 내용 검증 끝

	// 글쓰기 버튼이 클릭될 때 실행되는 함수 
	$('input[type="submit"]').click(function(){
		let subject = $('input[name="subject"]').val(); // 제목 입력 필드의 값을 가져옴
		let content = $('textarea[name="content"]').val(); // 내용 입력 필드의 값을 가져옴
		if (!subject || !content) { // 제목 또는 내용이 비어있는지 확인
			return false; // 폼이 제출되지 않도록 함
		}
	}); // 글 저장 끝
	
	*/
 
});

</script>
</body>
</html>

<!--
 주석 설명:
테이블 및 입력 필드 스타일링 (table, td, th, input 등):
테이블의 셀 간격을 없애고, 셀과 입력 필드에 여유로운 패딩과 너비를 설정하여 사용자의 입력 경험을 향상시켰습니다.
이렇게 함으로써 사용자는 더 넓고 깔끔한 입력 공간을 이용할 수 있습니다.

오류 메시지 스타일링 (#subjectDiv, #contentDiv):
오류 메시지를 빨간색으로, 작은 글자 크기와 굵은 폰트로 설정하여 강조하고 눈에 잘 띄게 했습니다.
이를 통해 사용자에게 경고 메시지를 명확하게 전달할 수 있습니다.

#writeBtn 클릭 이벤트 처리:
글쓰기 버튼이 클릭될 때 실행되는 함수는 입력 필드(제목, 내용)가 비어있지 않은지 확인한 후, 폼을 서버로 제출합니다.
제목이나 내용이 비어 있을 경우, 해당하는 입력 필드에 포커스를 주고, 적절한 오류 메시지를 표시합니다.
$('#guestbookWriteForm').submit(); 구문은 유효성 검사를 통과했을 때 폼을 서버로 제출합니다.
이 과정에서 사용자가 필수 필드를 놓치지 않도록 안내합니다.

이벤트 핸들러로 사용되지 않는 주석 처리된 코드:
주석 처리된 코드는 입력 필드에서 포커스가 벗어났을 때 즉시 유효성 검사를 수행하는 코드입니다. 
이는 글쓰기 버튼을 클릭하기 전에도 사용자가 입력한 내용을 실시간으로 검사할 수 있는 기능을 제공합니다.
이 코드들은 활성화된 click 이벤트 핸들러와 별도로, 보다 세분화된 사용자 경험을 제공할 수 있는 추가 옵션으로 포함되어 있습니다.
실제 프로젝트에서는 사용자의 편의를 위해 이러한 기능을 활성화할 수도 있습니다.
 -->
