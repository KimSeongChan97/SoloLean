package guestbook.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import guestbook.bean.GuestbookDTO;

public class GuestbookDAO {
    private String driver = "oracle.jdbc.driver.OracleDriver";
    // 오라클 JDBC 드라이버의 클래스 이름을 문자열로 지정합니다.
    
    private String url = "jdbc:oracle:thin:@localhost:1521:xe"; 
    // 오라클 데이터베이스에 연결하기 위한 URL입니다.
    // 이 예제에서는 로컬호스트에서 실행 중인 XE(Express Edition) 데이터베이스에 연결합니다.

    private String username = "C##JAVA";  // DB 사용자명
    // 데이터베이스에 접속하기 위한 사용자명을 지정합니다. 

    private String password = "1234";  // DB 비밀번호
    // 데이터베이스에 접속하기 위한 비밀번호를 지정합니다.
    
    private Connection conn; // 데이터베이스와의 연결을 나타내는 객체입니다.
    private PreparedStatement pstmt; // SQL 문을 실행하기 위한 객체입니다.
    private ResultSet rs; // SQL 쿼리의 결과를 저장하기 위한 객체입니다.
    
    private static GuestbookDAO guestbookDAO = new GuestbookDAO();
    // 싱글톤 패턴을 사용하여 GuestbookDAO 클래스의 유일한 인스턴스를 생성합니다.
    
    // 싱글톤 패턴으로 GuestbookDAO 인스턴스 생성 및 반환
    public static GuestbookDAO getInstance() {
        // 이 메서드를 통해 GuestbookDAO의 유일한 인스턴스를 반환합니다.
        return guestbookDAO;
    }

    private GuestbookDAO() {
        // private 생성자를 통해 외부에서 객체 생성을 막고, 오직 getInstance()를 통해서만 접근할 수 있게 합니다.
        try {
            // 1. 드라이버 로딩
            // JDBC 드라이버를 메모리에 로드합니다. 이 작업은 데이터베이스와의 연결을 시작하기 전에 반드시 필요합니다.
            Class.forName(driver);
        } catch (ClassNotFoundException e) {
            // 드라이버 클래스가 존재하지 않을 경우 발생하는 예외를 처리합니다.
            e.printStackTrace();
        }
    }
    
    private Connection getConnection() throws SQLException {
        // 데이터베이스와의 연결을 설정하고, 그 연결을 나타내는 Connection 객체를 반환합니다.
        // DriverManager.getConnection() 메서드를 사용하여 데이터베이스에 접속합니다.
        return DriverManager.getConnection(url, username, password);
    }

    public void guestbookWrite(GuestbookDTO guestbookDTO) {
        // guestbookWrite 메서드는 guestbookDTO 객체를 받아 이를 데이터베이스에 삽입하는 기능을 수행합니다.
        try {
            conn = getConnection(); 
            // getConnection() 메서드를 호출하여 데이터베이스 연결을 얻습니다.
            
            String sql = """
                    insert into guestbook values(seq_guestbook.nextval, ?,?,?,?,?, sysdate)
                    """;
            // SQL INSERT 문을 정의합니다. 이 문장은 guestbook 테이블에 새 레코드를 삽입하며,
            // seq_guestbook.nextval을 통해 자동으로 증가하는 시퀀스 값을 사용합니다.
            // ?는 SQL 문에서 파라미터를 나타내며, 나중에 pstmt.setString()을 통해 값이 채워집니다.

            pstmt = conn.prepareStatement(sql); 
            // PreparedStatement 객체를 생성합니다. 이 객체는 SQL 문을 실행하기 위해 사용됩니다.

            // ? 에 데이터 대입
            // 각 ?에 해당하는 위치에 guestbookDTO 객체로부터 값을 가져와 대입합니다.
            pstmt.setString(1, guestbookDTO.getName()); // 첫 번째 ?에 이름 값을 대입합니다.
            pstmt.setString(2, guestbookDTO.getEmail()); // 두 번째 ?에 이메일 값을 대입합니다.
            pstmt.setString(3, guestbookDTO.getHomepage()); // 세 번째 ?에 홈페이지 값을 대입합니다.
            pstmt.setString(4, guestbookDTO.getSubject()); // 네 번째 ?에 제목 값을 대입합니다.
            pstmt.setString(5, guestbookDTO.getContent()); // 다섯 번째 ?에 내용 값을 대입합니다.

            pstmt.executeUpdate(); 
            // SQL 문을 실행하여 데이터베이스에 변경 사항을 적용합니다. 
            // 이 메서드는 실행된 행의 수를 반환합니다. 하지만 여기서는 반환값을 사용하지 않습니다.
            
        } catch (SQLException e) {
            // SQL 실행 중 오류가 발생할 경우 예외를 처리합니다.
            e.printStackTrace();
        } finally {
            try {
                if (pstmt != null) pstmt.close();
                // PreparedStatement 객체를 닫아 자원을 해제합니다.
                if (conn != null) conn.close();
                // Connection 객체를 닫아 데이터베이스 연결을 종료합니다.
            } catch (SQLException e) {
                // 자원 해제 중 예외가 발생할 경우 이를 처리합니다.
                e.printStackTrace();
            }
        }
    }
}
