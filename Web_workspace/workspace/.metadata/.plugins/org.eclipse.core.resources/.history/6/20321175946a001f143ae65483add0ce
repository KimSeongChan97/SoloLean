package member.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class MemberDAO {

    // 1. 싱글톤 인스턴스 생성 (static으로 유일한 인스턴스를 유지)
    private static MemberDAO instance = new MemberDAO();

    // 2. DB 연결에 필요한 정보 설정 (Oracle용)
    private final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe"; // Oracle DB URL (예시)
    private final String DB_USER = "C##JAVA"; // DB 사용자명
    private final String DB_PASSWORD = "1234"; // DB 비밀번호

    // 3. 생성자를 private으로 정의해서 외부에서 인스턴스 생성 차단
    private MemberDAO() {
        try {
            // Oracle JDBC 드라이버 로드
            Class.forName("oracle.jdbc.driver.OracleDriver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    // 4. 싱글톤 인스턴스를 반환하는 메서드
    public static MemberDAO getInstance() {
        return instance;
    }

    // 5. DB 연결 메서드
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    // 6. ID 중복 확인 메서드 (idExist)
    public boolean idExist(String id) {
        boolean result = false;

        // Oracle용 SQL 쿼리문 (회원 테이블에서 id 중복 확인)
        String sql = "SELECT COUNT(*) FROM member WHERE id = ?";
        
        // try-with-resources로 자원 자동 반환 설정
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // SQL 쿼리에 id 값 바인딩
            pstmt.setString(1, id);

            // SQL 실행 및 결과 처리
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    result = rs.getInt(1) > 0; // COUNT 값이 0보다 크면 중복된 id가 존재함
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return result; // true: 중복, false: 사용 가능
    }
}
