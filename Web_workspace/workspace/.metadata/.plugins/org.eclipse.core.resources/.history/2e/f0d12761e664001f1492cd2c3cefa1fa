<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ID 중복 검사</title>
<!-- 브라우저의 탭에 표시될 페이지의 제목을 설정합니다. 이 제목은 또한 북마크를 만들 때 사용됩니다. -->
<link rel="stylesheet" href="../css/common.css">
<!-- 공통 스타일을 정의한 CSS 파일을 연결합니다. 이 파일은 여러 페이지에서 공통적으로 사용되는 스타일을 정의하여 일관된 디자인을 유지할 수 있게 합니다. -->
<link rel="stylesheet" href="../css/reset.css">
<!-- 브라우저 기본 스타일을 초기화하기 위한 CSS 파일을 연결합니다. 이는 브라우저마다 다르게 적용되는 기본 스타일을 통일시키기 위해 사용됩니다. -->
<style type="text/css">
#idDiv {
	color: red;
	font-size: 9pt;
	font-weight: bold;
	padding: 10px;
	/* ID가 idDiv인 요소에 적용될 스타일을 정의합니다.
	   텍스트 색상을 빨간색으로 설정하고, 글씨 크기를 9pt로 지정하며, 글씨를 굵게 표시합니다.
	   또한 padding을 10px로 설정하여 내부 여백을 추가합니다. */
}
</style>
</head>
<body>
	<h1 class="title"> 아이디 중복 검사 </h1>
	<!-- 페이지의 제목을 화면에 표시합니다. 클래스 이름이 "title"로 설정되어 있어 CSS를 통해 스타일링할 수 있습니다. -->
	<div class="exec">
		<form>
			<input type="text" name="user_id" />
			<!-- 사용자가 입력할 수 있는 텍스트 필드입니다. name 속성에 "user_id"를 지정하여 폼 데이터가 서버로 전송될 때 해당 값을 이 이름으로 참조할 수 있습니다. -->
			<input type="button" id="checkId" value="중복검사" />	
			<!-- 사용자가 클릭할 수 있는 버튼으로, ID 중복검사를 실행하는 트리거 역할을 합니다. ID는 'checkId'로 설정되어 jQuery에서 이 요소를 쉽게 찾을 수 있습니다. -->
			<div id="idDiv"></div>	
			<!-- 중복 검사 결과를 표시할 div 요소입니다. ID는 'idDiv'로 설정되어 있으며, 초기에는 내용이 비어 있습니다. -->
		</form>	
	</div>
	
	<div class="console"></div>
	<!-- 검사 결과에 따라 메시지를 출력할 div 요소입니다. 중복 여부에 따라 이 요소에 결과 메시지를 동적으로 삽입합니다. -->
	
	
<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<!-- jQuery 라이브러리를 불러오는 script 태그입니다. 이 라이브러리를 사용하면 AJAX 요청 및 DOM 조작을 쉽게 수행할 수 있습니다. jQuery의 최신 버전을 사용하여 호환성과 성능을 향상시킵니다. -->
<script type="text/javascript">
$(function(){
	// 문서가 완전히 로드된 후에 jQuery 코드를 실행할 수 있도록 보장합니다. 즉, DOM이 준비된 후에 내부 코드를 실행할 수 있게 합니다.
	
	$('#checkId').click(function(){
		// 'checkId' 버튼이 클릭되었을 때 실행되는 함수로, ID 중복 검사를 수행하기 위해 서버에 AJAX 요청을 보냅니다.
		
		// 중복검사 초기화(유효성 검사)
		$('#idDiv').empty();
		// 중복 검사 결과를 표시할 영역을 초기화합니다. 이전 검사 결과를 지워 화면을 깔끔하게 유지합니다.
		
		//유효성 검사
		var user_id = $('input[name="user_id"]').val();
		// 사용자가 입력한 user_id 값을 가져옵니다. jQuery의 val() 메소드를 사용하여 input 요소의 값을 가져옵니다.
		
		if(!user_id) {
			// 입력된 아이디가 없으면 경고 메시지를 표시하고 중복 검사 프로세스를 중단합니다.
			
			//alert("아이디를 입력하세요.");
			$('#idDiv').text('~아이디를 입력하세요 !~');
			// idDiv 요소에 경고 메시지를 텍스트로 설정하여 사용자에게 아이디 입력을 요구합니다.
			
			$('input[name="user_id"]').focus();
			// 사용자의 입력 포커스를 아이디 입력 필드로 이동시켜 바로 입력할 수 있게 합니다.
			
			return false;
			// 함수 실행을 중단하여, 이후의 코드가 실행되지 않도록 합니다. 이는 유효성 검사를 실패한 경우 서버 요청이 진행되지 않도록 하기 위함입니다.
		} // if (유효성 검사)
		
		$.get('../checkId/checkId.jsp',
			// {변수이름: 값});
			{'user_id': user_id},
			// 서버로 보낼 데이터를 JSON 형식으로 지정합니다. 여기서 'user_id'라는 키와 사용자가 입력한 값을 함께 전송합니다.
			
			function(data){
				// 서버로부터 데이터를 받아오면 실행되는 콜백 함수입니다. 이 함수의 매개변수 'data'에는 서버가 반환한 XML 데이터가 들어옵니다.
				
				console.log(data);
				// 받아온 원시 XML 데이터를 콘솔에 출력하여 개발자가 데이터를 확인할 수 있게 합니다.
				
				console.log($(data));
				// jQuery 객체로 변환된 XML 데이터를 콘솔에 출력하여, 이후 jQuery 메소드를 사용해 데이터를 쉽게 조작할 수 있게 합니다.
				
				let result_text = $(data).find('result').text(); // "true" or "false" 문자열로 옴
				// XML 데이터에서 <result> 태그의 텍스트 값을 추출합니다. 이 값은 서버에서 보내준 중복 검사 결과로, "true" 또는 "false"의 문자열 형태로 받아옵니다.
				
				// 문자열로 들어온 값을 boolean 으로 변환, "true" => true
				let result = eval(result_text);
				// eval() 함수를 사용하여 문자열로 들어온 "true" 또는 "false"를 실제 boolean 값으로 변환합니다.
				// 이는 보안상 권장되지 않는 방법이므로, 코드 작성 시 유의해야 합니다. 더 안전한 방식은 문자열을 직접 비교하여 boolean 값으로 변환하는 것입니다.
				
				if(result)
					// result 값이 true인 경우, 즉 이미 사용 중인 아이디인 경우에 대한 처리를 합니다.
					
					$('.console').html('<span style="color: red; font-weight: bold;">이미 사용 중인 아이디 입니다.</span>');
					// 콘솔 영역에 빨간색 굵은 글씨로 "이미 사용 중인 아이디입니다."라는 경고 메시지를 출력합니다.
				else
					// result 값이 false인 경우, 즉 사용 가능한 아이디인 경우에 대한 처리를 합니다.
					
					$('.console').html('<span style="color: blue; font-weight: bold;">사용 가능한 아이디 입니다.</span>');
					// 콘솔 영역에 파란색 굵은 글씨로 "사용 가능한 아이디입니다."라는 메시지를 출력합니다.
						
			});
		// $.get() 메소드는 GET 방식으로 서버에 요청을 보내고, 응답 데이터를 받아온 후 콜백 함수에서 그 데이터를 처리합니다. 이 메소드는 AJAX 호출의 간단한 대체 방식입니다.
	});
});
</script>
</body>
</html>

<!-- 
(1) $.ajax()
   $.ajax({
      url: "XML파일의 URL",
      type: "get / post",
      data: "파라미터 문자열 key=value&key=value", -- 서버로 보내는 데이터
      		{ "변수": "값1", "변수": "값2", .. }
      dataType: "xml",							-- 서버로부터 반환되는 데이터 타입
      success: function(data) {					-- 200 (OK)
         ... 통신이 성공한 경우 실행되는 함수 ...
      },
      error: function(err){}					-- 404, 405, 500, 400...
   });

(2) $.get() / $.post()
   $.get("url", {파라미터 json}, function(data) {
         ... XML 데이터의 처리 ...
      }, ["xml"]);

예) 
var ajax = $.get("url", {파라미터 json}, function(data) {...XML 데이터의 처리...}, ["xml"]);

(3) ajax.fail() / ajax.always()
ajax.fail(function() {
   // 404, 500 에러 등이 발생한 경우 실행될 내용
});

ajax.always(function() {
   // 통신 성공, 실패 여부에 상관없이 무조건 마지막에 호출됨 (java 의 finally 와 비슷함)
});
 -->
