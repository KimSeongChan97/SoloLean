<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<link rel="stylesheet" href="../css/common.css">
<link rel="stylesheet" href="../css/reset.css">
</head>
<body>

<h1 class="title">$.ajax() 함수를 사용한 텍스트 읽기</h1> 
	<div class="exec">
		<input type="button" value="txt파일 가져오기" id="mybtn"/> 
		<!-- 버튼 클릭 시 AJAX 요청을 보내는 기능을 수행하는 버튼이다. -->
		<!-- 이 버튼을 클릭하면 서버에 비동기적으로 데이터를 요청하게 된다. 데이터 요청은 전체 페이지의 새로고침 없이 이루어진다. -->
	</div>
	<div class="console" id="result"></div>
	<!-- 서버에서 받은 데이터를 출력할 div 요소로, AJAX 요청이 성공하면 이곳에 텍스트가 삽입된다. -->
	<!-- 요청이 성공하면, 서버에서 응답받은 데이터를 이 div 요소 내에 출력한다. 이 영역이 동적으로 업데이트된다. -->

<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<!-- jQuery 라이브러리를 불러오는 script 태그로, AJAX 요청 및 DOM 조작 등을 간편하게 처리할 수 있게 해준다. -->
<!-- jQuery 라이브러리는 웹 페이지의 요소를 쉽게 선택하고 조작할 수 있으며, AJAX 요청을 통해 서버와 비동기적으로 통신하는 기능을 제공한다. -->

<script type="text/javascript">
$(function(){
	// 문서가 완전히 로드된 후에 jQuery 코드가 실행되도록 보장하는 함수이다.
	// 이 코드는 DOM이 준비되었을 때 실행되며, $(document).ready()와 동일한 기능을 한다.
	$('#mybtn').click(function(){
		// 'mybtn' 버튼이 클릭되면, 아래의 AJAX 요청이 실행된다.
		// 사용자가 버튼을 클릭하면, 서버에 데이터를 요청하여 처리하는 비동기 요청이 시작된다.
		$.ajax({
			type: 'get',
			// GET 방식으로 데이터를 서버에 요청한다. GET 방식은 주로 데이터를 조회할 때 사용되며, 데이터를 URL에 포함하여 전송한다.
			// GET 방식은 클라이언트에서 서버로 데이터를 보낼 때 URL의 쿼리 문자열로 데이터를 포함시킨다. 이 방식은 주로 데이터를 조회할 때 사용된다.
			
			url: '../text/textdata.jsp', 
			// 서버에 요청할 URL을 설정한다. GET 방식에서는 이 URL 뒤에 파라미터가 추가될 수 있다.
			// 여기서는 "textdata.jsp" 파일을 서버로부터 요청하고 있다.
			// 이 URL 경로는 서버의 JSP 파일로 연결되며, 요청된 데이터는 이 파일에서 처리된다.
			
			// data: '변수=값&변수=값', 
			// 서버로 데이터를 전송할 때 사용할 수 있는 형식 중 하나이다. key-value 쌍을 문자열로 연결해 서버로 보낸다. (주석 처리되어 사용되지 않음)
			// 이 형식은 쿼리 문자열을 직접 문자열로 지정하는 방식이며, 여러 개의 데이터를 "&"로 연결하여 서버에 전송할 수 있다.
			
			// success : function(data){}
			// 이 함수는 AJAX 요청이 성공적으로 완료되었을 때 실행된다. 서버가 응답한 데이터를 이 함수의 매개변수로 전달받는다.
			// 'data'는 매개변수 이름일 뿐이므로 다른 이름으로 변경해도 무방하다. 서버의 응답 데이터를 담는 역할을 한다.
			// 이 콜백 함수는 서버가 응답한 데이터를 처리하며, 요청이 성공적으로 완료된 후 실행된다.

			// data: 'keyword=Hello Ajax!!',
			// 서버로 데이터를 전송하는 방식 중 하나로, key-value 쌍을 문자열 형식으로 전송하는 방식이다. 여기서는 "keyword"라는 이름의 변수에 "Hello Ajax!!" 값을 서버로 보낸다. (주석 처리됨)
			// 쿼리 문자열로 데이터를 전송할 때 주로 사용되며, GET 방식에서는 이 데이터가 URL의 일부로 포함된다.
			
			// data: {변수: 값, ... }, // JSON 형식 
			// 이 방식은 JSON 형식으로 데이터를 서버에 전송하는 방법이다. 객체 형태로 여러 데이터를 서버에 전송할 수 있다.
			// 이 형식은 주로 POST 방식에서 사용되며, key-value 쌍을 JSON 객체 형태로 서버에 보낸다.

			data: {'keyword': 'Hello Ajax!!(키워드 값)' }, 
			// 서버로 JSON 형식의 데이터를 전송한다. 여기서는 "keyword"라는 key에 "Hello Ajax!!"라는 값을 서버로 보낸다.
			// 이 데이터는 key-value 형식으로 서버에 전달되며, 서버는 이 데이터를 처리하여 응답할 것이다.
			
			dataType: 'text',
			// 서버로부터 받을 데이터의 형식을 지정한다. 여기서는 'text'로 설정되어 있으므로, 서버로부터 일반 텍스트 데이터를 받게 된다.
			// 다른 형식으로는 'json', 'xml' 등이 있으며, 서버 응답에 따라 적절한 형식을 지정해야 한다.
			// 이 설정은 서버에서 어떤 형식의 데이터를 받을지를 정의하며, 'text'는 단순한 텍스트 데이터를 의미한다.
			
			success: function(data){
				// AJAX 요청이 성공적으로 완료되었을 때 실행되는 콜백 함수이다.
				// 'data'에는 서버에서 전송된 응답 데이터가 담겨 있다.
				// 요청이 성공하면 이 함수가 호출되며, 서버로부터 받은 데이터를 처리할 수 있다.
				$('#result').html(data);
				// 서버로부터 받은 데이터를 'result'라는 ID를 가진 div에 HTML 형식으로 삽입한다.
				// 이로 인해, 서버 응답 데이터가 브라우저 화면에 표시된다.
				// 서버 응답이 HTML 형식이거나 단순 텍스트인 경우, 이 데이터를 화면에 삽입할 수 있다.
			},
			
			error: function(e){
				// AJAX 요청이 실패했을 때 실행되는 콜백 함수이다.
				// 'e' 객체는 오류에 대한 정보를 담고 있으며, 이를 통해 오류 원인을 디버깅할 수 있다.
				// 이 함수는 서버가 요청에 응답하지 않거나, 네트워크 오류가 발생했을 때 호출된다.
				console.log(e); 
				// 오류 메시지를 브라우저의 개발자 도구 콘솔에 출력하여, 어떤 문제가 발생했는지 확인할 수 있다.
				// 콘솔에 출력되는 정보를 통해 오류를 디버깅하거나, 잘못된 요청을 수정할 수 있다.
			}
		});
	});
});
</script>
</body>
</html>

<!-- 
	request.getParamater("변수명")
클라이언트 ->요청 , <-응답 서버
	
HTML,				request, -> 클라이언트가 서버에 데이터를 요청할 때 사용하는 형식 (예: HTML 폼, AJAX 요청)
CSS,				response -> 서버가 클라이언트에 응답할 때 사용하는 형식 (예: HTML 페이지, JSON 데이터)
JS


 -->
