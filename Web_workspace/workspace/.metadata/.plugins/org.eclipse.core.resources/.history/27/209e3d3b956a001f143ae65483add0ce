package member.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class MemberDAO {

    // 1. 싱글톤 인스턴스 생성 (static으로 유일한 인스턴스를 유지)
    private static MemberDAO memberDAO = new MemberDAO();

    // 2. DB 연결에 필요한 정보 설정 (Oracle용)
    private final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe"; // Oracle DB URL (예시)
    private final String DB_USER = "C##JAVA"; // DB 사용자명
    private final String DB_PASSWORD = "1234"; // DB 비밀번호

    private Connection con;
    // 이 변수는 데이터베이스와의 연결을 나타내는 객체입니다.
    // Connection 객체를 통해 데이터베이스와의 연결을 관리하고, SQL 명령을 실행할 수 있습니다.
    // 예를 들어, 이 객체를 통해 SQL 쿼리를 데이터베이스로 전송하고, 그 결과를 받아올 수 있습니다.

    private PreparedStatement pstmt;
    // PreparedStatement는 SQL 문을 실행하기 위한 객체입니다.
    // 이 객체는 미리 컴파일된 SQL 문을 실행하여 성능을 높이고, SQL 인젝션 공격을 방지할 수 있습니다.
    // SQL 문에서 파라미터를 바인딩하여 실행할 수 있어, 데이터베이스 작업을 더욱 안전하게 수행할 수 있습니다.

    private ResultSet rs;
    // ResultSet 객체는 SQL 쿼리의 결과를 저장하는 데 사용됩니다.
    // SELECT 문을 실행한 후, 반환된 데이터는 ResultSet에 저장되며, 이 데이터를 통해 데이터베이스에서 조회된 결과를 처리할 수 있습니다.
    // 예를 들어, 데이터베이스에서 특정 조건에 맞는 데이터를 가져올 때, 이 객체에 결과가 저장됩니다.
    
    // 4. 싱글톤 인스턴스를 반환하는 메서드
    public static MemberDAO getInstance() {
        return memberDAO;
    }
    
    
    
    // 5. DB 연결 메서드
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
    }

    // 6. ID 중복 확인 메서드 (idExist)
    public boolean idExist(String id) {
        boolean result = false;

        // Oracle용 SQL 쿼리문 (회원 테이블에서 id 중복 확인)
        String sql = "SELECT COUNT(*) FROM member WHERE id = ?";
        
        // try-with-resources로 자원 자동 반환 설정
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            // SQL 쿼리에 id 값 바인딩
            pstmt.setString(1, id);

            // SQL 실행 및 결과 처리
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    result = rs.getInt(1) > 0; // COUNT 값이 0보다 크면 중복된 id가 존재함
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return result; // true: 중복, false: 사용 가능
    }
}
