package board.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import board.bean.BoardDTO;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class BoardDAO_lean {
    
    private DataSource ds;
    private Connection con;           // DB와의 연결을 담당하는 Connection 객체
    private PreparedStatement pstmt;  // SQL 쿼리 실행을 준비하는 PreparedStatement 객체
    private ResultSet rs;             // SQL 쿼리 실행 후 결과를 처리하는 ResultSet 객체, DB로부터 결과 데이터를 가져오는 역할을 합니다.
    
    public static BoardDAO_lean instance = new BoardDAO_lean();
    // Singleton 패턴을 통해 객체를 한 번만 생성하여 사용
    // Singleton 패턴은 하나의 클래스에 대해 인스턴스가 오직 하나만 생성되도록 보장합니다.
    // 여기서는 BoardDAO 인스턴스를 하나만 만들어서 이를 여러 곳에서 공유해 사용할 수 있게 됩니다.
    public static BoardDAO_lean getInstance() {
        return instance;
    }
    
    public BoardDAO_lean() {
        try {
            Context ctx = new InitialContext(); // JNDI 초기화
            // DataSource를 JNDI를 통해 찾아옵니다. "jdbc/oracle"은 서버 설정에서 정의된 자원의 이름입니다.
            // JNDI Lookup을 통해 데이터 소스를 가져옵니다. 이를 통해 Tomcat에 설정된 Connection Pool에 접근합니다.
            ds = (DataSource) ctx.lookup("java:comp/env/jdbc/oracle"); // DataSource Lookup, Tomcat 연결
        } catch (NamingException e) {
            e.printStackTrace(); // JNDI 조회 실패 시 예외 처리
        }
    }
    
    public void boardWrite(Map<String, String> map) {
        String sql = """
                INSERT INTO board_JSP (seq, id, name, email, subject, content, ref) 
                VALUES (board_seq.NEXTVAL, ?, ?, ?, ?, ?, board_seq.NEXTVAL)
                """;
        try {
            con = ds.getConnection();
            
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, map.get("id"));
            pstmt.setString(2, map.get("name"));
            pstmt.setString(3, map.get("email"));
            pstmt.setString(4, map.get("subject"));
            pstmt.setString(5, map.get("content"));
            
            pstmt.executeUpdate();
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // 자원 해제
            try {
                if (rs != null) rs.close();  // ResultSet 해제
                if (pstmt != null) pstmt.close(); // PreparedStatement 해제
                if (con != null) con.close();  // Connection 해제
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    
    public void boardList(startNum, endNum) {
    	
    }

    
}
