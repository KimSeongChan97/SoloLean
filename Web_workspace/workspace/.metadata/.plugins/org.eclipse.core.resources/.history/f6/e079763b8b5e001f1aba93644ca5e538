<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>연습문제</title>
</head>
<body>
	<h3>1~10 사이의 덧셈 문제를 발생합니다.</h3>
	
	<p>덧셈 문제(난수) 구하기</p>
	
	<!-- 문제 생성 버튼을 클릭하면 덧셈 문제가 생성됩니다 -->
	<input type="button" value="문제 생성" onclick="start()" />
	
	 <!-- 문제와 결과 보기 버튼이 표시될 부분 -->
	<p id="problem">문제 표시</p>
	
	<!-- 결과가 표시될 부분 -->
	<p id="result">결과</p>
	
<script type="text/javascript">
	// 난수를 생성하고 덧셈 문제를 화면에 표시하는 함수
	function start() {
		// 1~10 사이의 난수 두 개 생성
		// Math.random()은 0 이상 1 미만의 실수를 생성함.
		// 여기에 10을 곱해 0 이상 10 미만의 수를 만들고, 
		// Math.floor()를 사용해 소수점을 내림하여 0~9 범위의 정수를 만듦.
		// 마지막으로 +1을 해 1~10 범위로 변경.
		var x = Math.floor(Math.random() * 10) + 1;
		var y = Math.floor(Math.random() * 10) + 1;
		
		// 문제를 화면에 표시: 예를 들어 "3 + 7 = ?"
		// 이 부분에서 innerHTML을 사용하여 id가 "problem"인 <p> 태그 안에
		// 두 숫자의 덧셈 문제를 문자열로 표시. ex: "3 + 7 = ?"
		document.getElementById("problem").innerHTML = x + " + " + y + " = ? <br>";
		
		// '결과보기' 버튼을 문제 아래에 추가. 이 버튼은 클릭 시 printResult(x, y) 함수를 호출하여 답을 보여줌
		// 이 부분에서 += 연산자를 사용해, 기존 문제 표시 부분에 추가적으로 '결과보기' 버튼을 동적으로 삽입.
		// 버튼을 클릭하면 미리 설정한 두 숫자를 매개변수로 printResult(x, y) 함수가 호출됨.
		document.getElementById("problem").innerHTML 
		+= '<input type="button" value="결과보기" onclick="printResult(' + x + ',' + y + ')" />';
	}

	// 덧셈 결과를 보여주는 함수
	function printResult(x, y) {
		// x와 y를 더한 결과 계산
		// 앞서 생성된 두 난수 x와 y를 더하여 결과를 계산.
		var result = x + y;
		
		// 결과를 화면에 빨간색으로 표시
		// id가 "result"인 <p> 태그의 내용을 업데이트.
		// 덧셈 결과를 빨간색으로 강조 표시하여 시각적으로 눈에 띄게 만듦.
		// <span> 태그는 특정 부분의 스타일을 설정할 때 유용.
		document.getElementById("result").innerHTML =
			'<span style="color: red;">답: ' + result + '</span>';
	}

</script>
</body>
</html>

<!-- 
코드 분석:

1. start() 함수:
   - 사용자가 "문제 생성" 버튼을 클릭하면 이 함수가 호출됩니다.
   - 이 함수는 1~10 사이의 두 난수를 생성하고, 그 숫자들로 덧셈 문제를 화면에 표시합니다.
     - Math.random() 함수는 0 이상 1 미만의 난수를 반환하며, 이를 10을 곱하고 소수점을 내림(Math.floor) 처리하여 0부터 9까지의 정수를 얻습니다.
     - 여기에 1을 더해 1부터 10까지의 범위로 설정합니다.
     - 이를 통해 두 개의 난수 x와 y가 생성됩니다.
   - 화면에 문제를 표시할 때 '결과보기' 버튼도 함께 표시되며, 이 버튼을 클릭하면 printResult() 함수가 호출됩니다.
   - innerHTML 속성을 사용하여 DOM 요소의 내용을 업데이트하고, += 연산자를 사용하여 기존 내용을 유지하면서 추가로 '결과보기' 버튼을 생성합니다.

2. printResult() 함수:
   - '결과보기' 버튼을 클릭하면 이 함수가 호출됩니다.
   - 이 함수는 앞서 생성된 두 난수를 더한 결과를 계산하고, 그 결과를 빨간색으로 화면에 표시합니다.
     - x와 y 값을 더한 결과 result를 계산하고, 이를 화면에 표시합니다.
     - 빨간색으로 결과를 표시하기 위해 <span> 태그와 인라인 CSS 스타일을 사용합니다.

3. DOM 제어:
   - document.getElementById("problem")을 사용하여 HTML에서 id가 'problem'인 <p> 태그를 가져옵니다. 그 내용(innerHTML)을 덧셈 문제와 '결과보기' 버튼으로 업데이트합니다.
     - DOM(Document Object Model)은 HTML 문서의 구조를 표현하는 객체입니다. 자바스크립트를 통해 이를 동적으로 조작할 수 있습니다.
   - 결과는 document.getElementById("result")로 가져온 <p> 태그에 빨간색으로 표시됩니다.
     - innerHTML 속성을 사용하여 HTML 요소 안의 내용을 동적으로 변경할 수 있습니다. 이 경우에는 덧셈 문제의 답을 표시하는 데 사용됩니다.

4. Math.random():
   - Math.random()을 사용하여 0 이상 1 미만의 난수를 생성하고, 여기에 10을 곱한 후 Math.floor()로 소수점을 버려 1~10 사이의 정수를 만듭니다.
     - 이 방식은 난수 생성을 통해 매번 새로운 덧셈 문제를 만들 수 있게 해줍니다. 예를 들어, 사용자가 문제 생성 버튼을 누를 때마다 새로운 숫자 조합으로 문제가 표시됩니다.

이 코드의 주요 개념은 이벤트 처리, 난수 생성, DOM 제어 및 동적으로 HTML 요소를 업데이트하는 방법을 학습하는 데 있습니다. 초보자도 이해하기 쉬운 방식으로 구성되었습니다.
-->
