<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>a태그에 onclick</title>
</head>
<body>
	<h1>window 객체</h1>
	<h3>open 메소드 확인</h3>
	<div>
		<!-- a태그에 onclick 이벤트가 있을 경우 해당 이벤트를 먼저 실행하고, 그 다음 href로 이동하려고 합니다.
			 하지만, 여기서는 onclick 이벤트 내부에서 return false를 사용하여 href 이동을 막고 있습니다. -->
		<a href="#" onclick="open1(); return false;">새 창 열기</a> <!-- 링크를 클릭하면 open1() 함수를 실행하고, 페이지 이동을 막습니다. -->
		<br> 
		<a href="#" onclick="open2(); return false;">팝업 창 열기(1)</a> <!-- open2() 함수를 실행하여 팝업 창을 엽니다. -->
		<br>
		<!-- open3 함수에 URL을 매개변수로 전달하여 해당 URL을 새로운 팝업 창으로 엽니다. -->
		<a href="#" onclick="open3('https://www.naver.com'); return false;">팝업 창 열기(2-1)</a> <!-- 네이버 팝업 창 열기 -->
		<br>
		<a href="#" onclick="open3('https://www.google.com'); return false;">팝업 창 열기(2-2)</a> <!-- 구글 팝업 창 열기 -->
		<br>
	</div>

	<script type="text/javascript">
		// open1 함수는 새로운 브라우저 창을 엽니다.
		function open1() {
			// 새 창이 열린다.
			//window.open("open.html");
			// window.open() 메서드는 새로운 브라우저 창을 엽니다.
			// 첫 번째 인자는 열고자 하는 페이지의 URL이며, 두 번째 인자는 새 창의 이름입니다.
			// 세 번째 인자는 창의 크기와 속성들을 지정하는 옵션 문자열입니다.
			// 이 예제에서는 새 창의 너비가 500픽셀, 높이가 300픽셀로 설정됩니다.
			window.open("open.html", "", "width=500 height=300");
		}

		// open2 함수는 새로운 팝업 창을 엽니다. 매번 새롭게 창이 생성됩니다.
		function open2() {
			// 클릭 할 때 마다 새로운 팝업 창이 계속해서 열린다.
			// window.open()의 세 번째 인자는 새로 열린 창의 여러 옵션을 설정합니다.
			// scrollbars=no는 스크롤 바를 숨기고, toolbar=no는 도구 모음을 비활성화하며, 
			// menubar=no는 메뉴 모음을 숨기고, status=no는 상태 표시줄을 숨깁니다.
			// location=no는 주소 표시줄을 숨깁니다. 
			// 각 속성은 =로 값을 지정하며, 속성 간에는 쉼표로 구분됩니다.
			window.open("open.html", "",
							"width=300, height=500, scrollbars=no, toolbar=no, menubar=no, status=no, location=no");
		}
		
		// open3 함수는 URL을 받아 새로운 팝업 창을 열지만, 이전에 생성된 창이 있다면 그것을 재사용합니다.
		function open3(url) {
			// 한번만 생성된 팝업 창을 재사용
			// window.open의 두 번째 인자로 "아무이름이나 사용"이라는 이름을 지정하면, 해당 이름을 가진 창이 있으면 그 창이 재사용됩니다.
			// 즉, 같은 이름으로 여러 번 팝업 창을 열 경우 기존 창이 닫히지 않고, 새로 열리지 않으며, 이미 열린 창의 내용만 변경됩니다.
			// 여기서는 url 인자에 따라 네이버나 구글 페이지를 열 수 있습니다.
			window.open(url, "아무이름이나 사용",
			"width=300, height=500, scrollbars=no, toolbar=no, menubar=no, status=no, location=no");
		}
		
	</script>
</body>
</html>

<!-- 

1번 - a태그에서 onclick 이 있을 경우에는 onclick를 먼저 수행하고 href로 이동하는 액션을 취한다.
<a href="http://www.naver.com/" onclick="alert('hi');">TEST1</a>

- a태그의 기본 동작은 href 속성에 있는 URL로 이동하는 것입니다.
- 하지만 onclick 이벤트가 있을 경우 해당 이벤트가 먼저 실행되고, 그 후에 href 속성의 URL로 이동하려고 시도합니다.

2번 - onclick에서 return false가 있을 경우 href로 이동하는 액션을 취하지 않게 된다.
<a href="http://www.naver.com/" onclick="alert('hi'); return false;">TEST2</a>

- onclick 이벤트 내부에서 return false를 사용하면 a태그의 기본 동작인 페이지 이동이 취소됩니다.
- 즉, onclick 이벤트는 실행되지만 페이지는 이동하지 않습니다.

3번 - a태그에서 onclick 이 있을 경우에는 onclick를 먼저 수행하고 href로 이동하는 액션을 취하는데 
     href="#"로 호출 함수를 숨겨버렸기 때문에 페이지가 이동하지 않게 된다.
         갈 곳을 잃어버린 브라우저는 페이지의 상단으로 이동해버린다.
<a href="#" onclick="alert('hi');">TEST1</a>

- href="#"는 브라우저가 페이지 상단으로 이동하게 만듭니다. 페이지를 이동시키지 않으면서 자바스크립트 동작만 실행하려면 return false를 사용하여 동작을 방지할 수 있습니다.

 -->