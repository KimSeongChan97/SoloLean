package guestbook.service;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import guestbook.bean.GuestbookDTO;
import guestbook.dao.GuestbookDAO;

@WebServlet("/write")
public class GuestbookWriteServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		
		// 데이터
		request.setCharacterEncoding("UTF-8"); // 한글처리(post 방식)
		// 클라이언트가 보낸 데이터를 UTF-8 인코딩 방식으로 처리하여 한글이 깨지지 않도록 설정합니다.
		// POST 방식으로 전송된 데이터는 기본적으로 ISO-8859-1 인코딩이 적용되기 때문에 이를 UTF-8로 변환해야 합니다.
		// 이는 특히 한글과 같은 다국어 문자가 포함된 경우에 중요합니다.
		// getParameter로 데이터를 가져오기 전에 반드시 이 메서드를 호출해야만 한글이 깨지지 않습니다.
		
		String name = request.getParameter("name");
		// 클라이언트가 보낸 "name" 파라미터 값을 받아와 변수에 저장합니다.
		// request.getParameter() 메서드는 폼 필드의 값을 문자열로 반환합니다.
		// 이 값은 사용자가 입력한 이름으로, HTML 폼에서 전송된 데이터를 가져옵니다.
		
		String email = request.getParameter("email");
		// 클라이언트가 보낸 "email" 파라미터 값을 받아와 변수에 저장합니다.
		// 사용자가 입력한 이메일 주소를 받아옵니다.
		// 이메일은 방명록 작성자와의 연락을 위해 필요할 수 있는 정보입니다.
		
		String homepage = request.getParameter("homepage");
		// 클라이언트가 보낸 "homepage" 파라미터 값을 받아와 변수에 저장합니다.
		// 사용자가 입력한 홈페이지 주소를 받아옵니다.
		// 사용자의 개인 홈페이지나 블로그 주소와 같은 정보를 받는 필드입니다.
		
		String subject = request.getParameter("subject");
		// 클라이언트가 보낸 "subject" 파라미터 값을 받아와 변수에 저장합니다.
		// 사용자가 입력한 제목을 받아옵니다.
		// 사용자가 방명록에 남길 글의 제목으로, 글의 요약 또는 핵심 내용을 나타냅니다.
		
		String content = request.getParameter("content");
		// 클라이언트가 보낸 "content" 파라미터 값을 받아와 변수에 저장합니다.
		// 사용자가 입력한 내용을 받아옵니다.
		// 이 필드에는 방명록에 남길 글의 본문이 들어가며, 사용자가 주된 메시지를 작성하는 공간입니다.
		
		GuestbookDTO guestbookDTO = new GuestbookDTO();
		// GuestbookDTO 객체를 생성합니다. 이 객체는 데이터 전송을 위해 사용되는 자바빈(JavaBean)입니다.
		// DTO(Data Transfer Object)는 계층 간 데이터 전송을 위해 사용되는 객체입니다.
		// 데이터베이스와의 상호작용에서 데이터가 주고받을 때 사용됩니다.
		
		guestbookDTO.setName(name);
		// DTO 객체의 name 속성에 사용자가 입력한 이름을 설정합니다.
		// guestbookDTO 객체의 setName 메서드를 사용하여 name 필드를 설정합니다.
		
		guestbookDTO.setEmail(email);
		// DTO 객체의 email 속성에 사용자가 입력한 이메일을 설정합니다.
		// guestbookDTO 객체의 setEmail 메서드를 사용하여 email 필드를 설정합니다.
		
		guestbookDTO.setHomepage(homepage);
		// DTO 객체의 homepage 속성에 사용자가 입력한 홈페이지 주소를 설정합니다.
		// guestbookDTO 객체의 setHomepage 메서드를 사용하여 homepage 필드를 설정합니다.
		
		guestbookDTO.setSubject(subject);
		// DTO 객체의 subject 속성에 사용자가 입력한 제목을 설정합니다.
		// guestbookDTO 객체의 setSubject 메서드를 사용하여 subject 필드를 설정합니다.
		
		guestbookDTO.setContent(content);
		// DTO 객체의 content 속성에 사용자가 입력한 내용을 설정합니다.
		// guestbookDTO 객체의 setContent 메서드를 사용하여 content 필드를 설정합니다.
		// 각 속성들은 클라이언트가 전송한 데이터를 담고 있으며, 이후 데이터베이스에 저장되게 됩니다.
		// 이 과정에서 DTO 객체는 클라이언트의 데이터를 캡슐화하여 데이터베이스 계층으로 전달하는 역할을 합니다.
			
		// DB
		GuestbookDAO guestbookDAO = GuestbookDAO.getInstance(); // 싱글톤
		// GuestbookDAO 객체를 싱글톤 패턴으로 가져옵니다.
		// 싱글톤 패턴은 GuestbookDAO 객체가 하나만 생성되도록 보장하여 데이터베이스 접근 시 자원을 효율적으로 관리할 수 있게 합니다.
		// 여러 클래스에서 동시에 접근하더라도 동일한 인스턴스를 사용하게 되어 자원 낭비를 막을 수 있습니다.
		// DAO(Data Access Object) 클래스는 데이터베이스와의 상호작용을 담당하며, 
		// 여기서는 guestbook 테이블과 관련된 모든 DB 작업을 처리합니다.
		
		guestbookDAO.guestbookWrite(guestbookDTO);
		// 데이터베이스에 방명록 데이터를 저장하는 메서드를 호출합니다.
		// guestbookWrite 메서드는 GuestbookDTO 객체를 인자로 받아 데이터베이스에 삽입합니다.
		// 이 과정에서 데이터는 SQL INSERT 문을 통해 guestbook 테이블에 저장됩니다.
		// guestbookDAO.guestbookWrite(guestbookDTO)를 호출하면, 
		// 데이터베이스에 새로운 방명록 항목이 추가됩니다.
		
		// 응답
		response.setContentType("text/html; charset=UTF-8");
		// 클라이언트에게 HTML 형식의 응답을 보낼 것을 지정하며, 인코딩을 UTF-8로 설정하여 한글이 깨지지 않도록 합니다.
		// 브라우저가 서버로부터 받은 데이터를 정확하게 해석할 수 있도록 MIME 타입과 문자 인코딩을 설정합니다.
		// 클라이언트가 이 응답을 받을 때, HTML 형식의 데이터임을 인식하고 UTF-8로 인코딩된 문자를 올바르게 해석하게 됩니다.
		
		PrintWriter out = response.getWriter();
		// PrintWriter 객체를 사용하여 클라이언트에게 응답을 작성합니다.
		// PrintWriter는 문자 출력 스트림으로, 응답 데이터를 클라이언트에게 보낼 수 있습니다.
		// response.getWriter()는 클라이언트에게 데이터를 전송할 수 있는 출력 스트림을 반환합니다.
		
		out.println("<html>");
		// HTML 문서의 시작을 알립니다.
		// 응답의 시작 부분에 HTML 태그를 작성하여 클라이언트가 이 데이터를 HTML로 해석하도록 합니다.
		
		out.println("<body>");
		// HTML 문서의 본문을 시작합니다.
		// 본문 내용은 이 태그 내부에 작성되며, 브라우저는 이를 클라이언트에게 표시합니다.
		
		out.println("<h3>작성하신 글을 저장하였습니다.</h3>");
		// 사용자가 입력한 글이 저장되었음을 알리는 메시지를 출력합니다.
		// <h3> 태그를 사용하여 제목 크기의 텍스트를 출력하며, 사용자에게 데이터가 성공적으로 저장되었음을 알립니다.
		
		out.println("<input type='button' value='뒤로가기' onclick='history.go(-1)'>");
		// '뒤로가기' 버튼을 생성하고, 클릭 시 이전 페이지로 이동하도록 설정합니다.
		// history.go(-1)은 사용자가 방문했던 이전 페이지로 이동하게 합니다.
		// 이 버튼은 사용자가 이전 페이지로 돌아가도록 도와주며, history.go(-1)은 브라우저의 히스토리에서 한 단계 뒤로 이동하는 기능입니다.
		
		out.println("<input type='button' value='글목록' onclick=location.href='/guestbookServlet/list'>");
		// '글목록' 버튼을 생성하여 사용자가 글 목록 페이지로 이동할 수 있도록 설정합니다.
		// location.href를 통해 사용자는 /guestbookServlet/list URL로 이동하게 됩니다.
		// 사용자가 방명록 목록 페이지로 이동할 수 있도록 설정된 버튼입니다. location.href는 해당 URL로 브라우저를 리다이렉트합니다.
		
		out.println("</body>");
		// HTML 문서의 본문을 종료합니다.
		// <body> 태그의 종료를 알리는 태그로, 본문 내용을 모두 작성한 후 이 태그를 사용하여 닫습니다.
		
		out.println("</html>");
		// HTML 문서의 끝을 알립니다.
		// 문서의 구조가 완료되었음을 나타내며, 클라이언트가 HTML 문서를 완전히 해석할 수 있게 합니다.
		// 클라이언트에게 응답을 모두 전송한 후, 스트림을 닫아 자원을 해제하는 것이 좋습니다.
		
		/*
		 * // 데이터 받기 request.setCharacterEncoding("UTF-8");
		 * 
		 * // 클라이언트로부터 폼 데이터를 받아 DTO에 설정 GuestbookDTO dto = new GuestbookDTO();
		 * dto.setName(request.getParameter("name"));
		 * dto.setEmail(request.getParameter("email"));
		 * dto.setHomepage(request.getParameter("homepage"));
		 * dto.setSubject(request.getParameter("subject"));
		 * dto.setContent(request.getParameter("content"));
		 * 
		 * // DAO 객체를 생성하고 DB에 데이터 저장 GuestbookDAO dao = new GuestbookDAO();
		 * dao.guestbookWrite(dto);
		 * 
		 * // 응답을 설정하여 작성 완료 메시지를 출력
		 * response.setContentType("text/html; charser=UTF-8");
		 * response.getWriter().println("작성하신 글을 저장 완료하였습니다.");
		 */
		// 주석으로 처리된 코드는 앞서 작성된 코드와 유사한 내용을 담고 있으며, 데이터 수신, DTO 설정, DB 저장, 응답 작성의 단계로 구성되어 있습니다.
		// 이 주석은 코드의 대체 방법을 설명하는 것으로, 기존 코드의 흐름과 일치합니다.
		// 또한, 이 주석을 통해 다른 방식으로도 동일한 작업을 수행할 수 있음을 보여줍니다.
		// 주석으로 처리된 코드는 전체적인 흐름을 이해하는 데 도움이 되며, 
		// 다른 방법으로도 같은 결과를 얻을 수 있다는 것을 보여주는 좋은 예입니다.
	}
}
