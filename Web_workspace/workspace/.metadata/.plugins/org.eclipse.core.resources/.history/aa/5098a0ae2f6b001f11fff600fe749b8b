// 중복체크 여부를 확인하는 변수
// 아이디 중복 체크가 완료되었는지 여부를 저장하는 변수입니다.
// 'false'는 아직 중복 체크가 안된 상태이고, 'true'는 중복 체크가 완료된 상태를 나타냅니다.
// 'idChecked' 변수는 중복체크 버튼을 눌렀는지 확인하는 역할을 합니다.
// 이 변수를 통해 폼 제출 시 중복 체크가 되었는지 검사하여 아이디가 유효한지 확인할 수 있습니다.
let idChecked = false;

// ID 중복 체크 함수
// 사용자가 입력한 아이디가 중복되었는지 확인하는 함수입니다.
// 이 함수는 중복 체크 버튼을 클릭했을 때 호출됩니다.
// 'checkId' 함수는 사용자 입력을 기반으로 서버에 요청을 보내어 아이디 중복 여부를 확인합니다.
// 사용자가 아무런 아이디를 입력하지 않으면 메시지를 표시하고, 입력이 있으면 중복 여부를 확인하는 팝업 창을 띄웁니다.
function checkId() {
    // 사용자가 입력한 아이디 값을 가져옵니다.
    let id = document.getElementById('id').value;

    // 아이디 입력이 비어있다면, 사용자에게 아이디를 입력하라는 메시지를 보여줍니다.
    // 'if' 조건문을 사용해 아이디 입력란이 비어있는지 확인합니다.
    // 비어 있으면 사용자에게 경고 메시지를 띄우고, 비어 있지 않다면 서버에 중복 체크를 요청하는 새로운 창을 엽니다.
    if (id === "") {
        document.getElementById('idDiv').innerHTML = "먼저 아이디를 입력하세요 !!"; // 아이디가 입력되지 않은 경우, 사용자에게 경고 메시지를 표시합니다.
    } else {
        // 입력한 아이디를 기반으로 중복 확인 팝업 창을 엽니다.
        // 여기서 'window.open' 함수는 새로운 브라우저 창을 엽니다.
        // 이 창은 'checkId.jsp'로 요청을 보내어 서버 측에서 아이디 중복 여부를 확인하는 역할을 합니다.
        // 'id' 값을 쿼리스트링으로 전달하여 중복 여부를 확인합니다.
        window.open("./checkId.jsp?id=" + id, "myWindow", "width=450 height=150 top=100 left=800"); // 중복 체크 팝업을 띄워 서버와 통신합니다.
        // 중복 체크가 완료되었음을 표시하기 위해 'idChecked' 변수를 'true'로 변경합니다.
        // 사용자가 중복 체크 버튼을 클릭했으므로, 중복 확인이 완료되었다고 표시하기 위해 'idChecked' 값을 'true'로 설정합니다.
        idChecked = true; // 중복 체크가 완료된 상태로 설정합니다.
    }
}

// 이메일 선택 시, 직접 입력 기능 제공
function change() {
    document.getElementById("email2").value = document.getElementById("email3").value;
}

// 회원가입 함수
function memberWrite(event) {
    // 폼 제출을 방지하기 위해 기본 이벤트를 막음
    event.preventDefault();

    // 오류 메시지 초기화: 입력 필드 아래의 div 내용을 비워줍니다.
    document.getElementById("nameDiv").innerHTML = ""; 
    document.getElementById("idDiv").innerHTML = ""; 
    document.getElementById("pwdDiv").innerHTML = ""; 
    document.getElementById("repwdDiv").innerHTML = "";

    // 유효성 검사 실패 여부를 추적할 변수
    let isValid = true;

    // 이름이 비어 있을 경우
    if (document.memberForm.name.value.trim() === "") {
        document.getElementById("nameDiv").innerHTML = "이름을 입력하세요";
        isValid = false;
    }

    // 아이디가 비어 있을 경우
    if (document.getElementById("id").value.trim() === "") {
        document.getElementById("idDiv").innerHTML = "아이디를 입력하세요";
        isValid = false;
    }

    // 비밀번호가 비어 있을 경우
    if (document.getElementById("pwd").value.trim() === "") {
        document.getElementById("pwdDiv").innerHTML = "비밀번호를 입력하세요";
        isValid = false;
    }

    // 비밀번호와 재입력된 비밀번호가 일치하지 않을 경우
    if (document.getElementById("pwd").value !== document.getElementById("repwd").value) {
        document.getElementById("repwdDiv").innerHTML = "비밀번호가 일치하지 않습니다.";
        isValid = false;
    }

    // 아이디 중복 체크가 완료되지 않았을 경우
    if (document.getElementById("id").value !== document.getElementById("check").value) {
        document.getElementById("idDiv").innerHTML = "아이디 중복 체크를 하세요";
        isValid = false;
    }

    // 유효성 검사를 모두 통과했을 때만 폼을 제출
    if (isValid) {
        document.memberForm.submit();
    }
}

// 폼의 onsubmit 이벤트 핸들러에 수정된 memberWrite 함수를 연결합니다.
// event.preventDefault()를 사용하여 폼 제출을 막고 유효성 검사를 먼저 수행
document.memberForm.addEventListener('submit', memberWrite);

// 아이디 변경 시 중복 체크 상태를 초기화하는 코드
document.getElementById('id').addEventListener('input', function () {
    // 아이디가 변경되면 다시 중복 체크를 해야 하므로 'false'로 설정합니다.
    idChecked = false;
});

// 우편번호 검색을 위한 Daum API 함수
function checkPost() {
    new daum.Postcode({
        oncomplete: function (data) {
            var addr = '';

            if (data.userSelectedType === 'R') {
                addr = data.roadAddress;
            } else {
                addr = data.jibunAddress;
            }

            document.getElementById('zipcode').value = data.zonecode;
            document.getElementById("addr1").value = addr;
            document.getElementById("addr2").focus();
        }
    }).open();
}
