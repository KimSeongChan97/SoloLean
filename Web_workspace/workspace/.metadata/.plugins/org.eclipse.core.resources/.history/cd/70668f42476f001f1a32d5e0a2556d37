package board.dao;

import java.io.IOException;
import java.io.Reader;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import board.bean.BoardDTO;

public class BoardDAO {
    // 1. 싱글톤 인스턴스 생성 (MyBatis와 연동된 인스턴스를 사용)
    private static BoardDAO boardDAO = new BoardDAO();

    // MyBatis에서 SQL 세션을 생성하고 관리하는 SqlSessionFactory 객체
    private SqlSessionFactory sqlSessionFactory;

    // 2. 생성자
    public BoardDAO() {
        try {
            Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // 3. 싱글톤 인스턴스를 반환하는 메소드
    public static BoardDAO getInstance() {
        return boardDAO;
    }

    // 4. 전체 게시글 수 가져오기
    public int getTotalPosts() {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        int totalPosts = 0;
        try {
            totalPosts = sqlSession.selectOne("boardSQL.getTotalPosts");
        } finally {
            sqlSession.close();
        }
        return totalPosts;
    }

    // 5. 게시글 리스트 가져오기
    public List<BoardDTO> getBoardList(Map<String, Integer> map) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        List<BoardDTO> list = null;
        try {
            list = sqlSession.selectList("boardSQL.getBoardList", map);
        } finally {
            sqlSession.close();
        }
        return list;
    }

    // 6. 특정 게시글 가져오기
    public BoardDTO getBoard(int seq) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        BoardDTO boardDTO = null;
        try {
            boardDTO = sqlSession.selectOne("boardSQL.getBoard", seq);
        } finally {
            sqlSession.close();
        }
        return boardDTO;
    }

    // 7. 게시글 작성
    public void writeBoard(BoardDTO boardDTO) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            sqlSession.insert("boardSQL.writeBoard", boardDTO);
            sqlSession.commit();
        } finally {
            sqlSession.close();
        }
    }

    // 8. 게시글 수정
    public void updateBoard(BoardDTO boardDTO) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            sqlSession.update("boardSQL.updateBoard", boardDTO);
            sqlSession.commit();
        } finally {
            sqlSession.close();
        }
    }

    // 9. 게시글 삭제
    public void deleteBoard(int seq) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            sqlSession.delete("boardSQL.deleteBoard", seq);
            sqlSession.commit();
        } finally {
            sqlSession.close();
        }
    }
}
