<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- MyBatis 설정 파일의 최상위 요소입니다. 이 파일은 MyBatis가 사용하는 환경설정과 매핑 파일을 정의합니다. -->

    <properties resource="db.properties"></properties>
    <!-- properties: MyBatis에서 외부 속성 파일을 로드하는 태그입니다.
         resource="db.properties": 데이터베이스 연결에 필요한 설정 정보들을 외부 파일에서 불러옵니다.
         'db.properties' 파일에는 DB 연결 정보(드라이버, URL, 사용자 이름, 비밀번호 등)가 저장되어 있습니다.
         이 설정을 사용하면 코드를 수정하지 않고도 DB 연결 정보를 쉽게 변경할 수 있어 유지보수가 용이해집니다.
         예: ${jdbc.driver}, ${jdbc.url}, ${jdbc.username}, ${jdbc.password} 등이 db.properties 파일의 값을 참조함. -->

    <typeAliases>
        <!-- typeAliases 태그는 MyBatis에서 사용되는 Java 클래스의 별칭을 정의하는 부분입니다.
             별칭(alias)을 사용하면 XML 매퍼 파일에서 전체 패키지명을 생략하고 짧은 이름으로 클래스 타입을 지정할 수 있습니다.
             이렇게 하면 XML 파일이 더 간결해지고, 가독성이 향상됩니다. -->

        <typeAlias type="user.bean.UserDTO" alias="user"/>
        <!-- typeAlias 태그는 특정 Java 클래스를 MyBatis 매퍼 파일에서 사용할 별칭(alias)으로 등록합니다.
             type="user.bean.UserDTO": 해당 클래스의 전체 패키지 경로입니다. 'user.bean.UserDTO'는 사용자 정보를 저장하는 DTO 클래스입니다.
             alias="user": 이 클래스에 대한 별칭입니다. 이후 매퍼 파일에서 'user'라는 별칭을 사용하여 'user.bean.UserDTO'를 참조할 수 있습니다.
             예를 들어, 매퍼 파일에서 'parameterType="user"'라고 작성하면 MyBatis는 'user.bean.UserDTO' 클래스를 자동으로 참조하게 됩니다.
             이를 통해 XML 파일에서 클래스 이름을 짧게 사용할 수 있어 코드가 간결해집니다. -->
    </typeAliases>

    <environments default="development">
        <!-- environments: MyBatis에서 사용할 데이터베이스 환경을 정의하는 부분입니다.
             default="development": 기본으로 사용할 환경을 'development'로 지정합니다. 'development'는 개발용 환경을 의미합니다.
             이 태그는 여러 환경을 정의할 수 있으며, production, test 등 다른 환경도 추가로 정의할 수 있습니다. -->

        <environment id="development">
            <!-- environment: 실제 사용할 특정 환경을 정의합니다. id="development"로 개발 환경을 지정합니다. -->

            <transactionManager type="JDBC" />
            <!-- transactionManager: 트랜잭션 관리를 설정하는 부분입니다.
                 type="JDBC": JDBC 트랜잭션을 사용합니다. JDBC는 데이터베이스 연결 시 기본적으로 제공하는 트랜잭션 관리 방법으로, 수동으로 트랜잭션을 처리할 수 있습니다.
                 트랜잭션이란 여러 SQL 작업을 하나의 작업 단위로 묶어 처리하는 것을 의미하며, 이때 중간에 에러가 발생하면 트랜잭션을 롤백하여 데이터의 일관성을 보장합니다. -->

            <dataSource type="POOLED">
                <!-- dataSource: 데이터베이스 연결을 정의하는 부분입니다.
                     type="POOLED": 커넥션 풀링을 사용하는 데이터 소스입니다. 
                     커넥션 풀링은 DB와의 연결을 효율적으로 관리하기 위해 일정 수의 연결을 미리 만들어 두고 필요할 때 재사용하는 방식입니다. 
                     이를 통해 성능이 향상되고, 새로운 연결을 매번 생성하는 것보다 더 효율적으로 DB 연결을 처리할 수 있습니다. -->

                <property name="driver" value="${jdbc.driver}" />
                <!-- property: 데이터베이스 연결에 필요한 각종 설정 정보를 정의합니다.
                     name="driver": 사용할 JDBC 드라이버를 지정합니다.
                     value="${jdbc.driver}": 외부 'db.properties' 파일에서 불러온 드라이버 설정값을 참조합니다.
                     이 설정 값은 'db.properties' 파일에 정의된 'jdbc.driver=oracle.jdbc.driver.OracleDriver'와 같이 외부에서 관리됩니다. -->

                <property name="url" value="${jdbc.url}" />
                <!-- name="url": 데이터베이스에 연결할 때 사용할 URL을 지정합니다.
                     value="${jdbc.url}": 외부 'db.properties' 파일에서 DB URL을 불러옵니다.
                     예: 'jdbc:oracle:thin:@localhost:1521:xe'는 Oracle DB에 접속할 수 있는 URL입니다. -->

                <property name="username" value="${jdbc.username}" />
                <!-- name="username": 데이터베이스에 접속할 때 사용할 사용자 이름을 지정합니다.
                     value="${jdbc.username}": 외부 'db.properties' 파일에서 불러온 사용자 이름을 사용합니다.
                     예: 'c##java'는 DB에 접속할 때 사용하는 사용자 이름입니다. -->

                <property name="password" value="${jdbc.password}" />
                <!-- name="password": 데이터베이스 접속 시 필요한 비밀번호를 지정합니다.
                     value="${jdbc.password}": 외부 'db.properties' 파일에서 불러온 비밀번호를 사용합니다.
                     보안상의 이유로 비밀번호는 코드에 직접 입력하지 않고, 별도의 환경 설정 파일에서 관리하는 것이 좋습니다. -->
            </dataSource>
        </environment>
    </environments>

    <mappers>
        <!-- mappers: SQL 쿼리와 Java 객체 간의 매핑을 설정하는 부분입니다.
             mapper: 각 매퍼 파일을 지정합니다. 매퍼는 SQL을 정의하고 이를 Java 메소드와 연결하여 데이터베이스 작업을 처리하는 XML 파일입니다. -->

        <mapper resource="mapper/userMapper.xml" />
        <!-- resource="mapper/userMapper.xml": MyBatis에서 SQL 쿼리를 담고 있는 매퍼 XML 파일의 경로를 지정합니다.
             이 경로는 클래스패스를 기준으로 하며, 'mapper/userMapper.xml' 파일이 위치하는 곳에서 쿼리들이 정의되어 있습니다. 
             이 매퍼 파일에는 'user' 테이블과 관련된 SQL 쿼리들이 정의되어 있을 것입니다. -->
    </mappers>
</configuration>

 