<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<style type="text/css">
* {
	padding: 0;
	margin: 0;
	color: #333;
}
/* 
   모든 HTML 요소의 기본 패딩과 마진을 제거하고,
   텍스트 색상을 회색(#333)으로 설정합니다.
   이렇게 하면 모든 요소가 브라우저의 기본 스타일에 의존하지 않고
   일관된 스타일을 가집니다.
*/

ul {
	list-style: none;
}
/* 
   ul 태그의 기본 리스트 스타일(번호나 점)을 제거합니다.
   기본적인 리스트 표시(불릿 포인트 등)를 제거하여, 커스터마이징된 스타일을 적용할 수 있습니다.
*/

#container {
	padding: 30px 20px;
}
/* 
   페이지의 기본 레이아웃을 담당하는 container에 
   30px의 위아래 패딩과 20px의 좌우 패딩을 설정합니다.
   이 패딩은 콘텐츠가 페이지 가장자리에 너무 붙지 않도록 공간을 확보해 주어
   레이아웃을 깔끔하게 만듭니다.
*/

h1 {
	font-size: large;
	border-left: 10px solid #7BAEB5;
	border-bottom: 1px solid #7BAEB5;
	padding: 10px;
	width: auto;
}
/* 
   페이지의 제목을 설정하는 h1 요소에 대한 스타일입니다.
   왼쪽에는 파란색(#7BAEB5) 테두리를, 아래에는 동일한 색상의 선을 추가합니다.
   이 테두리는 제목을 시각적으로 강조해 주며, 페이지의 전체적인 디자인 테마에 맞춥니다.
   또한, 패딩과 폰트 크기를 조정하여 제목이 돋보이도록 합니다.
*/

#comment_write {
	padding: 20px 15px;
	border-bottom: 1px solid #7BAEB5;
}
/* 
   덧글 작성 폼(comment_write)에 20px의 위아래 패딩과 
   15px의 좌우 패딩을 설정하며, 아래쪽에 파란색(#7BAEB5) 선을 추가합니다.
   이 스타일링은 폼을 분리하여 사용자가 시각적으로 쉽게 구분할 수 있도록 합니다.
*/

#comment_write label {
	display: inline-block;
	width: 80px;
	font-size: 14px;
	font-weight: bold;
	margin-bottom: 10px;
}
/* 
   덧글 작성 폼에서 label 요소에 대한 스타일입니다.
   label을 inline-block으로 설정해 다른 요소와 함께 사용할 수 있게 하며,
   너비, 글자 크기, 글자 두께, 그리고 하단 마진을 설정하여
   폼이 깔끔하게 정렬되도록 합니다.
   특히, inline-block을 사용하면 label과 input 요소가 같은 줄에 표시되도록 하여
   사용자 입력 폼이 정돈된 형태를 유지할 수 있습니다.
*/

#comment_write input[type='text'], #comment_write textarea {
	border: 1px solid #ccc;
	vertical-align: middle;
	padding: 3px 10px;
	font-size: 12px;
	line-height: 150%;
}
/* 
   텍스트 입력 필드와 텍스트 영역에 대한 스타일입니다.
   테두리를 회색(#ccc)으로 설정하고, 가운데 정렬되도록 수직 정렬을 설정합니다.
   또한, 내부 패딩, 글자 크기 및 줄 간격을 설정하여 사용자 입력이 잘 보이도록 합니다.
   이 스타일링은 사용자의 입력 경험을 향상시키고, 시각적으로 입력 필드의 경계를 명확히 합니다.
*/

#comment_write textarea {
	width: 380px;
	height: 90px
}
/* 
   덧글 내용을 입력하는 textarea의 크기를 설정합니다.
   너비는 380px, 높이는 90px로 지정하여 충분한 입력 공간을 제공합니다.
   이 크기는 사용자가 긴 텍스트를 작성할 수 있도록 적절하게 설정된 크기입니다.
*/

.comment_item {
	font-size: 13px;
	color: #333;
	padding: 15px;
	border-bottom: 1px dotted #ccc;
	line-height: 150%;
}
/* 
   각각의 덧글 항목에 대한 스타일입니다.
   텍스트 크기와 색상, 패딩, 줄 간격을 설정하고, 
   항목 간의 구분을 위해 아래에 점선 테두리(1px, 회색)를 추가합니다.
   점선은 덧글 간의 시각적인 구분을 제공하면서도 너무 강하지 않도록 하여,
   디자인이 깔끔하게 유지됩니다.
*/

.comment_item .writer {
	color: #555;
	line-height: 200%;
}
/* 
   덧글 작성자 정보에 대한 스타일입니다.
   텍스트 색상을 회색(#555)으로 설정하고, 
   줄 간격을 넉넉하게(200%) 설정하여 가독성을 높입니다.
   더 넓은 줄 간격은 정보를 분리해 주어 텍스트를 읽기 쉽게 만들어 줍니다.
*/

.comment_item .writer input {
	vertical-align: middle;
}
/* 
   덧글 작성자 정보와 관련된 input 요소의 수직 정렬을 설정합니다.
   이로 인해 입력 필드가 텍스트와 수평으로 정렬됩니다.
   입력 필드와 주변 텍스트가 동일한 라인에 위치하게 되어 폼의 레이아웃이 깔끔하게 유지됩니다.
*/

.comment_item .writer .name {
	color: #222;
	font-weight: bold;
	font-size: 14px;
}
/* 
   덧글 작성자의 이름에 대한 스타일입니다.
   텍스트 색상을 진한 회색(#222)으로 설정하고,
   글자 두께를 두껍게, 글자 크기를 14px로 설정하여 이름을 돋보이게 만듭니다.
   이는 덧글 작성자의 이름을 강조하여, 다른 텍스트보다 눈에 더 잘 띄도록 합니다.
*/

#writerDiv, #contentDiv {
	color: red;
	font-size: 9pt;
	font-weight: bold;
}
/* 
   작성자와 덧글 내용의 유효성 검사를 위한 오류 메시지 영역에 대한 스타일입니다.
   오류 메시지는 빨간색 글씨로 표시되며, 크기와 두께를 설정하여 눈에 띄도록 합니다.
   이는 사용자가 입력한 데이터가 잘못되었을 때 시각적인 피드백을 명확하게 제공해 줍니다.
*/

</style>
</head>
<body>

	<div id="container">
		<h1>jQuery Comment</h1>
		<!-- 
			페이지의 제목을 표시합니다. jQuery를 이용한 댓글 기능을 구현하고 있음을 나타냅니다.
			이 제목은 사용자가 페이지의 주요 기능을 한눈에 이해할 수 있도록 돕습니다.
		-->
		<div id="comment_write">
			<form id="comment_form">
				<!-- 
					덧글 작성 폼입니다. 사용자가 덧글을 입력할 수 있도록 구성되어 있습니다.
					num과 datetime은 숨겨진(hidden) 필드로, 덧글의 고유 번호와 작성 시간을 저장합니다.
					숨겨진 필드는 화면에 보이지 않지만, 폼 데이터로서 서버로 전송됩니다.
				-->
				<input type="hidden" name="num" id="num" value="" readonly/> 
				<input type="hidden" name="datetime" id="datetime" value="" readonly/>
				<div>
					<label for="writer">작성자</label> 
					<!-- 
						작성자 이름을 입력하는 필드의 라벨입니다.
						이 라벨은 input 필드와 연관되어 있으며, 사용자가 입력할 정보를 명확히 알려줍니다.
					-->
					<input type="text" name="writer" id="writer" /> 
					<!-- 
						작성자의 이름을 입력받는 텍스트 필드입니다.
						여기에 사용자가 자신의 이름을 입력하게 됩니다.
					-->
					<input type="submit" value="저장하기" />
					<!-- 
						덧글을 저장하는 버튼입니다. 클릭 시 덧글이 저장됩니다.
						이 버튼을 누르면 폼이 제출되고, 덧글이 서버에 저장된 후, 화면에 추가됩니다.
					-->
					<div id="writerDiv"></div>
					<!-- 
						작성자 이름의 유효성 검사 결과를 표시할 영역입니다.
						사용자가 이름을 입력하지 않았을 때, 오류 메시지가 여기에 나타납니다.
					-->
				</div>
				<div>
					<label for="content">덧글 내용</label>
					<!-- 
						덧글 내용을 입력하는 필드의 라벨입니다.
						라벨은 사용자가 어떤 내용을 입력해야 하는지 명확하게 알려줍니다.
					-->
					<textarea name="content" id="content"></textarea>
					<!-- 
						덧글 내용을 입력받는 텍스트 영역입니다.
						여기에 사용자가 덧글 내용을 입력하게 됩니다.
					-->
					<div id="contentDiv"></div>
					<!-- 
						덧글 내용의 유효성 검사 결과를 표시할 영역입니다.
						 사용자가 내용을 입력하지 않았을 때, 오류 메시지가 여기에 나타납니다.
					-->
				</div>
			</form>
		</div>

		<ul id="comment_list"></ul>
		<!-- 
			작성된 덧글 목록을 표시하는 영역입니다.
			JavaScript를 통해 덧글이 동적으로 추가됩니다.
			사용자가 덧글을 입력하고 저장할 때마다 새로운 덧글 항목이 이 리스트에 추가됩니다.
		-->
	</div>

	<script type="text/javascript"
		src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
	<!-- 
		jQuery 라이브러리를 포함하여, DOM 조작, 이벤트 처리 및 AJAX 통신을 간편하게 합니다.
		외부 URL을 통해 jQuery 라이브러리를 불러오며, 이는 스크립트 내에서 jQuery 함수를 사용 가능하게 만듭니다.
	-->

	<script type="text/javascript">
function addItem(num, writer, content, datetime) {
	// 덧글 항목을 추가하는 함수입니다.
	// 사용자가 작성한 덧글을 화면에 표시하기 위해 동적으로 HTML 요소를 생성하고 추가합니다.
	
	// 새로운 li 요소를 생성하고, 클래스와 data-num 속성을 설정합니다.
	let new_li = $('<li/>');
	// $('<li/>')는 jQuery를 사용하여 li 요소를 생성합니다.
	new_li.attr('data-num', num); 
	// .attr() 메서드를 사용해 생성된 li 요소에 data-num 속성을 추가합니다.
	// 이 속성은 해당 덧글의 고유 번호를 나타내며, 나중에 특정 덧글을 식별하는 데 사용됩니다.
	new_li.addClass('comment_item');
	// .addClass() 메서드를 사용해 이 li 요소에 'comment_item' 클래스를 추가합니다.
	// 이 클래스는 CSS에서 스타일을 적용할 때 사용됩니다.
	
	// 작성자 정보를 담을 p 요소를 생성하고, 클래스와 내용을 설정합니다.
	let writer_p = $('<p/>');
	// 작성자 정보를 담는 p 요소를 생성합니다. 
	writer_p.addClass('writer');
	// 생성된 p 요소에 'writer' 클래스를 추가하여, CSS 스타일이 적용되도록 합니다.
	
	// 작성자의 이름을 나타내는 span 요소를 생성하고, 내용과 클래스를 설정합니다.
	let name_span = $('<span/>');
	// 작성자의 이름을 표시할 span 요소를 생성합니다.
	name_span.addClass('name');
	// span 요소에 'name' 클래스를 추가하여, CSS로 스타일링합니다.
	name_span.html(writer + '님');
	// .html() 메서드를 사용해 span 요소의 내용을 작성자의 이름과 '님'을 결합한 문자열로 설정합니다.
	
	// 작성 시간 정보를 담을 span 요소를 생성합니다.
	let date_span = $('<span/>');
	// 덧글 작성 시간을 표시할 span 요소를 생성합니다.
	date_span.html(' / ' + datetime + ' ');
	// .html() 메서드를 사용해 span 요소에 작성 시간을 설정합니다. 작성자의 이름 옆에 표시됩니다.
	
	// 삭제 버튼을 생성하고, 속성과 클래스를 설정합니다.
	let del_input = $('<input/>');
	// 덧글을 삭제할 수 있는 버튼(input 요소)을 생성합니다.
	del_input.attr({
		'type': 'button',
		'value': '삭제하기'
	});
	// 생성된 input 요소의 타입을 'button'으로, 표시되는 텍스트를 '삭제하기'로 설정합니다.
	del_input.addClass('delete_btn');
	// 'delete_btn' 클래스를 추가하여, CSS로 스타일을 지정하고, 삭제 버튼을 식별할 수 있게 합니다.
	
	// 덧글 내용을 담을 p 요소를 생성하고, 내용을 설정합니다.
	let content_p = $('<p/>');  
	// 덧글 내용을 표시할 p 요소를 생성합니다.
	content_p.html(content);
	// .html() 메서드를 사용해 p 요소의 내용을 사용자가 작성한 덧글 내용으로 설정합니다.
	
	// 작성자 정보와 덧글 내용을 li 요소에 추가합니다.
	writer_p.append(name_span).append(date_span).append(del_input); 
	// append() 메서드를 사용해 span과 버튼 요소를 p 요소에 순서대로 추가합니다.
	new_li.append(writer_p).append(content_p);  
	// 위에서 생성된 작성자 정보와 덧글 내용을 li 요소에 추가합니다.
	$('#comment_list').append(new_li); 
	// 최종적으로 완성된 li 요소를 덧글 리스트 ul 요소에 추가하여 화면에 표시되도록 합니다.
}

function getToday() {
	// 현재 날짜와 시간을 가져와 특정 형식으로 포맷팅하는 함수입니다.
	// 서버로부터 시간을 받아올 필요 없이 클라이언트 측에서 현재 시간을 얻기 위해 사용됩니다.
	let date = new Date();  // 현재 날짜와 시간 정보를 저장하는 Date 객체를 생성합니다.
	let yy = date.getFullYear();   // 현재 연도(yyyy)를 가져옵니다.
	let mm = date.getMonth()+1;    // 월을 가져오고, 0부터 시작하므로 +1을 더해 실제 월을 계산합니다.
	let dd = date.getDate();       // 현재 날짜(dd)를 가져옵니다.
	let hh = date.getHours();      // 현재 시각(24시간제)을 가져옵니다.
	let mi = date.getMinutes();    // 현재 분(minute)을 가져옵니다.
	let ss = date.getSeconds();    // 현재 초(second)를 가져옵니다.
	
	// 숫자가 10보다 작으면 앞에 0을 붙여 두 자리로 맞춥니다.
	if(mm < 10) mm = '0' + mm;
	if(dd < 10) dd = '0' + dd;
	if(hh < 10) hh = '0' + hh;
	if(mi < 10) mi = '0' + mi;
	if(ss < 10) ss = '0' + ss;
	
	// '2024 - 04 - 23 _ 13 : 45 : 30' 형식으로 오늘 날짜와 시간을 문자열로 저장
	let today = yy + ' - ' + mm + ' - ' + dd + ' _ ' + hh + ' : ' + mi + ' : ' + ss;  
	// 날짜와 시간을 적절한 포맷으로 저장
	// 이 형식은 '연도 - 월 - 일 _ 시 : 분 : 초' 형태로 구성되어 있으며, 
	// 덧글이 작성된 시점을 명확하게 나타내 줍니다.
	
	return today;
}

</script>
	<script type="text/javascript">
	
let num = 3; // 전역변수, 덧글의 고유 번호를 관리합니다.
// 초기 값이 3으로 설정되어 있으며, 새로운 덧글이 추가될 때마다 증가합니다.

$(function(){
	// 문서가 준비되었을 때 실행되는 함수입니다.
	// jQuery의 $(document).ready()와 동일하게 사용되며, 
	// 페이지가 완전히 로드된 후에 내부 코드를 실행합니다.
	
	// 덧글 목록을 불러오고 화면에 출력합니다.
	$.get('../comment/comment_list.xml', {}, function(data){
				// 서버에서 덧글 목록을 가져오는 Ajax GET 요청을 수행합니다.
				// 요청이 성공적으로 완료되면, 가져온 데이터를 콜백 함수로 처리합니다.
				$(data).find('item').each(function(){
					// 가져온 XML 데이터에서 각 'item' 요소를 반복하여 처리합니다.
					let num = $(this).find('num').text();
					// 현재 덧글의 고유 번호를 가져옵니다.
					let writer = $(this).find('writer').text();
					// 작성자 이름을 가져옵니다.
					let content = $(this).find('content').text();
					// 덧글 내용을 가져옵니다.
					let datetime = $(this).find('datetime').text();
					// 덧글 작성 시간을 가져옵니다.
					
					addItem(num, writer, content, datetime); 
					// 각 덧글 항목을 화면에 추가합니다.
				}); 
				// each, 배열 처리를 위한 반복문
				// XML에서 모든 덧글 데이터를 반복하며 처리합니다.
			}).fail(function(){
				alert('덧글 목록을 불러오는데 실패하였습니다.');
				// 덧글 목록을 불러오는 데 실패했을 때 경고 메시지를 표시합니다.
				// 서버 통신에 문제가 발생했을 경우 사용자에게 오류를 알립니다.
			});
		
	// 덧글 저장 이벤트 처리
	$('#comment_form').submit(function(){
		// 덧글 폼이 제출되었을 때 실행되는 함수입니다.
		// submit 이벤트는 폼이 제출되기 직전에 발생합니다.
		
		// 기존의 오류 메시지를 초기화합니다.
		$('#writerDiv').empty();
		$('#contentDiv').empty();
		// .empty() 메서드는 선택된 요소 내부의 모든 내용을 제거합니다.
		// 이를 통해 이전에 표시된 오류 메시지를 삭제하고 새로운 검사를 시작할 준비를 합니다.
		
		// 작성자 입력 필드가 비어 있을 경우 경고 메시지를 출력하고 폼 제출을 중단합니다.
		if(!$('#writer').val()) {
			$('#writerDiv').text('작성자 입력하세요');
			// 입력 필드가 비어 있으면 경고 메시지를 표시합니다.
			$('#writer').focus();
			// 작성자 필드에 포커스를 맞춰 사용자가 바로 입력할 수 있도록 합니다.
			return false;
			// false를 반환하여 폼의 기본 제출 동작을 막습니다.
		}
		
		// 덧글 내용 입력 필드가 비어 있을 경우 경고 메시지를 출력하고 폼 제출을 중단합니다.
		if(!$('#content').val()) {
			$('#contentDiv').text('덧글 내용 입력하세요');
			// 입력 필드가 비어 있으면 경고 메시지를 표시합니다.
			$('#content').focus();
			// 덧글 내용 필드에 포커스를 맞춰 사용자가 바로 입력할 수 있도록 합니다.
			return false;
			// false를 반환하여 폼의 기본 제출 동작을 막습니다.
		}
		
		// 덧글 고유 번호와 작성 시간을 설정합니다.
		$('#num').val(++num);
		// 전역 변수 num을 1 증가시키고, 증가된 값을 hidden 필드인 #num에 설정합니다.
		$('#datetime').val(getToday());
		// 현재 시간을 가져와 hidden 필드인 #datetime에 설정합니다.
		
		// 덧글 데이터를 서버에 전송하고, 성공 시 화면에 추가합니다.
		$.post('../comment/comment_write_JSTL.jsp',
				// 서버의 JSP 파일로 폼 데이터를 전송합니다.
				$('#comment_form').serialize(),
				// .serialize() 메서드를 사용해 폼 데이터를 URL 인코딩된 문자열로 변환합니다.
				function(data){
					// 서버로부터 받은 응답 데이터를 처리하는 콜백 함수입니다.
					let result = eval($(data).find('result').text());
					// 응답 데이터에서 result 값을 가져와 JavaScript 코드로 평가합니다.
					// 이 값은 덧글 저장의 성공 여부를 나타냅니다.
					
					if(result){
						// result가 true일 경우, 덧글 저장이 성공했음을 의미합니다.
						alert($(data).find('message').text());
						// 성공 메시지를 사용자에게 알립니다.
						
						let num = $(data).find('num').text();
						// 서버에서 반환된 덧글의 고유 번호를 가져옵니다.
						let writer = $(data).find('writer').text();
						// 서버에서 반환된 작성자 이름을 가져옵니다.
						let content = $(data).find('content').text();
						// 서버에서 반환된 덧글 내용을 가져옵니다.
						let datetime = $(data).find('datetime').text();
						// 서버에서 반환된 덧글 작성 시간을 가져옵니다.
						
						addItem(num, writer, content, datetime);
						// 새로운 덧글을 화면에 추가합니다.
						
						// 폼을 초기화합니다.
						$('#writer').val('');
						// 작성자 필드를 비웁니다.
						$('#content').val('');
						// 덧글 내용 필드를 비웁니다.
					}
									
				}).fail(function(){
					alert('덧글 저장하는데 실패하였습니다.');
					// 덧글 저장에 실패했을 때 경고 메시지를 표시합니다.
					// 서버 통신 중 오류가 발생했을 경우 사용자에게 이를 알립니다.
				});
		
		return false; 
		// 폼이 실제로 제출되는 것을 막고, Ajax로 처리되도록 합니다.
		// 이를 통해 페이지가 새로고침되지 않고도 덧글이 추가될 수 있습니다.
	});
	
	// 삭제 이벤트 처리 - 동적으로 생성된 삭제 버튼에 대한 처리
	$(document).on('click', '.delete_btn', function(){
		// 삭제 버튼이 클릭되었을 때 실행되는 함수입니다.
		// .on() 메서드를 사용하여 동적으로 생성된 요소에도 이벤트 핸들러를 등록할 수 있습니다.
	
		if(confirm('정말로 삭제하시겠습니까?')){
			// 삭제 확인 대화 상자를 표시하고, 확인할 경우 아래 코드가 실행됩니다.
			
			// let num = $(this).parents('li').data('data-num');
			let num = $(this).parents('li').attr('data-num');	
			// 삭제하려는 덧글의 고유 번호를 가져옵니다.
			// .parents('li') 메서드는 현재 클릭된 요소의 상위 li 요소를 선택합니다.
			let target = $(this).parents('.comment_item');
			// 삭제하려는 덧글 항목을 선택합니다.
			// .parents('.comment_item')는 현재 클릭된 요소의 상위 .comment_item 요소를 선택합니다.
			
			$.post('../comment/comment_delete.jsp', { 'num': num }, function(data){
				// 서버에 삭제 요청을 보냅니다.
				// num 값은 삭제할 덧글의 고유 번호를 서버에 전달하기 위한 데이터입니다.
				let result = eval($(data).find('result').text());
				// 서버에서 받은 결과 값을 평가하여 성공 여부를 판단합니다.
					
					if(result){
						alert($(data).find('message').text());
						// 삭제 성공 메시지를 사용자에게 표시합니다.
						target.remove(); 
						// 덧글 항목을 화면에서 제거합니다.
						// .remove() 메서드를 사용하여 선택된 요소를 DOM에서 완전히 삭제합니다.
					}
				
			}).fail(function(){
				alert('덧글 삭제하는데 실패하였습니다.');
				// 덧글 삭제에 실패했을 때 경고 메시지를 표시합니다.
				// 서버 통신 중 오류가 발생했을 경우 사용자에게 이를 알립니다.
			}); 
			
		}
		
	});	
	
});
</script>
</body>
</html>

<!-- 
data-*
data-로 시작하는 속성은 Custom Data Attributes라고 하며, HTML5에서 새롭게 추가된 속성입니다.
말 그대로 사용자 정의 데이터 속성으로, HTML 요소에 추가적인 정보를 제공하기 위해 사용됩니다.
특별한 기능보다는 HTML5 요소의 데이터를 의미 있게 표현할 수 있는 속성입니다.
이 속성을 사용하여 JavaScript에서 특정 데이터를 쉽게 접근하고 조작할 수 있습니다.

CSS에서도 이 속성을 통해 스타일을 지정할 수 있습니다.
예를 들어, 아래와 같은 형태로 CSS에서 data-* 속성을 사용하여 스타일을 적용할 수 있습니다:
<style type="text/css">
    [data-name] { color: red; }
</style>

또한, jQuery에서는 .data() 메서드를 이용해 data-* 속성에 접근하고, 값을 가져오거나 설정할 수 있습니다.
예를 들어:
- 데이터를 가져올 때: $(".user").data("name") -- 홍길동
- 데이터를 설정할 때: $(".user").data("name", "고길동");
-->
