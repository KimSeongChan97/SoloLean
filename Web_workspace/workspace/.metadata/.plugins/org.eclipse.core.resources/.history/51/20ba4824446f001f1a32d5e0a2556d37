package board.dao;

import java.io.IOException;
import java.io.Reader;
import java.util.List;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

import board.bean.CommentDTO;

public class CommentDAO {
    // 1. 싱글톤 인스턴스 생성 (MyBatis와 연동된 인스턴스를 사용)
    // CommentDAO 인스턴스는 애플리케이션 내에서 하나만 생성되어 사용됩니다. 이를 통해 자원을 효율적으로 관리할 수 있습니다.
    private static CommentDAO commentDAO = new CommentDAO();

    // MyBatis에서 SQL 세션을 생성하고 관리하는 SqlSessionFactory 객체
    // SqlSessionFactory는 SqlSession 객체를 생성해 SQL을 실행할 수 있게 해줍니다.
    private SqlSessionFactory sqlSessionFactory;

    // 2. 생성자
    // MyBatis 설정 파일인 'mybatis-config.xml'을 읽어 SqlSessionFactory를 초기화합니다.
    // 'mybatis-config.xml'에는 DB 연결 설정, 매퍼 파일 경로 등이 정의되어 있습니다.
    public CommentDAO() {
        try {
            // Resources.getResourceAsReader를 사용하여 설정 파일을 읽습니다.
            Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader); 
        } catch (IOException e) {
            e.printStackTrace(); // 예외가 발생하면 이를 콘솔에 출력합니다.
        }
    }

    // 3. 싱글톤 인스턴스를 반환하는 메소드
    // 이 메소드를 통해 애플리케이션 내에서 동일한 CommentDAO 인스턴스를 사용하게 됩니다.
    public static CommentDAO getInstance() {
        return commentDAO;
    }

    // 4. 댓글 작성 메소드
    // 게시물에 댓글을 추가하는 기능입니다. 사용자가 작성한 댓글 정보를 DB에 저장합니다.
    public void addComment(CommentDTO commentDTO) {
        SqlSession sqlSession = sqlSessionFactory.openSession(); // SqlSession 객체를 생성하여 DB 연결을 엽니다.
        try {
            // MyBatis의 insert 메서드를 사용하여 댓글 정보를 DB에 삽입합니다.
            sqlSession.insert("commentSQL.addComment", commentDTO);
            sqlSession.commit(); // 트랜잭션을 커밋하여 DB에 반영합니다.
        } finally {
            sqlSession.close(); // 사용한 세션을 닫아 자원을 해제합니다.
        }
    }

    // 5. 특정 게시물에 달린 댓글 조회 메소드
    // 특정 게시물에 달린 모든 댓글을 조회하여 리스트로 반환하는 기능입니다.
    public List<CommentDTO> getComments(int boardSeq) {
        SqlSession sqlSession = sqlSessionFactory.openSession(); // SqlSession 객체를 생성하여 DB 연결을 엽니다.
        List<CommentDTO> list;
        try {
            // MyBatis의 selectList 메서드를 사용하여 특정 게시물에 대한 모든 댓글을 조회합니다.
            list = sqlSession.selectList("commentSQL.getComments", boardSeq);
        } finally {
            sqlSession.close(); // 사용한 세션을 닫아 자원을 해제합니다.
        }
        return list; // 댓글 리스트를 반환합니다.
    }

    // 6. 댓글 수정 메소드
    // 사용자가 작성한 댓글을 수정하는 메소드입니다.
    public void updateComment(CommentDTO commentDTO) {
        SqlSession sqlSession = sqlSessionFactory.openSession(); // SqlSession 객체를 생성하여 DB 연결을 엽니다.
        try {
            // MyBatis의 update 메서드를 사용하여 댓글을 수정합니다.
            sqlSession.update("commentSQL.updateComment", commentDTO);
            sqlSession.commit(); // 트랜잭션을 커밋하여 DB에 반영합니다.
        } finally {
            sqlSession.close(); // 사용한 세션을 닫아 자원을 해제합니다.
        }
    }

    // 7. 댓글 삭제 메소드
    // 댓글을 삭제하는 메소드입니다.
    public void deleteComment(int commentSeq) {
        SqlSession sqlSession = sqlSessionFactory.openSession(); // SqlSession 객체를 생성하여 DB 연결을 엽니다.
        try {
            // MyBatis의 delete 메서드를 사용하여 댓글을 삭제합니다.
            sqlSession.delete("commentSQL.deleteComment", commentSeq);
            sqlSession.commit(); // 트랜잭션을 커밋하여 DB에 반영합니다.
        } finally {
            sqlSession.close(); // 사용한 세션을 닫아 자원을 해제합니다.
        }
    }
}
