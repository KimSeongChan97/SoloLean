<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>forwardStartEnd</title>
</head>
<body>


    forward로 보내면 데이터는 공유한다. <br>
    주소는 forwardStart.jsp가 보이지만, 화면은 forwardEnd.jsp가 보인다. <br><br>
    <!-- 
        forward는 서버 내부에서 요청을 다른 페이지로 전달하기 때문에 클라이언트는 forwardEnd.jsp로 이동했는지 알지 못합니다.
        따라서 브라우저의 주소창에는 여전히 forwardStart.jsp가 표시되지만, 실제로는 forwardEnd.jsp에서 처리된 결과가 화면에 나타납니다.
        이는 forward 방식의 특징으로, 서버 내부에서 처리되기 때문에 클라이언트가 요청의 흐름을 알 수 없습니다.
    -->

<!-- request 로 정보를 담아오므로 -->
결과는 = ${requestScope.list }
<!-- 
    request scope의 데이터를 EL(Expression Language)를 사용하여 출력합니다.
    forward는 request scope의 데이터를 공유하므로, forwardStart.jsp에서 설정된 'list' 객체가 forwardEnd.jsp에서도 사용될 수 있습니다.
    여기서는 request scope에 저장된 'list' 객체를 출력하여, '호랑이', '사자' 등의 동물 목록을 화면에 출력할 수 있습니다.
 -->
 <%--
	 <%
	    // 자바로 받는다면
	    request.getAttribute("list");
	    // request 객체에서 데이터를 가져오는 자바 코드입니다. 
	    forward 방식은 request 객체를 유지하기 때문에 이 데이터를 정상적으로 가져올 수 있습니다.
	    만약 sendRedirect 방식을 사용했다면 이 데이터는 null이 되었을 것입니다.
	%>
  --%>
<br><br>

3번 째 항목 = ${requestScope.list[2] }
<br><br>

<!-- for 문을 통해 본다면 -->
<%-- 자바로 한다면, for(String data : requestScope.list) --%>
<c:forEach>
	
</c:forEach>

</body>
</html>

<%--

pageScope → requestScope → sessionScope → applicationScope 순으로 호출
 
    JSP에서 데이터를 저장하고 접근할 수 있는 네 가지 범위(scope)가 있습니다:
    1. **pageScope**: 현재 JSP 페이지 내에서만 유효한 범위입니다. 다른 페이지로 이동할 경우 데이터는 사용할 수 없습니다.
    2. **requestScope**: 동일한 요청 내에서 유효한 범위입니다. forward를 사용하면 데이터가 유지되지만, sendRedirect를 사용하면 데이터는 유지되지 않습니다.
    3. **sessionScope**: 특정 사용자의 세션 동안 유효한 범위로, 브라우저가 종료되거나 세션이 만료될 때까지 데이터가 유지됩니다.
    4. **applicationScope**: 애플리케이션 전체에서 유효한 범위로, 모든 사용자와 세션에서 데이터를 공유할 수 있습니다. 애플리케이션이 종료될 때까지 데이터가 유지됩니다.
    이 범위들은 각기 다른 목적으로 사용되며, 데이터를 저장할 범위에 따라 유효 기간이 달라집니다.

 --%>