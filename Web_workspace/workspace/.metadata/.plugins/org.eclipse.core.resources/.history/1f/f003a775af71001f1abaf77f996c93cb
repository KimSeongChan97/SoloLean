<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberSQL">

    <!-- ID 중복 확인 -->
    <!-- 이 select문은 입력된 id 값이 데이터베이스에 이미 존재하는지 확인하는 쿼리입니다.
         COUNT(*)를 사용하여 id가 존재하면 1 이상의 값이 반환되고, 존재하지 않으면 0이 반환됩니다.
         parameterType="string"은 이 쿼리의 입력값이 문자열이라는 의미입니다.
         resultType="int"는 반환되는 결과값이 정수(int)라는 의미입니다. 
         따라서 id 중복 확인을 할 때 사용되는 값의 타입은 string이고, 결과는 정수형으로 반환됩니다. -->
    <select id="idExistId" parameterType="string" resultType="int">
        SELECT COUNT(*) FROM member WHERE id = #{id}
    </select>

    <!-- 회원 정보 삽입 -->
    <!-- 이 insert문은 새로운 회원 정보를 데이터베이스에 추가하는 SQL 쿼리입니다.
         parameterType="member.bean.MemberDTO"는 이 쿼리에 사용되는 입력 데이터가 MemberDTO 객체라는 것을 나타냅니다.
         #{필드명}은 MemberDTO 객체에서 해당 필드의 값을 가져오는 방식입니다.
         이 쿼리에서 id, pwd, name 등의 필드는 MemberDTO 객체의 필드로부터 데이터를 받아와, 'member' 테이블에 삽입됩니다.
         sysdate는 현재 시간을 자동으로 입력해 주는 Oracle 함수로, 회원이 가입한 시각을 기록합니다.
         회원의 모든 정보를 DB 테이블에 삽입하는 역할을 하며, 데이터의 정확한 위치에 맞게 바인딩이 되어야 합니다. -->
    <insert id="insertMember" parameterType="member.bean.MemberDTO">
        INSERT INTO member (ID, PWD, NAME, GENDER, EMAIL1, EMAIL2, TEL1, TEL2, TEL3, ZIPCODE, ADDR1, ADDR2, LOGTIME)
        VALUES (#{id}, #{pwd}, #{name}, #{gender}, #{email1}, #{email2}, #{tel1}, #{tel2}, #{tel3}, #{zipcode}, #{addr1}, #{addr2}, sysdate)
    </insert>

    <!-- 로그인 확인 -->
    <!-- 이 select문은 로그인 시 사용자가 입력한 ID와 비밀번호가 데이터베이스에 있는지 확인하는 쿼리입니다.
         parameterType="member.bean.MemberDTO"는 입력값이 MemberDTO 객체라는 것을 의미하며,
         resultType="member.bean.MemberDTO"는 반환값이 MemberDTO 객체라는 것을 의미합니다.
         SQL 쿼리에서 id와 pwd는 사용자가 입력한 값으로 대체되며, 일치하는 회원의 정보를 조회하여 MemberDTO 객체에 담아 반환합니다.
         로그인 성공 시 해당 회원의 모든 정보를 반환받고, 로그인 실패 시 null을 반환하게 됩니다. -->
    <select id="memberLogin" parameterType="member.bean.MemberDTO" resultType="member.bean.MemberDTO">
        SELECT * FROM member WHERE id = #{id} AND pwd = #{pwd}
    </select>

    <!-- 특정 회원 조회 -->
    <!-- 이 select문은 특정 회원의 id로 회원 정보를 조회하는 SQL 쿼리입니다.
         parameterType="string"은 입력값이 문자열 타입이라는 의미입니다. 
         resultType="member.bean.MemberDTO"는 반환되는 결과가 MemberDTO 객체임을 나타냅니다.
         사용자가 특정 회원을 조회할 때, 해당 id를 이용해 'member' 테이블에서 모든 정보를 가져오게 됩니다. 
         SQL의 #{id}는 입력받은 id 값을 바인딩하여 데이터를 조회합니다. -->
    <select id="getMember" parameterType="string" resultType="member.bean.MemberDTO">
        SELECT * FROM member WHERE id = #{id}
    </select>

    <!-- 회원 정보 수정 -->
    <!-- 이 update문은 회원의 정보를 수정하는 쿼리입니다.
         parameterType="member.bean.MemberDTO"는 입력값이 MemberDTO 객체임을 나타내며, 
         회원의 다양한 정보를 수정하기 위해 여러 필드를 업데이트합니다.
         #{name}, #{pwd}, #{gender} 등은 모두 MemberDTO 객체에서 값을 가져와 바인딩됩니다.
         수정된 회원 정보를 'member' 테이블에 저장하며, 마지막으로 LOGTIME 필드는 자동으로 수정된 시간을 기록합니다.
         WHERE 조건절을 통해, id에 해당하는 특정 회원의 정보만 수정합니다. -->
    <update id="updateMember" parameterType="member.bean.MemberDTO">
        UPDATE member
        SET NAME = #{name}, PWD = #{pwd}, GENDER = #{gender}, EMAIL1 = #{email1}, EMAIL2 = #{email2}, 
            TEL1 = #{tel1}, TEL2 = #{tel2}, TEL3 = #{tel3}, ZIPCODE = #{zipcode}, 
            ADDR1 = #{addr1}, ADDR2 = #{addr2}, LOGTIME = sysdate
        WHERE ID = #{id}
    </update>

</mapper>
