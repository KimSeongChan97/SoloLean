package board.dao;

import java.io.IOException;
import java.io.Reader;
import java.util.List;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import board.bean.BoardDTO;

public class BoardDAO {

    // 1. 싱글톤 인스턴스 생성 (MyBatis와 연동된 인스턴스를 사용)
    // 싱글톤 패턴을 사용하여 BoardDAO 인스턴스를 하나만 유지합니다.
    private static BoardDAO boardDAO = new BoardDAO();

    // MyBatis에서 SQL 세션을 생성하고 관리하는 SqlSessionFactory 객체
    // SqlSessionFactory는 SQL 실행을 위한 SqlSession 객체를 생성하는 역할을 합니다.
    private SqlSessionFactory sqlSessionFactory;

    // 2. 생성자
    // MyBatis 설정 파일인 'mybatis-config.xml'을 읽어 SqlSessionFactory를 초기화합니다.
    public BoardDAO() {
        try {
            // MyBatis 설정 파일을 읽어 SqlSessionFactory를 초기화합니다.
            Reader reader = Resources.getResourceAsReader("mybatis-config.xml");
            sqlSessionFactory = new SqlSessionFactoryBuilder().build(reader);
        } catch (IOException e) {
            e.printStackTrace(); // 파일을 읽는 중 예외가 발생할 경우 예외 처리
        }
    }

    // 3. 싱글톤 인스턴스를 반환하는 메소드
    // 이 메소드를 통해 애플리케이션 전역에서 동일한 BoardDAO 인스턴스를 사용합니다.
    public static BoardDAO getInstance() {
        return boardDAO;
    }

    // 4. 게시물 작성 메소드
    // 게시물 등록을 위한 메소드입니다.
    // MyBatis의 insert 메소드를 통해 SQL 실행
    public void writeBoard(BoardDTO boardDTO) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            // MyBatis의 매퍼에 정의된 "boardSQL.insertBoard" SQL 구문을 실행하여 데이터를 삽입
            sqlSession.insert("boardSQL.insertBoard", boardDTO);
            sqlSession.commit(); // 트랜잭션을 커밋하여 데이터베이스에 실제 반영
        } finally {
            sqlSession.close(); // 세션 종료하여 자원 해제
        }
    }

    // 5. 게시물 목록 조회 메소드
    // 게시물 리스트를 반환하는 메소드입니다.
    // MyBatis의 selectList 메소드를 사용하여 결과를 리스트로 받아옵니다.
    public List<BoardDTO> getBoardList() {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        List<BoardDTO> list;
        try {
            // MyBatis 매퍼에 정의된 "boardSQL.getBoardList" SQL을 실행하여 모든 게시물 리스트를 가져옴
            list = sqlSession.selectList("boardSQL.getBoardList");
        } finally {
            sqlSession.close(); // 세션을 닫아 자원 해제
        }
        return list; // 결과로 가져온 게시물 리스트 반환
    }

    // 6. 게시물 상세 조회 메소드
    // 주어진 ID에 해당하는 게시물의 상세 내용을 조회합니다.
    public BoardDTO getBoard(int seq) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        BoardDTO boardDTO;
        try {
            // MyBatis 매퍼에 정의된 "boardSQL.getBoard" SQL을 실행하여 특정 게시물의 정보를 가져옴
            boardDTO = sqlSession.selectOne("boardSQL.getBoard", seq);
        } finally {
            sqlSession.close(); // 세션 종료
        }
        return boardDTO; // 조회된 게시물 정보를 반환
    }

    // 7. 게시물 수정 메소드
    // 주어진 정보를 바탕으로 게시물을 수정하는 메소드입니다.
    public void updateBoard(BoardDTO boardDTO) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            // MyBatis 매퍼에 정의된 "boardSQL.updateBoard" SQL 구문을 실행하여 게시물을 수정
            sqlSession.update("boardSQL.updateBoard", boardDTO);
            sqlSession.commit(); // 트랜잭션 커밋
        } finally {
            sqlSession.close(); // 세션 종료
        }
    }

    // 8. 게시물 삭제 메소드
    // 주어진 게시물 ID를 바탕으로 해당 게시물을 삭제합니다.
    public void deleteBoard(int seq) {
        SqlSession sqlSession = sqlSessionFactory.openSession();
        try {
            // MyBatis 매퍼에 정의된 "boardSQL.deleteBoard" SQL 구문을 실행하여 게시물 삭제
            sqlSession.delete("boardSQL.deleteBoard", seq);
            sqlSession.commit(); // 트랜잭션 커밋
        } finally {
            sqlSession.close(); // 세션 종료
        }
    }
}
