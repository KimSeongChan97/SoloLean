<%@ page contentType="text/html;charset=UTF-8" language="java" pageEncoding="UTF-8"%>
<%@ page import="java.sql.*, java.io.*, java.util.*" %>
<%
    String dbURL = "jdbc:oracle:thin:@localhost:1521:xe";
    String dbUser = "hr";
    String dbPass = "hr";
    
    Connection conn = null;
    PreparedStatement pstmtPost = null;
    PreparedStatement pstmtUpdateViews = null;
    PreparedStatement pstmtComment = null;
    ResultSet rsPost = null;
    ResultSet rsComment = null;

    String postId = request.getParameter("seq");  // 게시글 ID
    String memberId = (String)session.getAttribute("memberId"); // 세션에서 로그인한 사용자 ID 가져오기
    
    try {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        conn = DriverManager.getConnection(dbURL, dbUser, dbPass);

        // 조회수 증가시키기
        String updateViewsSQL = "UPDATE BOARD SET VIEWS = VIEWS + 1 WHERE SEQ = ?";
        pstmtUpdateViews = conn.prepareStatement(updateViewsSQL);
        pstmtUpdateViews.setString(1, postId);
        pstmtUpdateViews.executeUpdate();

        // 게시글 내용 가져오기
        String postSQL = "SELECT B.SEQ, B.SUBJECT, B.CONTENT, B.VIEWS, M.NAME AS WRITER, B.LOGTIME FROM BOARD B JOIN MEMBER M ON B.MEMBER_ID = M.MEMBER_ID WHERE B.SEQ = ?";
        pstmtPost = conn.prepareStatement(postSQL);
        pstmtPost.setString(1, postId);
        rsPost = pstmtPost.executeQuery();
        
        if(rsPost.next()) {
            int seq = rsPost.getInt("SEQ");
            String subject = rsPost.getString("SUBJECT");
            String content = rsPost.getString("CONTENT");
            String writer = rsPost.getString("WRITER");
            String logtime = rsPost.getString("LOGTIME");
            int views = rsPost.getInt("VIEWS");

            out.println("<h2>" + subject + "</h2>");
            out.println("<p>작성자: " + writer + "</p>");
            out.println("<p>작성일: " + logtime + "</p>");
            out.println("<p>조회수: " + views + "</p>");
            out.println("<hr>");
            out.println("<p>" + content + "</p>");
        }

        // 댓글 목록 가져오기
        String commentSQL = "SELECT C.COMMENT_ID, C.CONTENT, M.NAME AS WRITER, C.LOGTIME FROM COMMENTS C JOIN MEMBER M ON C.MEMBER_ID = M.MEMBER_ID WHERE C.POST_ID = ? ORDER BY C.COMMENT_ID ASC";
        pstmtComment = conn.prepareStatement(commentSQL);
        pstmtComment.setString(1, postId);
        rsComment = pstmtComment.executeQuery();

        out.println("<hr><h3>댓글</h3>");
        while(rsComment.next()) {
            int commentId = rsComment.getInt("COMMENT_ID");
            String commentContent = rsComment.getString("CONTENT");
            String commentWriter = rsComment.getString("WRITER");
            String commentLogtime = rsComment.getString("LOGTIME");

            out.println("<div><strong>" + commentWriter + ":</strong> " + commentContent + " <em>(" + commentLogtime + ")</em></div>");
        }

        // 댓글 작성 폼
        if(memberId != null) {
            out.println("<hr><h4>댓글 작성</h4>");
            out.println("<form action='add_comment.jsp' method='post'>");
            out.println("<input type='hidden' name='postId' value='" + postId + "'>");
            out.println("<textarea name='content' rows='4' cols='50' required></textarea><br>");
            out.println("<button type='submit' class='btn btn-primary'>댓글 달기</button>");
            out.println("</form>");
        } else {
            out.println("<p><a href='login.html'>로그인</a> 후 댓글을 작성할 수 있습니다.</p>");
        }

    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try { if (rsPost != null) rsPost.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (rsComment != null) rsComment.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (pstmtPost != null) pstmtPost.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (pstmtUpdateViews != null) pstmtUpdateViews.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (pstmtComment != null) pstmtComment.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (conn != null) conn.close(); } catch (Exception e) { e.printStackTrace(); }
    }
%>
