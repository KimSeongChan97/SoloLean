package guestbook.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import guestbook.bean.GuestbookDTO;

public class GuestbookDAO {
    private String driver = "oracle.jdbc.driver.OracleDriver";
    private String URL = "jdbc:oracle:thin:@localhost:1521:xe"; // 데이터베이스 URL
    private String USER = "C##JAVA";  // DB 사용자명
    private String PASSWORD = "1234";  // DB 비밀번호
    
    private Connection conn;
    private PreparedStatement pstmt;
    private ResultSet rs;
    
    private static GuestbookDAO guestbookDAO = new GuestbookDAO();
    
    // 싱글톤 패턴으로 GuestbookDAO 인스턴스 생성 및 반환
    public static GuestbookDAO getInstance() {
        return guestbookDAO;
    }

    private GuestbookDAO() {
        try {
            // 1. 드라이버 로딩
            Class.forName(driver);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
    
    // 데이터베이스 연결 메서드
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(URL, USER, PASSWORD);
    }
    
    // 방명록 데이터 삽입 메서드
    public int insertGuestbook(GuestbookDTO guestbookDTO) {
        int result = 0;
        String sql = "INSERT INTO guestbook(seq, name, email, homepage, subject, content, logtime) VALUES(SEQ_GUESTBOOK.NEXTVAL, ?, ?, ?, ?, ?, SYSDATE)";
        try {
            conn = getConnection(); // 2. DB 연결
            pstmt = conn.prepareStatement(sql); // 3. PreparedStatement 생성
            pstmt.setString(1, guestbookDTO.getName());
            pstmt.setString(2, guestbookDTO.getEmail());
            pstmt.setString(3, guestbookDTO.getHomepage());
            pstmt.setString(4, guestbookDTO.getSubject());
            pstmt.setString(5, guestbookDTO.getContent());
            
            result = pstmt.executeUpdate(); // 데이터 삽입 수행
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(conn, pstmt);
        }
        return result;
    }
    
    // 방명록 리스트 조회 메서드
    public List<GuestbookDTO> getGuestbookList() {
        List<GuestbookDTO> list = new ArrayList<>();
        String sql = "SELECT * FROM guestbook ORDER BY seq DESC";
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            
            while (rs.next()) {
                GuestbookDTO guestbookDTO = new GuestbookDTO();
                guestbookDTO.setSeq(rs.getInt("seq"));
                guestbookDTO.setName(rs.getString("name"));
                guestbookDTO.setEmail(rs.getString("email"));
                guestbookDTO.setHomepage(rs.getString("homepage"));
                guestbookDTO.setSubject(rs.getString("subject"));
                guestbookDTO.setContent(rs.getString("content"));
                guestbookDTO.setLogtime(rs.getDate("logtime"));
                
                list.add(guestbookDTO);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(conn, pstmt, rs);
        }
        return list;
    }
    
    // 방명록 데이터 삭제 메서드
    public int deleteGuestbook(int seq) {
        int result = 0;
        String sql = "DELETE FROM guestbook WHERE seq=?";
        try {
            conn = getConnection();
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, seq);
            
            result = pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            close(conn, pstmt);
        }
        return result;
    }
    
    // 데이터베이스 자원 해제 메서드 (Connection 및 PreparedStatement)
    private void close(Connection conn, PreparedStatement pstmt) {
        try {
            if (pstmt != null) pstmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    // 데이터베이스 자원 해제 메서드 (Connection, PreparedStatement 및 ResultSet)
    private void close(Connection conn, PreparedStatement pstmt, ResultSet rs) {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (conn != null) conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
