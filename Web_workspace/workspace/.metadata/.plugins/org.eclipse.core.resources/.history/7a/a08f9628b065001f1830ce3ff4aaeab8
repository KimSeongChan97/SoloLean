<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>exam03_json03</title>
<style type="text/css">

table {
    display: block;
    width: 100%;
    font-size: 14px;
    text-align: center;
    /* 테이블을 블록 형태로 설정하고, 너비를 100%로 지정하여 화면 전체를 차지하게 합니다. */
}
table tr:after {
    content: '';
    display: block;
    float: none;
    clear: both;
    /* 각 테이블 행에서 float 속성으로 인한 문제를 해결하기 위해 clearfix 스타일을 적용합니다. */
}
table .left {
    text-align: left;
    /* 왼쪽 정렬이 필요한 셀에 적용되는 클래스입니다. */
}
thead, tbody, tr {
    display: block;
    width: 100%;
    /* 테이블 헤더, 바디, 행을 블록 요소로 설정하여 각 행이 개별 블록처럼 동작하도록 만듭니다. */
}
td, th {
    display: block;
    float: left;
    padding: 10px 0;
    /* 테이블의 셀과 헤더를 블록으로 표시하고, 왼쪽으로 플로팅하여 행을 구성합니다. 또한, 패딩을 적용하여 텍스트가 셀 안에서 적절하게 위치하도록 합니다. */
}
table thead {
    border-bottom: solid 2px #285E8E;
    font-weight: bold;
    /* 테이블 헤더에 밑줄을 그어 구분을 명확히 하고, 텍스트를 굵게 표시하여 강조합니다. */
}
table tbody tr {
    border-bottom: 1px dotted #ccc;
    /* 테이블 본문 행에 점선으로 밑줄을 그어 행 간 구분을 명확히 합니다. */
}
.example table .no {
    width: 10%;
    /* 번호 열의 너비를 10%로 설정합니다. */
}
.example table .subject {
    width: 60%;
    /* 제목 열의 너비를 60%로 설정합니다. */
}
.example table .hit {
    width: 10%;
    /* 조회수 열의 너비를 10%로 설정합니다. */
}
.example table .date {
    width: 20%;
    /* 작성일시 열의 너비를 20%로 설정합니다. */
}

</style>
</head>
<body>

    <!-- 게시판 제목 -->
    <h1 class="title"></h1>
    <!-- JSON 데이터로부터 전달받은 제목을 이 요소에 표시할 예정입니다. -->
    
    <!-- 게시판 설명 -->
    <div class="exec"></div>
    <!-- JSON 데이터로부터 전달받은 설명을 이 요소에 표시할 예정입니다. -->
    
    <div class="exec">
        <!-- 게시물 수  -->
        총 게시물 수: <span></span>개
        <!-- JSON 데이터로부터 전달받은 게시물 총 개수를 <span> 요소에 표시할 예정입니다. -->
    </div>
    
    <div class="example">
        <table>
            <thead>
                <tr>
                    <th class="no">번호</th>
                    <th class="subject">제목</th>
                    <th class="hit">조회수</th>
                    <th class="date">작성일시</th>
                    <!-- 테이블 헤더에 각 열의 제목을 표시합니다. -->
                </tr>
            </thead>                
            <tbody>
                <!-- 목록 -->
                <tr>
                	<td></td>
                	<td></td>
                	<td></td>
                	<td></td>
                	<!-- 초기 빈 행을 정의하여 JSON 데이터로부터 동적으로 생성된 행이 여기에 추가될 예정입니다. -->
                </tr>
            </tbody>
        </table>
    </div>

<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<!-- jQuery 라이브러리를 불러옵니다. 최신 버전의 jQuery를 사용하여 아래의 AJAX 요청과 템플릿 작업을 처리합니다. -->
<script type="text/javascript" src="../js/jquery.tmpl.min.js"></script>
<!-- jQuery Template 플러그인을 불러옵니다. 이 플러그인은 템플릿을 사용해 동적으로 HTML을 생성할 때 사용됩니다. -->

<!-- 템플릿으로 사용할 HTML 태그 -->
<script type="text/javascript" id="itemTemplate">
<tr>
	<td class="no">${ no }</td>
	<td class="left subject">${ subject }</td>
	<td class="hit">${ hit }</td>
	<td class="date">${ date }</td>
	<!-- 이 템플릿은 JSON 데이터의 각 항목을 기반으로 테이블의 행을 동적으로 생성하기 위해 사용됩니다. 
	     ${ no }, ${ subject }, ${ hit }, ${ date }는 각각 JSON 데이터의 키를 참조하여 값이 삽입됩니다. -->
</tr>
</script>
<!-- 템플릿 끝 -->


<script type="text/javascript">
$(function(){
	$.ajax({
		type: 'get',
		// HTTP 요청 방식으로 GET 메소드를 사용합니다. GET 방식은 서버로부터 데이터를 요청할 때 주로 사용됩니다.
		url: '../json/bbs.json',
		// JSON 데이터가 있는 파일의 URL입니다. 상대 경로로 지정되어 있으므로, 현재 파일이 위치한 경로를 기준으로 찾아갑니다.
		dataType: 'json',
		// 서버에서 받을 데이터의 형식을 JSON으로 지정합니다. jQuery는 이 데이터를 자동으로 파싱하여 JavaScript 객체로 변환합니다.
		success: function(data){
			// AJAX 요청이 성공적으로 완료되었을 때 호출되는 콜백 함수입니다. 서버로부터 받은 데이터가 매개변수 data로 전달됩니다.
			$('h1.title').html(data.title);
			// 받아온 JSON 데이터의 title 값을 h1.title 요소에 표시합니다.
			$('div.exec:eq(0)').html(data.description);
			// 받아온 JSON 데이터의 description 값을 첫 번째 div.exec 요소에 표시합니다.
			$('div.exec:eq(1) > span').html(data.total);
			// 받아온 JSON 데이터의 total 값을 두 번째 div.exec 요소의 자식 span 요소에 표시합니다.
			
			/*
			$.each(data.item, function(index, items){
				
				let tr = `<tr>
	                  <td class="no">${items.no}</td>
	                  <td class="left subject">${items.subject}</td>
	                  <td class="hit">${items.hit}</td>
	                  <td class="date">${items.date}</td>
	                 </tr>`;
	                 // 각 JSON 데이터를 기반으로 새로운 테이블 행을 동적으로 생성합니다. 각 데이터 필드를 해당하는 테이블 셀(td)로 감싸서 추가합니다.
	                 
	                 $('tbody').append(tr);
	                 // 새로 생성된 행을 테이블의 tbody에 추가하여 화면에 표시합니다.
			}); // $.each()
			*/
			
			// item 배열을 템플릿에 통채로 저장
			let tmpl = $('#itemTemplate').tmpl(data.item);
			// 템플릿을 사용하여 item 배열의 각 요소를 기반으로 테이블 행을 생성합니다.
			// 여기서 tmpl() 함수는 item 배열의 각 요소를 템플릿에 바인딩하여 각각의 테이블 행으로 변환합니다.
			
			// 화면에 출력
			$('tbody').append(tmpl);
			// 생성된 템플릿(테이블 행)을 테이블의 tbody에 추가하여 화면에 표시합니다.
			
			
		},
		error: function(e){
			console.log(e);
			// AJAX 요청이 실패했을 때 오류 메시지를 콘솔에 출력합니다. 이는 네트워크 오류, 파일이 없거나 경로가 잘못된 경우에 유용합니다.
		}
		
	});
});
</script>
</body>
</html>

<!-- 
Template 플러그인과의 연계
Template 플러그인은 동적으로 생성하고자 하는 요소를 미리 HTML 틀을 정의해 둔 후, 
그 안의 적용할 내용을 JSON 데이터로 처리하는 jQuery 플러그인이다.
Ajax를 사용하면 원격지의 JSON 데이터를 페이지 이동 없이 로드 해 올 수 있다.
이때 Ajax로 로드한 JSON 데이터의 구조와 템플릿에 정의되어있는 치환자들이 동일하다면, 
바로 데이터를 전달받아 동적 요소를 생성하여 화면에 출력하도록 구성할 수 있다.
사이트 : https://github.com/BorisMoore/jquery-tmpl=> 
jquery-tmpl-master.zip 다운로드 받기=> jquery.tmpl.min.js를 사용하면 된다.=> 
플러그인 참조 코드 추가<script type="text/javascript" src="../json/jquery.tmpl.min.js"></script>

예)
   {"message" : "Hello Ajax"}
            ↓
   $.get("data.json", {파라미터}, function(data) {
      var temp = $("#itemTemplate").tmpl(data);
      $("출력할 요소 CSS셀렉터").append(temp);
   }, ["json"]);
            ↓
   <script id="itemTemplate" type="text/x-jquery-teml">
      <h1>${message}</h1>
   </script>

주의사항=> JSP 파일에서 작업을 하면 EL표현식과 충돌이 난다.<script id="itemTemplate" type="text/x-jquery-teml"><h1>${message}</h1></script>=> 그래서 JSP 파일에서는 반드시 ""를 붙여서 사용을 해야 한다.<script id="itemTemplate" type="text/x-jquery-teml"><h1>${message}</h1></script>
-->
