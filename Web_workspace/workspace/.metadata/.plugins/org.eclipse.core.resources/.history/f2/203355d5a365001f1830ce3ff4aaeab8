<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JSON에 대하여...</title>
<link rel="stylesheet" href="../css/common.css">
<link rel="stylesheet" href="../css/reset.css">
</head>
<body>
	
	<h1 class="title">$.ajax() 함수를 사용한 JSON 데이터 읽기</h1> 
	<div class="exec">
		<input type="button" value="JSON 데이터 가져오기" id="mybtn"/> 
	</div>
	
	<div class="console" id="result"></div>

<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
$(function(){
	$('#mybtn').click(function(){
		// 이 부분은 버튼 클릭 이벤트를 정의하는 코드입니다.
		$.ajax({
			type: 'get', // HTTP 요청 방식을 'GET'으로 설정합니다. 'POST'도 사용할 수 있지만, 여기서는 데이터를 가져오기 때문에 'GET'을 사용합니다.
			url: '../json/json01.json', // 요청을 보낼 URL입니다. 이 경우, json01.json 파일에서 데이터를 가져옵니다.
			dataType: 'json', // 서버로부터 반환되는 데이터의 타입을 JSON으로 지정합니다. 이는 jQuery가 자동으로 JSON 데이터를 파싱해주도록 합니다.
			success: function(data){
				// 이 함수는 AJAX 호출이 성공적으로 완료되었을 때 실행됩니다.
				// 서버로부터 반환된 JSON 데이터는 'data' 변수에 저장됩니다.
				console.log(JSON.stringify(data)); // JSON 객체를 문자열로 변환하여 콘솔에 출력합니다.
				
				let title = data.school.subject.title;
				// JSON 데이터의 'school' 객체 내 'subject' 객체에서 'title' 값을 가져옵니다.
				// 예를 들어, JSON 데이터가 {"school": {"subject": {"title": "Mathematics"}}}이라면, title 변수에는 'Mathematics'가 저장됩니다.
				
				let time = data.school.subject.time;
				// JSON 데이터에서 'time' 값을 가져옵니다. 이 값은 과목이 진행되는 시간 정보를 담고 있을 것입니다.
				
				let teacher = data.school.subject.teacher;
				// JSON 데이터에서 'teacher' 값을 가져옵니다. 이 값은 과목을 담당하는 교사의 이름을 담고 있을 것입니다.
				
				let div = $('<div/>');  // jQuery를 사용하여 <div> 요소를 생성합니다. 이 요소는 이후에 동적으로 생성된 <p> 요소들을 포함할 것입니다.
				let p1 = $('<p></p>').html('과목: ' + title);  // <p> 요소를 생성하고, 그 안에 '과목: '라는 문자열과 과목 제목을 결합하여 출력합니다.
				let p2 = $('<p></p>').html('시간: ' + time);  // <p> 요소를 생성하고, '시간: '라는 문자열과 시간 정보를 결합하여 출력합니다.
				let p3 = $('<p></p>').html('교사: ' + teacher);  // <p> 요소를 생성하고, '교사: '라는 문자열과 교사 이름을 결합하여 출력합니다.
				
				// 메소드 체인 방식을 사용하여 div 요소에 각 <p> 요소를 차례로 추가합니다.
				div.append(p1).append(p2).append(p3);
				// 이 코드에서는 div 요소에 p1, p2, p3 요소를 순서대로 추가합니다.
				// append() 메소드는 jQuery에서 요소를 다른 요소의 자식으로 추가하는 데 사용됩니다.
				
				$('#result').html(div);
				// ID가 'result'인 <div> 요소의 내용을 방금 생성한 div 요소로 교체합니다.
				// 이로 인해, 화면에는 과목, 시간, 교사 정보가 각각의 <p> 태그로 표시되게 됩니다.
				
			},
			error: function(e){
				// 이 함수는 AJAX 호출이 실패했을 때 실행됩니다.
				// 예를 들어, 서버가 다운되었거나, 요청한 파일이 없을 때 이 코드 블록이 실행됩니다.
				console.log(e); // 에러 메시지를 콘솔에 출력하여 디버깅에 도움을 줍니다.
			}
		});
	});
});
</script>
</body>
</html>


<!-- 

JSON 객체 (data.school.subject.title) : 계층형 상속관계를 가지는 TREE 구조
{
	변수: 값,
	변수: 값, ...
} 

JSON 배열
{
	[
		{변수: 값, 변수: 값, ...},
		{변수: 값, 변수: 값, ...},
	]
}

 -->
