package com.control;

import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
//import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import member.control.CommandProcess;

//@WebServlet
public class ControlServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private Map<String, Object> map = new HashMap<String, Object>();
	
	@Override
	public void init(ServletConfig config) throws ServletException {
		String propertyConfig = config.getInitParameter("propertyConfig");
		System.out.println("propertyConfig = " + propertyConfig);
		// 결과 : propertyConfig = D:/Web/workspace/memberMVC/src/main/webapp/WEB-INF/command.properties
		
		// command.properties 의 파일의 내용을 읽어서 Map 에 보관 해야함
		FileInputStream fin = null;
        Properties properties = new Properties();

        try {
        	 fin = new FileInputStream(propertyConfig);	
             properties.load(fin);
             System.out.println("properties = "+properties);

          } catch (IOException e) {
             e.printStackTrace();
          }finally{
             try {
                fin.close();
             } catch (IOException e) {
                e.printStackTrace();
             }
          }
          System.out.println();

          Iterator<Object> it = properties.keySet().iterator();
          while(it.hasNext()) {
             String key = (String)it.next();
             System.out.println("key = "+key);

             String className = properties.getProperty(key);
             System.out.println("className = "+className);

             try {
                Class<?> classType = Class.forName(className);
                Object ob = classType.getConstructor().newInstance();

                System.out.println("ob = "+ob);

                map.put(key, ob);

             } catch (ClassNotFoundException e) {
                e.printStackTrace();
             } catch (InstantiationException e) {
                e.printStackTrace();
             } catch (IllegalAccessException e) {
                e.printStackTrace();
             } catch (IllegalArgumentException e) {
                e.printStackTrace();
             } catch (InvocationTargetException e) {
                e.printStackTrace();
             } catch (NoSuchMethodException e) {
                e.printStackTrace();
             } catch (SecurityException e) {
                e.printStackTrace();
             }

             System.out.println();
          }//while
		
	}
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		execute(request, response);
	}
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		execute(request, response);
	}
	
	protected void execute(HttpServletRequest request, HttpServletResponse response) 
			throws ServletException, IOException {
		System.out.println();
		// 서블릿을 작성하면 반드시 web.xml 에 등록해야한다.
		
		if(request.getMethod().equals("POST")) request.setCharacterEncoding("UTF-8");
		
		//http://localhost:8080/memberMVC/member/writeForm.jsp.do
		//요청한 URL 에서 "/member/writeForm.jsp" 불러오기
		String category = request.getServletPath();
		System.out.println("category = " + category);
		// 출력결과 : category = /member/writeForm.jsp.do
		
		// Map 을 이용하여 Key 에 해당하는 값을 꺼내온다. member.service.WriteFormService
		// 그 값을 저장해야하는데, CommandProcess.java 
		CommandProcess com = (CommandProcess)map.get(category); 
		
		// requestPro 에서 jsp 파일을 들고 온다.
		String view = "/member/writeForm.jsp";
		try {
			view = com.requestPro(request, response);
		} catch (Throwable e) {
			
			e.printStackTrace();
		}
		
		//forward
		RequestDispatcher dispatcher = request.getRequestDispatcher(view); // 상대번지, 절대번지가 안되는 이유는
		dispatcher.forward(request, response); // 제어권 넘기기, web.xml 에 등록 해야함
		
			
		
	}
	
}
