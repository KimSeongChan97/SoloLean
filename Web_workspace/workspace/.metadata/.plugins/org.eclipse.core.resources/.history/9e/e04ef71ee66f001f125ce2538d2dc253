<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="userSQL">
    <!-- MyBatis 매퍼 파일입니다. 이 파일은 SQL 쿼리를 정의하고 Java 코드와 매핑하는 역할을 합니다.
         namespace="userSQL": 이 매퍼 파일이 사용하는 네임스페이스를 'userSQL'로 지정합니다.
         네임스페이스는 여러 매퍼 파일에서 같은 SQL ID를 사용하지 않도록 구분하는 역할을 합니다. 
         예를 들어, 다른 매퍼 파일에서 동일한 SQL 쿼리 ID를 사용할 수 없게끔 식별하기 위해 사용됩니다.
         
         네임스페이스는 MyBatis가 SQL 쿼리와 Java 메소드를 연결할 때 사용되며, 특정 매퍼의 SQL을 명확히 구분하여 호출할 수 있도록 합니다. -->

    <!-- 만약에 테이블의 컬럼과 객체의 필드명이 다른 경우 -->
    <resultMap type="user.bean.UserDTO" id="userResult">
        <!-- resultMap 태그는 테이블의 컬럼 이름과 객체의 필드 이름이 다를 때 매핑을 정의하는 데 사용됩니다.
             여기서 userResult라는 이름의 resultMap을 정의하고, usertable 테이블의 NAME, ID, PWD 컬럼을 각각 UserDTO 객체의 name, id, pwd 필드와 매핑합니다. 
             resultMap은 MyBatis에서 SQL 쿼리 결과를 Java 객체에 매핑하는 데 사용되며, 여기서는 'NAME', 'ID', 'PWD' 테이블 컬럼을 UserDTO의 'name', 'id', 'pwd' 필드에 매핑합니다. 
             이때 테이블 컬럼명과 Java 필드명이 동일하지 않으면 명시적으로 매핑해야 합니다.
             
             resultMap은 주로 테이블 컬럼명과 Java 필드명이 다를 때, 또는 객체의 관계를 설정할 때 사용됩니다. 
             이 설정을 통해 쿼리 결과를 객체로 변환할 때의 필드 매핑을 관리할 수 있습니다. -->

        <result column="NAME" property="name" />
        <!-- column="NAME": 테이블의 'NAME' 컬럼을,
             property="name": UserDTO 객체의 'name' 필드에 매핑 
             즉, usertable 테이블에서 'NAME' 컬럼의 데이터를 읽어서 UserDTO의 'name' 필드에 할당합니다.
             
             여기서 'NAME'은 데이터베이스 컬럼 이름이고, 'name'은 Java 객체 UserDTO의 필드 이름입니다.
             데이터베이스와 객체의 필드 이름이 다를 때 명시적으로 매핑해야 하며, 이 설정을 통해 쿼리 결과가 올바르게 매핑됩니다. -->

        <result column="ID" property="id" />
        <!-- column="ID": 테이블의 'ID' 컬럼을,
             property="id": UserDTO 객체의 'id' 필드에 매핑 
             'ID' 컬럼 데이터를 UserDTO의 'id' 필드에 할당합니다.
             
             동일한 방식으로, 데이터베이스의 'ID' 컬럼을 UserDTO 객체의 'id' 필드로 매핑합니다. -->

        <result column="PWD" property="pwd" />
        <!-- column="PWD": 테이블의 'PWD' 컬럼을,
             property="pwd": UserDTO 객체의 'pwd' 필드에 매핑 
             'PWD' 컬럼 데이터를 UserDTO의 'pwd' 필드에 할당합니다.
             
             이렇게 각각의 테이블 컬럼을 객체 필드에 매핑함으로써, SQL 결과를 객체로 변환할 때 필드 이름 불일치 문제를 해결합니다. -->
    </resultMap>
    
    <!-- 이름으로 구분 -->
    <!-- insert 태그: 데이터베이스에 새로운 데이터를 삽입하는 SQL 쿼리를 정의합니다. -->
    <insert id="write" parameterType="user">
        <!-- id="write": 이 insert 쿼리의 고유 식별자입니다. MyBatis는 이 식별자를 통해 Java 코드에서 이 SQL을 호출할 수 있습니다.
             parameterType="user.bean.UserDTO": 이 쿼리에 전달될 파라미터 타입을 지정합니다. 'user.bean.UserDTO'는 Java 클래스이며, 이 클래스의 인스턴스가 파라미터로 전달됩니다.
             이 클래스에는 'name', 'id', 'pwd' 같은 필드가 있을 것이며, 이 필드들이 SQL 쿼리에 맵핑됩니다.
             이 쿼리는 'UserDTO' 객체를 받아 그 객체의 'name', 'id', 'pwd' 값을 이용해 테이블에 새로운 데이터를 삽입합니다.
             
             insert 쿼리는 주로 데이터베이스에 새로운 데이터를 추가할 때 사용됩니다. 여기서는 사용자가 입력한 데이터를 데이터베이스의 usertable에 삽입하는 역할을 합니다. -->

        <!-- insert into usertable values(?, ?, ?) -->
        <!-- 주석에서 설명하는 바와 같이, 실제로는 '?' 자리에 파라미터 값이 들어가게 됩니다.
             MyBatis는 '#{필드명}'을 통해 Java 객체의 필드 값을 SQL 쿼리에 바인딩합니다. 
             MyBatis는 '#{name}'과 같은 형태를 통해 SQL에 Java 객체의 필드 값을 삽입합니다. 이때 SQL 주입을 방지하는 안전한 바인딩 처리가 자동으로 이루어집니다.
             
             #{name}과 같은 형식은 MyBatis의 바인딩 표현식입니다. 이를 통해 사용자 입력 값을 안전하게 SQL에 삽입할 수 있으며, 이로 인해 SQL 인젝션 공격을 방지할 수 있습니다. -->

        insert into usertable values(#{name}, #{id}, #{pwd})
        <!-- SQL 쿼리: 'usertable'이라는 테이블에 데이터를 삽입하는 쿼리입니다.
             #{name}, #{id}, #{pwd}는 MyBatis의 바인딩 표현식입니다. 
             - #{name}: UserDTO 객체의 'name' 필드 값을 가져와 이 자리에 삽입합니다.
             - #{id}: UserDTO 객체의 'id' 필드 값을 가져옵니다.
             - #{pwd}: UserDTO 객체의 'pwd' 필드 값을 가져옵니다.
             이를 통해 Java 코드에서 전달된 객체의 필드 값을 쿼리에 반영할 수 있습니다.
             SQL 주입 공격을 방지하기 위해 MyBatis는 자동으로 이 값을 적절히 처리해 줍니다.
             
             이 쿼리는 테이블에 새로운 레코드를 삽입하며, 필드 값들은 #{name}, #{id}, #{pwd}로 바인딩되어 안전하게 쿼리에 포함됩니다. -->
    </insert>
    
    <!-- select 태그: DB에서 데이터를 조회하는 SQL 쿼리를 정의합니다. -->
    <select id="getAllList" resultMap="userResult">
        <!-- id="getAllList": 이 select 쿼리의 고유 식별자입니다. MyBatis는 이 식별자를 통해 Java 코드에서 이 SQL을 호출할 수 있습니다.
             resultMap="userResult": 이 쿼리의 결과를 'userResult'라는 resultMap을 통해 UserDTO 객체에 매핑합니다.
             resultMap은 각 컬럼과 객체의 필드를 매핑하기 위한 규칙을 정의하는데, 위에서 정의한 'userResult'를 사용합니다.
             이 쿼리는 전체 사용자 목록을 조회하여, 결과를 UserDTO 객체에 매핑하여 반환합니다.
             
             resultMap을 사용함으로써, SQL 쿼리의 결과를 Java 객체에 자동으로 매핑할 수 있습니다. 여기서는 getAllList라는 쿼리를 통해 모든 사용자 데이터를 조회하고 이를 UserDTO 객체로 변환합니다. -->

        select * from usertable
        <!-- SQL 쿼리: 'usertable'에서 모든 데이터를 선택하여 조회하는 쿼리입니다.
             '*'는 테이블의 모든 열을 의미하며, 결과는 각 행이 UserDTO 객체로 매핑됩니다.
             이 쿼리는 usertable에 저장된 모든 사용자 정보를 반환하게 됩니다.
             
             '*'는 모든 열을 조회할 때 사용되며, 이를 통해 데이터베이스의 모든 사용자 정보를 가져올 수 있습니다. 각 행은 UserDTO 객체에 자동으로 매핑됩니다. -->
    </select>
    
    <!-- 특정 사용자를 ID로 조회하는 쿼리 -->
    <select id="getUser" parameterType="String" resultMap="userResult">
        <!-- id="getUser": 이 select 쿼리의 고유 식별자입니다. 'getUser'라는 이름으로 이 SQL 쿼리를 호출할 수 있습니다.
             parameterType="String": 이 쿼리에 전달될 파라미터의 타입을 지정합니다. 이 경우, ID를 조회할 것이므로 String 타입입니다.
             resultMap="userResult": 조회된 결과를 'userResult'로 정의된 매핑 규칙에 따라 UserDTO 객체로 변환합니다.
             이 쿼리는 특정 사용자의 ID를 받아 해당 사용자 정보를 조회하고, 결과를 UserDTO 객체로 반환합니다.
             
             MyBatis의 parameterType은 SQL 쿼리에 전달될 파라미터의 타입을 지정하는 역할을 합니다. 여기서는 ID로 검색하므로 String 타입을 사용합니다. -->

        select * from usertable where id = #{id}
        <!-- SQL 쿼리: 'usertable'에서 특정 id를 가진 사용자의 데이터를 선택하는 쿼리입니다.
             #{id}는 MyBatis에서 파라미터로 전달된 값을 바인딩하는 표현식입니다. 
             이 구문은 usertable에서 해당 'id'를 가진 사용자의 데이터를 가져옵니다.
             
             MyBatis는 SQL 쿼리에서 #{id}와 같은 표현을 사용하여 안전하게 파라미터 값을 SQL에 바인딩합니다. 이를 통해 SQL 인젝션 공격을 방지할 수 있습니다. -->
    </select>
    
    <!-- 사용자 정보를 업데이트하는 쿼리 -->
    <update id="updateUser" parameterType="user">
        <!-- id="updateUser": 이 update 쿼리의 고유 식별자입니다. 'updateUser'라는 이름으로 이 SQL 쿼리를 호출할 수 있습니다.
             parameterType="user.bean.UserDTO": 이 쿼리에 전달될 파라미터의 타입을 지정합니다. 'user'는 UserDTO 객체를 참조합니다.
             이 쿼리는 특정 사용자의 데이터를 받아 데이터베이스의 내용을 업데이트합니다.
             
             update 쿼리는 데이터베이스의 데이터를 수정할 때 사용됩니다. 여기서는 UserDTO 객체에 저장된 값을 바탕으로 사용자 정보를 업데이트합니다. -->

        update usertable
        set name = #{name}, pwd = #{pwd}
        where id = #{id}
        <!-- SQL 쿼리: 'usertable'에서 특정 id를 가진 사용자의 이름(name)과 비밀번호(pwd)를 업데이트하는 쿼리입니다.
             #{name}, #{pwd}, #{id}는 MyBatis가 UserDTO 객체에서 가져온 값을 바인딩합니다. 
             이 구문은 특정 'id' 값을 기준으로 해당 사용자의 'name'과 'pwd' 값을 업데이트합니다.
             
             update 쿼리는 주어진 조건에 맞는 레코드를 수정합니다. 여기서는 특정 사용자의 이름과 비밀번호를 업데이트하는 작업을 수행합니다. -->
    </update>
    
    <!-- 삭제 -->
    <delete id="deleteUser" parameterType="String">
        <!-- id="deleteUser": 이 delete 쿼리의 고유 식별자입니다. 'deleteUser'라는 이름으로 이 SQL 쿼리를 호출할 수 있습니다.
             parameterType="String": 이 쿼리에 전달될 파라미터의 타입은 String입니다. 이 경우, 사용자의 ID가 파라미터로 전달됩니다.
             이 쿼리는 특정 id를 받아 해당 사용자를 데이터베이스에서 삭제합니다.
             
             delete 쿼리는 데이터베이스에서 데이터를 삭제할 때 사용됩니다. 여기서는 주어진 ID를 가진 사용자를 삭제하는 작업을 수행합니다. -->

        delete from usertable where id = #{id}
        <!-- SQL 쿼리: 'usertable'에서 특정 id를 가진 사용자를 삭제하는 쿼리입니다.
             #{id}는 파라미터로 전달된 값을 바인딩하여, 해당 사용자를 삭제합니다. 
             이 쿼리를 통해, 데이터베이스에서 해당 사용자가 삭제됩니다.
             
             MyBatis의 delete 구문을 통해 주어진 ID 값을 가진 사용자를 삭제합니다. 삭제할 레코드를 안전하게 지정하기 위해 #{id}를 바인딩합니다. -->
    </delete>
    
    
    <!-- search 쿼리: 동적으로 이름 또는 아이디로 검색 -->
    <select id="search" parameterType="java.util.Map" resultMap="userResult">
        <!-- id="search": 이 쿼리의 고유 식별자입니다. Java 코드에서 이 SQL을 호출할 때 사용됩니다.
             parameterType="map": 이 쿼리에서 전달될 파라미터 타입을 Map으로 지정합니다. Map은 'column'과 'value'라는 키-값 쌍을 통해 검색할 조건을 동적으로 전달합니다.
             예를 들어, 'column'에는 'name' 또는 'id'가 들어가고, 'value'에는 사용자가 입력한 검색어가 들어갑니다.
             
             resultMap="userResult": 쿼리 결과는 'userResult'라는 resultMap에 따라 UserDTO 객체로 매핑됩니다.
             resultMap을 사용하여 결과를 Java 객체로 매핑하는 방식은 동일합니다. 여기서는 사용자 정보를 UserDTO 객체로 변환합니다. -->
             
             <!--
 			select * from usertable where
			<if test="columnName == 'name'">
				name like '% || #{value} || %'
			</if>
			<if test="value == 'id'">
				id like '% || #{value} || %'
			</if>
				 -->
				 
			<!-- 	 	
			select * from usertable where
			<choose>
				<when test="columnName == 'name'">
					name like '% || #{value} || %'
				</when>
				<when test="value == 'id'">
					name id '% || #{value} || %'
				</when>
			</choose>	 
				  -->
				  
			select * from usertable where 
			
				  
    </select>
    
</mapper>
