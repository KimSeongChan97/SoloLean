<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JSON에 대하여...</title>
<link rel="stylesheet" href="../css/common.css">
<link rel="stylesheet" href="../css/reset.css">
</head>
<body>
	
	<h1 class="title">$.ajax() 함수를 사용한 JSON 데이터 읽기</h1> 
	<div class="exec">
		<input type="button" value="JSON 데이터 가져오기" id="mybtn"/> 
	</div>
	
	<div class="console" id="result"></div>

<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<script type="text/javascript">
$(function(){
	$('#mybtn').click(function(){
		$.ajax({
			type: 'get',
			url: '../json/json01.json',
			dataType: 'json', // 서버로부터 반환되는 dataType
			success: function(data){
				console.log(JSON.stringify(data));
				
				let title = data.school.subject.title;
				let time = data.school.subject.time;
				let teacher = data.school.subject.teacher;
				
				let div = $('<div/>');  // jQuery를 사용하여 <div> 요소를 생성한다.
				let p1 = $('<p></p>').html('과목: ' + title);  // <p> 요소를 생성하고, 그 안에 과목 제목을 출력한다.
				let p2 = $('<p></p>').html('시간: ' + time);  // <p> 요소를 생성하고, 그 안에 시간 정보를 출력한다.
				let p3 = $('<p></p>').html('교사: ' + teacher);  // <p> 요소를 생성하고, 그 안에 교사 이름을 출력한다.
				
				// 메소드 체인 방식을 사용하여 div 요소에 각 <p> 요소를 차례로 추가한다.
				div.append(p1).append(p2).append(p3);
				
				$('#result').html(div);
				
			},
			error: function(e){
				console.log(e);
			}
		});
	});
});
</script>
</body>
</html>


<!-- 

JSON 객체 (data.school.subject.title) : 계층형 상속관계를 가지는 TREE 구조
{
	변수: 값,
	변수: 값, ...
} 

JSON 배열
{
	[
		{변수: 값, 변수: 값, ...},
		{변수: 값, 변수: 값, ...},
	]
}

 -->