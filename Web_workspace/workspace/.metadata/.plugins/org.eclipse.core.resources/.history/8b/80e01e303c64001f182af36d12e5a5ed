<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<link rel="stylesheet" href="../css/common.css">
<link rel="stylesheet" href="../css/reset.css">
</head>
<body>

<h1 class="title">$.ajax() 함수를 사용한 HTML 읽기</h1> 
	<div class="exec">
		<input type="button" value="txt파일 가져오기" id="mybtn"/> 
		<!-- 사용자가 클릭할 수 있는 버튼으로, 클릭 시 서버에서 파일을 가져오는 AJAX 요청이 발생한다. -->
	</div>
	<div class="console" id="result"></div>
	<!-- 서버에서 받아온 데이터를 출력할 공간으로, AJAX 요청이 성공했을 때 이 div 내에 데이터를 삽입하게 된다. -->
	

<script type="text/javascript" src="http://code.jquery.com/jquery-3.7.1.min.js"></script>
<!-- jQuery 라이브러리를 포함하는 script 태그로, jQuery를 사용하여 AJAX 요청과 DOM 조작을 쉽게 수행할 수 있다. -->

<script type="text/javascript">
$(function(){
	// 문서가 준비된 후에 실행되는 jQuery 함수로, DOM 요소들이 모두 로드된 뒤에 jQuery 코드가 실행되도록 보장한다.
	$('#mybtn').click(function(){
		// 'mybtn' ID를 가진 버튼이 클릭되었을 때 실행되는 함수이다. 여기서 서버로 AJAX 요청이 시작된다.
		$.ajax({
			type: 'get', 
			// type: 'get'는 GET 방식으로 데이터를 서버에 요청하는 것을 의미한다. 이 방식은 서버에서 데이터를 가져올 때 주로 사용된다.
			
			url: '../text/text02.txt', 
			// 서버로 요청할 파일 경로를 지정한다. 이 경로는 현재 페이지의 상대 경로로 설정되어 있으며, 요청된 파일은 서버에서 제공하는 텍스트 파일이다.
			// 파일 경로는 상대 경로로 설정되었으며, 현재 문서에서 ../을 사용하여 상위 디렉토리로 이동한 후 'text/text02.txt' 파일을 요청한다.
			
			dataType: 'text', 
			// 서버로부터 받을 데이터의 형식을 지정하는 옵션이다. 이 경우 'text'로 설정했으므로 서버로부터 순수한 텍스트 데이터를 받을 것이다.
			// 이 설정은 jQuery에게 서버에서 전송된 데이터를 텍스트로 처리하게 만든다. 만약 JSON을 받는다면 'json'으로 설정할 수 있다.
			
			success: function(data){
				// 요청이 성공했을 때 실행되는 콜백 함수이다. 서버에서 반환된 데이터는 'data' 변수에 저장된다.
				// 여기서 'data'는 서버에서 응답한 텍스트 데이터이며, 이 데이터는 이후 브라우저 화면에 출력될 것이다.
				
				// $('#result').text(data);
				// .text() 메소드는 텍스트로 데이터를 출력하는 메소드이다. 주석 처리되어 사용되지 않는다. 이 메소드는 HTML 태그를 해석하지 않고 텍스트로 그대로 출력한다.
				
				// $('#result').html(data);
				// .html() 메소드는 데이터를 HTML 형식으로 출력하는 메소드로, HTML 태그를 포함한 데이터를 삽입할 수 있다. 주석 처리되어 사용되지 않는다.
				
				$('#result').append(data);
				// .append() 메소드는 기존 HTML 내용 뒤에 새로운 데이터를 추가하는 메소드이다. 이 경우, 서버에서 받아온 데이터가 'result' div의 기존 내용 뒤에 추가된다.
				// 예를 들어, 여러 번 버튼을 클릭하면 새로운 데이터가 기존 데이터 뒤에 계속 추가된다.
			},
			
			error: function(e){
				// 요청이 실패했을 때 실행되는 콜백 함수이다. 서버 오류나 경로 문제 등으로 인해 데이터를 불러오지 못했을 경우 이 함수가 호출된다.
				// e 객체는 에러에 대한 정보를 담고 있으며, 개발자는 이를 통해 에러 원인을 디버깅할 수 있다.
				
				console.log(e); 
				// 콘솔에 에러 메시지를 출력하여, 개발자가 어떤 오류가 발생했는지 확인할 수 있도록 한다.
			}
		});
	});
});
</script>
</body>
</html>
