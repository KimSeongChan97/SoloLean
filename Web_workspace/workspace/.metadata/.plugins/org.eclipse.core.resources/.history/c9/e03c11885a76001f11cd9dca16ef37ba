<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="boardSQL">

    <!-- 게시글 시퀀스 생성 -->
    <!-- 게시글을 삽입할 때 고유한 시퀀스를 생성하여 게시글의 식별자로 사용합니다.
         Oracle에서 제공하는 'nextval'을 사용하여 시퀀스 값을 생성하며,
         이 값은 각 게시글의 'seq' 필드에 들어가게 됩니다.
         'dual'은 Oracle에서 사용되는 가상 테이블로, 값 없이 쿼리를 실행할 때 사용됩니다. -->
    <select id="getNextSeq" resultType="int">
        SELECT board_seq.nextval FROM dual
    </select>

    <!-- 전체 게시글 수 가져오기 -->
    <!-- 'board' 테이블에서 전체 게시글의 수를 가져오는 쿼리입니다.
         게시판 페이지에서 전체 글 수를 표시하거나, 페이징 처리를 위해 전체 게시글 수를 조회할 때 사용됩니다.
         COUNT(*)는 테이블의 전체 행을 세는 함수로, 게시글의 총 개수를 반환합니다. -->
    <select id="getTotalPosts" resultType="int">
        SELECT COUNT(*) FROM board
    </select>

    <!-- 특정 페이지의 게시글 목록 가져오기 -->
    <!-- 페이징 처리된 게시글 목록을 가져오는 쿼리입니다.
         주어진 페이지 번호에 해당하는 게시글들을 가져오기 위해 'startNum'과 'endNum' 값을 사용합니다.
         이 쿼리에서는 rownum을 사용하여 결과에 일련번호를 부여하고, 특정 범위의 게시글을 조회합니다.
         예를 들어, 페이지당 10개의 게시글을 보여주고 싶다면, 첫 번째 페이지는 rnum 1부터 10까지,
         두 번째 페이지는 11부터 20까지의 게시글을 가져옵니다. -->
    <select id="getBoardListByPage" parameterType="map" resultType="board.bean.BoardDTO">
        SELECT * FROM (
            SELECT rownum AS rnum, seq, subject, id, content, logtime, hit
            FROM (
                SELECT * FROM board ORDER BY seq DESC
            )
        ) WHERE rnum BETWEEN #{startNum} AND #{endNum}
    </select>

    <!-- 전체 게시글 목록 가져오기 -->
    <!-- 게시판의 모든 게시글을 가져오는 쿼리입니다.
         'seq' 컬럼을 기준으로 내림차순 정렬하여 최신 글이 가장 먼저 표시되도록 합니다.
         이 쿼리는 게시글의 전체 목록을 조회할 때 사용됩니다. -->
    <select id="getBoardList" resultType="board.bean.BoardDTO">
        SELECT * FROM board ORDER BY seq DESC
    </select>

    <!-- 특정 게시글 가져오기 -->
    <!-- 특정 게시글의 상세 정보를 가져오는 쿼리입니다.
         'seq'는 게시글의 고유 번호이며, 이 값으로 해당 게시글을 조회합니다.
         게시글 상세보기 페이지를 열 때, 게시글의 제목, 내용, 작성자 등의 정보를 가져오는 데 사용됩니다. -->
    <select id="getBoard" parameterType="int" resultType="board.bean.BoardDTO">
        SELECT * FROM board WHERE seq = #{seq}
    </select>

    <!-- 조회수 증가 쿼리 추가 -->
    <!-- 게시글이 조회될 때마다 조회수를 1씩 증가시키는 쿼리입니다.
         'hit' 필드는 게시글의 조회수를 저장하는 필드이며, 게시글을 볼 때마다 1씩 증가합니다.
         'seq'로 해당 게시글을 찾아 조회수를 업데이트합니다. -->
    <update id="increaseHit" parameterType="int">
        UPDATE board
        SET hit = hit + 1
        WHERE seq = #{seq}
    </update>
    
    <!-- 게시글 작성 -->
    <!-- 새로운 게시글을 작성하고 데이터베이스에 저장하는 쿼리입니다.
         게시글을 등록할 때 고유한 시퀀스 번호(seq), 제목(subject), 작성자 ID(id), 이름(name), 이메일(email),
         게시글 내용(content), 참조(ref), 작성 시간(logtime), 조회수(hit)를 함께 저장합니다.
         SYSDATE는 Oracle에서 현재 시간을 저장하는 함수로, 게시글이 작성된 시간을 자동으로 기록합니다. -->
    <insert id="insertBoard" parameterType="board.bean.BoardDTO">
        INSERT INTO board (seq, subject, id, name, email, content, ref, logtime, hit)
        VALUES (#{seq}, #{subject}, #{id}, #{name}, #{email}, #{content}, #{ref}, SYSDATE, 0)
    </insert>

    <!-- 게시글 수정 -->
    <!-- 특정 게시글을 수정하는 쿼리입니다.
         사용자가 게시글의 내용을 수정할 때, 제목(subject)과 내용(content)을 변경하며, 
         마지막 수정 시간을 SYSDATE를 통해 기록합니다.
         수정할 게시글은 고유 번호(seq)를 기준으로 찾아 수정합니다. -->
    <update id="updateBoard" parameterType="board.bean.BoardDTO">
        UPDATE board SET subject=#{subject}, content=#{content}, logtime=SYSDATE WHERE seq=#{seq}
    </update>

    <!-- 게시글 삭제 -->
    <!-- 특정 게시글을 삭제하는 쿼리입니다.
         게시글 고유 번호(seq)를 기준으로 해당 게시글을 데이터베이스에서 삭제합니다. -->
    <delete id="deleteBoard" parameterType="int">
        DELETE FROM board WHERE seq = #{seq}
    </delete>

</mapper>
