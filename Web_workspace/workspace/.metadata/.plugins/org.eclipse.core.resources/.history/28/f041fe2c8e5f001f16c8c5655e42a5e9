<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>연인과의 날짜 계산</title>
</head>
<body>
    <!-- 페이지 제목을 출력하는 부분 -->
    <h1>연인과의 날짜 계산</h1>

    <!-- 연인과 만난 후 경과한 일수를 출력할 위치 -->
    <div id="result"></div>

    <script>
        // 만난 날로부터 오늘까지 경과한 일수를 계산하는 함수
        function calculateDays() {
            // 사용자가 연인과 만난 날짜를 입력받는 prompt 창을 띄운다
            // 첫 번째 인자는 사용자에게 보여줄 메시지
            // 두 번째 인자는 기본 값으로 제시할 날짜 형식 "2022/01/01" (사용자가 원하는 다른 날짜로 수정 가능)
            const inputDate = prompt("연인과 만난 날을 입력하세요 (예시: yyyy/mm/dd):", "2022/01/01");

            // 입력받은 날짜 문자열을 Date 객체로 변환한다
            // Date 객체는 자바스크립트에서 날짜와 시간을 관리하는 객체로, 입력된 문자열을 날짜 형식으로 파싱한다
            const startDate = new Date(inputDate);

            // 오늘 날짜를 Date 객체로 가져온다. 'today' 변수에는 현재 날짜와 시간이 포함된다
            const today = new Date();

            // 오늘 날짜와 입력받은 날짜 사이의 시간 차이를 계산한다. 차이는 밀리초 단위로 반환된다.
            // 자바스크립트에서 Date 객체 간의 뺄셈은 자동으로 밀리초 단위의 차이를 반환함
            const timeDiff = today - startDate;

            // 계산된 시간 차이를 일 단위로 변환한다.
            // 밀리초를 일(day) 단위로 변환하기 위해 1000(밀리초) * 60(초) * 60(분) * 24(시간)로 나눈다.
            // Math.floor()는 소수점 이하를 버리고 가장 가까운 정수로 만든다.
            const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));

            // 계산된 경과 일수를 페이지에 출력한다.
            // document.getElementById('result')는 'result'라는 id를 가진 HTML 요소를 선택한다.
            // innerHTML 속성은 선택된 요소의 HTML 콘텐츠를 수정한다. 
            // 따라서 해당 div 내부에 `오늘까지 우리는 XX일입니다.` 라는 텍스트가 출력된다.
            document.getElementById('result').innerHTML = `오늘까지 우리는 ${daysDiff}일입니다.`;
        }

        // window.onload는 웹 페이지가 모두 로드된 후에 특정 함수를 실행하도록 설정하는 이벤트 핸들러이다.
        // 페이지가 완전히 로드되면 calculateDays() 함수가 호출되어 사용자로부터 날짜를 입력받고,
        // 경과 일수를 계산하여 결과를 화면에 출력한다.
        window.onload = calculateDays;
    </script>
</body>
</html>
