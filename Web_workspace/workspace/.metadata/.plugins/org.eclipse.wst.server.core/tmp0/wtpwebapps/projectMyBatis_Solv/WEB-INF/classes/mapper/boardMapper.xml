<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="boardSQL">
 	
 	<!-- 글쓰기 -->
 	<!-- 새로운 게시글을 작성하는 SQL 문이다. INSERT 문을 사용하여 데이터베이스에 새로운 행(row)을 추가한다. 
 	     여기서 'board' 테이블의 'seq', 'id', 'name', 'email', 'subject', 'content', 'ref'라는 컬럼들에 값을 삽입한다.
 	     'seq_board.NEXTVAL'은 시퀀스를 사용하여 'seq' 컬럼에 자동으로 고유한 값이 들어가도록 하고,
 	     #{id}, #{name}, #{email}, #{subject}, #{ref}는 MyBatis에서 전달된 파라미터 값이다. 
 	     시퀀스는 데이터베이스에서 고유한 값(주로 증가하는 숫자)을 자동으로 생성해주는 객체다.
 	     마지막으로 'seq_board.CURRVAL'은 바로 앞에 생성된 시퀀스 값을 다시 참조하여 'ref' 값으로 사용한다. 
 	     이를 통해 게시글의 참조 값이 설정된다. -->
 	<insert id="boardWrite" parameterType="java.util.Map" >
 		INSERT INTO board (seq, id, name, email, subject, content, ref) 
		VALUES (seq_board.NEXTVAL, #{id}, #{name}, #{email}, #{subject}, #{ref}, seq_board.CURRVAL)
 	</insert>
 	
 	
 	<!-- 총 글수 -->
 	<!-- 'board' 테이블에 저장된 전체 게시글의 개수를 조회하는 SQL 문이다.
 	     'select count(*) from board'는 'board' 테이블의 모든 행을 세어 그 개수를 반환한다.
 	     결과 타입은 'int'로 설정되어 있으며, 이는 총 게시글 수가 정수형으로 반환된다는 것을 의미한다. -->
 	<select id="getTotalA" resultType="int">
 		select count(*) from board
 	</select>
 	
 	<!-- 글 목록 -->
 	<!-- 게시글의 목록을 조회하는 SQL 문이다.
 	     파라미터 타입은 'java.util.Map'이며, 이는 여러 파라미터가 전달될 수 있음을 의미한다.
 	     결과 타입은 'board'로, 반환되는 데이터가 'board' 객체에 매핑된다.
 	     <![CDATA[]]> 구문은 SQL 구문 안에서 특수문자나 예약어를 사용하고자 할 때 사용한다.
 	     SQL 문 내에서 게시글을 조회하는 방식은 'rownum'을 사용하여 페이징 처리를 하는 방식이다.
 	     'rownum'은 오라클에서 행의 순서를 매기는 가상 컬럼이다.
 	     먼저 'select * from board order by ref desc, step asc'를 통해 'board' 테이블의 데이터를 
 	     'ref' 값을 기준으로 내림차순(desc) 정렬하고, 'step' 값을 기준으로 오름차순(asc) 정렬한다.
 	     이 정렬된 데이터를 'tt'라는 임시 테이블에 저장하고, 
 	     'rownum'을 붙여서 'rn'이라는 가상 컬럼을 생성한 뒤 'rn'이 #{startNum} 이상 #{endNum} 이하인 데이터만 조회한다.
 	     이 방식으로 페이징 처리를 하여 필요한 범위의 게시글만 가져올 수 있다. -->
 	<select id="boardList" parameterType="java.util.Map" resultType="board">
 		<![CDATA[
 		select * from
				(select rownum rn, tt.* from
				(select * from board order by ref desc, step asc)tt
				)where rn >= #{startNum} and rn <= #{endNum} 
				]]>
 	</select>
 	
 	<!-- 기존 주석 설명: between 은 이상, 이하만 가능 -->
 	<!-- 'between' 구문은 특정 범위 내의 값을 조회할 때 사용되며, 여기서는 #{startNum}과 #{endNum} 사이의 값을 조회한다. 
 	     'between' 구문은 '>= and <='와 동일하게 동작하지만, 더 간결하게 쓸 수 있는 방식이다. -->
 	<!-- 아래는 '>= and &lt;' 를 사용한 예시이며, 여기서 '<='는 XML에서 특수문자 처리를 위해 '&lt;'로 표시되었다. 
 	     XML 파일에서는 '<'나 '>'와 같은 특수문자를 그대로 사용할 수 없기 때문에 이런 방식으로 대체해야 한다. -->
 		 	<!-- select * from
				(select rownum rn, tt.* from
				(select * from board order by ref desc, step asc)tt
				)where rn between #{startNum} and #{endNum} -->
				
				<!-- >= and &lt; 
				 select * from
				(select rownum rn, tt.* from
				(select * from board order by ref desc, step asc)tt
				)where rn >= #{startNum} and rn &lt;= #{endNum} -->
 	
 </mapper>