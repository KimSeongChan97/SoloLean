/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-09 05:01:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.dao.BoardDAO_lean;
import java.util.HashMap;
import java.util.Map;

public final class boardWrite_005flean_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("board.dao.BoardDAO_lean");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("   \r\n");
      out.write("\r\n");

    // 한글 인코딩
    request.setCharacterEncoding("UTF-8");
    // **기존 주석**: 클라이언트가 보낸 데이터를 UTF-8로 인코딩하여 한글이 깨지지 않도록 처리합니다.
    // **추가 주석**: 웹 페이지에서 한글 데이터를 주고받을 때 인코딩 처리를 해주지 않으면, 서버에서 한글이 깨져서 처리될 수 있습니다. 
    // `setCharacterEncoding("UTF-8")`은 UTF-8로 모든 데이터를 인코딩해주는 역할을 합니다.
    
    // 데이터
    // 클라이언트가 form을 통해 보낸 데이터를 서버에서 받습니다.
    // 'subject'와 'content'는 form에서 전달된 파라미터를 통해 얻어옵니다.
    String subject = request.getParameter("subject");
    String content = request.getParameter("content");	
    // **기존 주석**: form에서 전송된 'subject'와 'content' 파라미터의 값을 가져옵니다.
    // **추가 주석**: `request.getParameter()`는 클라이언트가 전송한 폼 데이터에서 특정 필드의 값을 읽어옵니다. 
    // 이 경우 사용자가 게시판에서 입력한 제목과 내용을 가져오게 됩니다. 예를 들어 사용자가 제목 필드에 'Hello'라고 입력했다면, 
    // `subject` 변수에는 'Hello'가 저장됩니다.
    
    // 세션에서 로그인한 사용자의 정보를 가져옵니다.
    // 세션은 서버에 저장된 사용자별 데이터를 유지하는 공간입니다.
    // 'memId', 'memName', 'memEmail'은 사용자가 로그인할 때 세션에 저장된 정보입니다.
    // 이를 통해 로그인한 사용자의 ID, 이름, 이메일 정보를 가져옵니다.
    String id = (String)session.getAttribute("memId");
    String name = (String)session.getAttribute("memName");
    String email = (String)session.getAttribute("memEmail");
    // **기존 주석**: 로그인한 사용자의 ID, 이름, 이메일 정보를 세션에서 가져옵니다.
    // **추가 주석**: 세션은 사용자별로 데이터를 유지할 수 있는 공간입니다. 서버는 사용자가 웹 사이트에 접속해 로그인하면, 그 세션에 로그인 정보를 저장하게 됩니다. 
    // 이 정보를 이용해 페이지를 이동하더라도 로그인 상태를 유지할 수 있습니다. 
    // `session.getAttribute("key")`는 세션에서 특정 데이터를 가져오는 메서드로, 여기에선 'memId', 'memName', 'memEmail'이라는 세션 데이터를 불러옵니다.
    
    // 데이터를 맵(Map) 객체에 저장합니다.
    // Map은 key와 value로 데이터를 저장하는 자료구조로, 여기서는 'id', 'name', 'email', 'subject', 'content' 같은 key를 사용하여
    // 각각의 데이터를 대응시키고 있습니다. 이를 통해 데이터를 한꺼번에 쉽게 관리할 수 있습니다.
    // 예를 들어, map.put("id", id);는 'id'라는 key에 로그인한 사용자의 ID 값을 저장하는 역할을 합니다.
    Map<String, String> map = new HashMap<>();
    map.put("id", id);
    map.put("name", name);
    map.put("email", email);
    map.put("subject", subject);
    map.put("content", content);
    // **기존 주석**: 사용자의 ID, 이름, 이메일, 제목, 내용을 맵(Map)에 저장합니다.
    // **추가 주석**: `Map`은 key-value 쌍으로 데이터를 저장하는 자료구조입니다. 여기서 key는 "id", "name", "email", "subject", "content"이며, 
    // 이 키에 해당하는 값은 각각 로그인한 사용자의 정보와 게시글 작성 데이터를 의미합니다. 
    // 예를 들어 `map.put("id", id)`는 'id'라는 키에 로그인한 사용자의 ID를 저장해, 이후 DB에 저장하거나 다른 처리를 할 때 유용하게 사용할 수 있습니다.
    
    //DB
    BoardDAO_lean boardDAO_lean = BoardDAO_lean.getInstance();
    boardDAO_lean.boardWrite(map);
    // **기존 주석**: 싱글톤 패턴으로 설계된 BoardDAO_lean 객체를 가져와 글쓰기를 처리합니다.
    // **추가 주석**: `BoardDAO_lean.getInstance()`는 싱글톤 패턴을 사용해 객체를 한 번만 생성하여 시스템 전역에서 재사용할 수 있게 합니다. 
    // 이로 인해 불필요한 객체 생성을 방지하고, DB 작업을 효율적으로 처리할 수 있습니다.
    // `boardWrite(map)` 메서드를 호출하여 맵(Map)에 저장된 데이터를 데이터베이스에 저장하는 작업을 수행합니다.

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
