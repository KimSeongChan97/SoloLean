/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-09 04:40:03 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.dao.BoardDAO;
import board.bean.BoardDTO;
import java.util.List;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.dao.BoardDAO");
    _jspx_imports_classes.add("board.bean.BoardDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>게시글 목록</title>\r\n");
      out.write("    <!-- 게시글 목록에 대한 스타일을 정의한 외부 CSS 파일을 연결합니다. \r\n");
      out.write("         \"/projectJSP/css/boardList.css\" 경로에 있는 CSS 파일을 로드하여, 페이지 스타일을 적용합니다. -->\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"/projectJSP/css/boardList.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <!-- 네비게이션 바를 포함합니다. 'nav.jsp' 파일을 삽입하여 상단 네비게이션 바가 나타나도록 합니다. \r\n");
      out.write("         이를 통해 다른 페이지로 쉽게 이동할 수 있습니다. -->\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/jsp/nav.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- 제목을 가운데 정렬하고, 클릭 시 메인 페이지('index.jsp')로 이동하는 h2 태그입니다. \r\n");
      out.write("         Comic Sans MS 폰트를 사용하여 제목을 꾸몄습니다. -->\r\n");
      out.write("    <h2 align=\"center\" style=\"font-family: 'Comic Sans MS';\" onclick=\"location.href='../index.jsp'\">N o t e </h2>\r\n");
      out.write("\r\n");
      out.write("    ");

        // 페이징 관련 변수 설정
        // 현재 페이지 번호를 URL에서 가져옵니다. 만약 'page' 파라미터가 없으면 기본값으로 1페이지로 설정됩니다.
        int currentPage = (request.getParameter("page") != null) ? Integer.parseInt(request.getParameter("page")) : 1; 

        // 한 페이지에 표시할 게시글 수를 설정합니다. 여기서는 한 페이지당 5개의 게시글을 표시합니다.
        int postsPerPage = 5;

        // DAO를 통해 데이터베이스에 저장된 총 게시글 수를 가져옵니다. 이 값은 페이징 계산에 사용됩니다.
        int totalPosts = BoardDAO.getInstance().getTotalPosts();

        // 총 페이지 수를 계산합니다. 전체 게시글 수를 페이지당 게시글 수로 나누고, 소수점이 있으면 올림 처리를 합니다.
        int totalPages = (int)Math.ceil((double)totalPosts / postsPerPage); 

        // 현재 페이지를 기준으로 시작 페이지 번호를 설정합니다. 현재 페이지가 1이라면 startPage는 1로 설정됩니다.
        // 페이지네이션에서 몇 페이지부터 보여줄지를 결정합니다.
        int startPage = Math.max(1, currentPage - 2); 

        // 끝 페이지 번호를 설정합니다. 현재 페이지를 기준으로 다음 2개의 페이지까지를 보여주며, 총 페이지 수를 넘지 않도록 합니다.
        int endPage = Math.min(totalPages, currentPage + 2); 

        // DAO를 통해 현재 페이지에 해당하는 게시글 목록을 가져옵니다.
        // 'currentPage'와 'postsPerPage'를 매개변수로 하여, 해당 페이지에 맞는 게시글만 불러옵니다.
        BoardDAO boardDAO = BoardDAO.getInstance();
        List<BoardDTO> boardList = boardDAO.getBoardListByPage(currentPage, postsPerPage);
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- 게시글 목록을 보여주는 테이블입니다. 테이블은 100% 너비로 설정되며, 각 게시글의 정보가 행(row) 단위로 표시됩니다. -->\r\n");
      out.write("    <table border=\"1\" style=\"width: 100%;\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <!-- 테이블 헤더 부분. 게시글 목록의 각 항목(번호, 제목, 작성자, 작성일, 조회수)에 해당하는 열의 제목을 표시합니다. -->\r\n");
      out.write("            <th>번호</th>\r\n");
      out.write("            <th>제목</th>\r\n");
      out.write("            <th>작성자</th>\r\n");
      out.write("            <th>작성일</th>\r\n");
      out.write("            <th>조회수</th>\r\n");
      out.write("        </tr>\r\n");
      out.write("\r\n");
      out.write("        ");

            // 가져온 게시글 목록(boardList)을 하나씩 순회하면서 각 게시글의 정보를 테이블에 출력합니다.
            // boardList는 BoardDTO 객체들의 리스트로, 각 객체에는 하나의 게시글 정보가 담겨 있습니다.
            for (BoardDTO board : boardList) {
        
      out.write("\r\n");
      out.write("        <tr>\r\n");
      out.write("            <!-- 게시글 번호(seq)를 테이블에 표시합니다. 이는 게시글 고유의 식별자 역할을 합니다. -->\r\n");
      out.write("            <td>");
      out.print( board.getSeq() );
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("            <!-- 제목을 클릭하면 해당 게시글의 상세 페이지(boardView.jsp)로 이동하게 합니다. \r\n");
      out.write("                 링크의 URL에 게시글 번호(seq)를 파라미터로 전달하여, 클릭한 게시글의 내용을 조회할 수 있도록 합니다. -->\r\n");
      out.write("            <td><a href=\"boardView.jsp?seq=");
      out.print( board.getSeq() );
      out.write('"');
      out.write('>');
      out.print( board.getSubject() );
      out.write("</a></td>\r\n");
      out.write("\r\n");
      out.write("            <!-- 작성자의 이름(name)을 표시합니다. -->\r\n");
      out.write("            <td>");
      out.print( board.getName() );
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("            <!-- 게시글이 작성된 날짜(logtime)를 표시합니다. -->\r\n");
      out.write("            <td>");
      out.print( board.getLogtime() );
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("            <!-- 게시글의 조회수(hit)를 표시합니다. -->\r\n");
      out.write("            <td>");
      out.print( board.getHit() );
      out.write("</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <!-- 페이징 처리 부분입니다. 페이지네이션을 구현하여 사용자가 여러 페이지를 쉽게 이동할 수 있도록 합니다. -->\r\n");
      out.write("    <nav aria-label=\"Page navigation\" class=\"pagination-nav\" style=\"margin-top: 20px;\">\r\n");
      out.write("      <ul class=\"pagination justify-content-center\">\r\n");
      out.write("        <!-- 이전 페이지로 이동하는 버튼입니다. 현재 페이지가 1페이지이면 비활성화(disabled)됩니다. -->\r\n");
      out.write("        <li class=\"page-item ");
      out.print( (currentPage == 1) ? "disabled" : "" );
      out.write("\">\r\n");
      out.write("          <!-- 이전 페이지로 이동하는 링크입니다. 현재 페이지에서 1을 뺀 페이지로 이동합니다. -->\r\n");
      out.write("          <a class=\"page-link\" href=\"?page=");
      out.print( (currentPage > 1) ? currentPage - 1 : 1 );
      out.write("\" aria-label=\"Previous\">\r\n");
      out.write("            <!-- << 기호를 사용하여 이전 페이지를 나타냅니다. -->\r\n");
      out.write("            <span aria-hidden=\"true\">&laquo;</span>\r\n");
      out.write("          </a>\r\n");
      out.write("        </li>\r\n");
      out.write("\r\n");
      out.write("        <!-- 현재 페이지 기준으로 startPage부터 endPage까지의 페이지 번호를 동적으로 생성하여 표시합니다. -->\r\n");
      out.write("        ");

            // startPage부터 endPage까지의 페이지 번호를 순회하면서 페이지 버튼을 생성합니다.
            for (int i = startPage; i <= endPage; i++) {
        
      out.write("\r\n");
      out.write("        <!-- 현재 페이지를 나타내는 버튼은 active 클래스를 추가하여 시각적으로 강조합니다. -->\r\n");
      out.write("        <li class=\"page-item ");
      out.print( (i == currentPage) ? "active" : "" );
      out.write("\">\r\n");
      out.write("          <!-- 각 페이지 번호에 맞는 링크를 생성하여 클릭 시 해당 페이지로 이동하도록 합니다. -->\r\n");
      out.write("          <a class=\"page-link\" href=\"?page=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a>\r\n");
      out.write("        </li>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <!-- 다음 페이지로 이동하는 버튼입니다. 현재 페이지가 마지막 페이지(totalPages)이면 비활성화(disabled)됩니다. -->\r\n");
      out.write("        <li class=\"page-item ");
      out.print( (currentPage == totalPages) ? "disabled" : "" );
      out.write("\">\r\n");
      out.write("          <!-- 다음 페이지로 이동하는 링크입니다. 현재 페이지에서 1을 더한 페이지로 이동합니다. -->\r\n");
      out.write("          <a class=\"page-link\" href=\"?page=");
      out.print( (currentPage < totalPages) ? currentPage + 1 : totalPages );
      out.write("\" aria-label=\"Next\">\r\n");
      out.write("            <!-- >> 기호를 사용하여 다음 페이지를 나타냅니다. -->\r\n");
      out.write("            <span aria-hidden=\"true\">&raquo;</span>\r\n");
      out.write("          </a>\r\n");
      out.write("        </li>\r\n");
      out.write("      </ul>\r\n");
      out.write("    </nav>\r\n");
      out.write("\r\n");
      out.write("    <!-- jQuery 라이브러리 파일을 로드하여 페이지에서 다양한 이벤트 처리가 가능하도록 합니다. \r\n");
      out.write("         이는 자바스크립트의 간단한 DOM 조작 및 이벤트 처리를 쉽게 만들어 줍니다. -->\r\n");
      out.write("    <script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
