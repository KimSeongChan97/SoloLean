/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-10 06:21:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.dao.MemberDAO;

public final class checkId_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("member.dao.MemberDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");

    // 클라이언트가 입력한 id 값을 가져옴
    // 사용자가 입력한 id를 파라미터로 가져옴. 이때 getParameter() 메서드를 사용하여 폼 데이터에서 "id" 값을 추출합니다.
    String id = request.getParameter("id");
	System.out.println("Received ID: " + id); // 받은 id를 콘솔에 출력해 디버깅에 활용

    // MemberDAO 객체 생성 및 DB 연결 (싱글톤 패턴을 사용한 경우)
    // getInstance()를 통해 싱글톤으로 만들어진 MemberDAO 객체를 가져옵니다. 이는 DB와의 연결을 위해 사용됩니다.
    MemberDAO memberDAO = MemberDAO.getInstance(); // 싱글톤 객체 가져오기

    // id 중복 여부 확인 (true: 중복됨, false: 사용 가능)
    // idExistId 메서드를 사용하여 해당 id가 데이터베이스에 있는지 확인합니다. true이면 중복된 ID, false이면 사용 가능한 ID입니다.
    boolean exist = memberDAO.idExistId(id); // idExist 메서드는 해당 id가 DB에 있는지 확인

      out.write("\r\n");
      out.write("     \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ID 중복체크</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

    // 존재 여부에 따른 메시지 출력
    // id 중복 여부에 따라 다른 메시지를 출력합니다.
    if (exist) { // id가 이미 존재하는 경우

      out.write("\r\n");
      out.write("    <p>");
      out.print(id );
      out.write(" 은(는) 이미 사용 중인 아이디입니다. 다른 아이디를 입력하세요.</p>\r\n");
      out.write("    <!-- 중복된 아이디라는 메시지를 사용자에게 보여줍니다. -->\r\n");
      out.write("    <br><br>\r\n");
      out.write("    <form action=\"checkId.jsp\"> <!-- 사용자가 다시 ID를 입력할 수 있도록 폼을 제공 -->\r\n");
      out.write("    아이디 입력 <input type=\"text\" name=\"id\" /> <!-- id 입력 필드 -->\r\n");
      out.write("    <input type=\"submit\" value=\"중복체크\" /> <!-- 다시 중복 체크를 할 수 있는 버튼 -->\r\n");
      out.write("    </form>\r\n");
 
    } else { // id가 사용 가능한 경우

      out.write("\r\n");
      out.write("    ");
      out.print(id );
      out.write(" 은(는) 사용 가능한 아이디입니다. 계속 진행해주세요.\r\n");
      out.write("    <!-- 사용 가능한 아이디라는 메시지를 사용자에게 보여줍니다. -->\r\n");
      out.write("    <br><br>\r\n");
      out.write("    <input type=\"button\" value=\"사용하기\" onclick=\"checkIdClose('");
      out.print(id );
      out.write("')\"/> \r\n");
      out.write("    <!-- 사용자가 해당 ID를 사용하기로 결정하면 '사용하기' 버튼을 클릭하고, checkIdClose() 함수를 호출합니다. -->\r\n");
 
    } 

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- JavaScript 함수 정의 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function checkIdClose(id){\r\n");
      out.write("	// 부모 창의 id 입력 필드에 선택된 id 값을 설정함\r\n");
      out.write("	// opener는 팝업 창을 열었던 부모 창을 의미하며, 부모 창의 특정 필드에 접근할 수 있습니다.\r\n");
      out.write("	opener.document.getElementById(\"id\").value = id;\r\n");
      out.write("	opener.document.getElementById(\"check\").value = id;\r\n");
      out.write("    // 팝업 창을 닫습니다.\r\n");
      out.write("	window.close();\r\n");
      out.write("    \r\n");
      out.write("    // 부모 창의 비밀번호 입력 필드로 포커스를 이동시킴\r\n");
      out.write("	opener.document.getElementById(\"pwd\").focus();\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
