/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-24 00:58:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.imageboard;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class imageboardWriteForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>이미지 등록 페이지</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("    href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/index.css\">\r\n");
      out.write("    <!-- 스타일 시트를 불러와서 페이지의 기본 레이아웃을 설정하는 css 파일 -->\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("    href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/imageboardWriteForm.css\">\r\n");
      out.write("    <!-- 추가적인 스타일 시트를 불러와서 이 폼에 대한 커스텀 스타일 적용 -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"wrap\">\r\n");
      out.write("        <div id=\"header\">\r\n");
      out.write("            <!-- 페이지의 상단 헤더 영역입니다. -->\r\n");
      out.write("            <h1>\r\n");
      out.write("                <img alt=\"사과\"\r\n");
      out.write("                    src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/image/apple.png\"\r\n");
      out.write("                    width=\"50\" height=\"50\"\r\n");
      out.write("                    onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/index.do'\"\r\n");
      out.write("                    style=\"cursor: pointer;\"> \r\n");
      out.write("                <!-- 클릭 시 index.do로 이동하는 이벤트가 설정된 로고 이미지 -->\r\n");
      out.write("                MVC를 활용한 미니프로젝트\r\n");
      out.write("            </h1>\r\n");
      out.write("            <hr style=\"border-color: #483D8B; border-width: 5px;\" />\r\n");
      out.write("            <!-- 페이지 상단에 구분선을 추가하여 스타일링 -->\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div id=\"container\">\r\n");
      out.write("            ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../main/imageboardMenu.jsp", out, false);
      out.write("\r\n");
      out.write("            <!-- JSP의 다른 페이지를 포함하여 재사용성 향상 (네비게이션 메뉴 포함) -->\r\n");
      out.write("\r\n");
      out.write("            <div id=\"section\">\r\n");
      out.write("                <form id=\"imageboardWriteForm\" method=\"post\"\r\n");
      out.write("                    enctype=\"multipart/form-data\" action=\"/projectMVC/imageboard/imageboardWrite.do\">\r\n");
      out.write("                    <!-- enctype=\"multipart/form-data\" 는 파일 업로드를 위한 폼 설정 -->\r\n");
      out.write("                    <table border=\"1\">\r\n");
      out.write("                        <!-- 테이블을 사용하여 입력 폼을 구성 -->\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th width=\"100\">상품코드</th>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <input type=\"text\" id=\"imageId\" name=\"imageId\" size=\"70\"\r\n");
      out.write("                                    placeholder=\"제목 입력\">\r\n");
      out.write("                                <!-- 상품 코드를 입력받는 필드 -->\r\n");
      out.write("                                <div id=\"subjectDiv\"></div>\r\n");
      out.write("                                <!-- 입력 유효성 검사 등을 위해 추가한 DIV -->\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th width=\"100\">상품명</th>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <input type=\"text\" id=\"imageName\" name=\"imageName\" size=\"70\"\r\n");
      out.write("                                    placeholder=\"제목 입력\">\r\n");
      out.write("                                <!-- 상품명을 입력받는 필드 -->\r\n");
      out.write("                                <div id=\"subjectDiv\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th width=\"100\">상품단가</th>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <input type=\"text\" id=\"imagePrice\" name=\"imagePrice\" size=\"70\"\r\n");
      out.write("                                    placeholder=\"제목 입력\">\r\n");
      out.write("                                <!-- 상품 단가를 입력받는 필드 -->\r\n");
      out.write("                                <div id=\"subjectDiv\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th width=\"100\">상품수량</th>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <input type=\"text\" id=\"imageQty\" name=\"imageQty\" size=\"70\"\r\n");
      out.write("                                    placeholder=\"제목 입력\">\r\n");
      out.write("                                <!-- 상품 수량을 입력받는 필드 -->\r\n");
      out.write("                                <div id=\"subjectDiv\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th>상품 내용</th>\r\n");
      out.write("                            <td>\r\n");
      out.write("                                <textarea id=\"imageContent\" name=\"imageContent\"\r\n");
      out.write("                                    rows=\"10\" cols=\"50\"></textarea>\r\n");
      out.write("                                <!-- 상품에 대한 설명을 입력하는 textarea -->\r\n");
      out.write("                                <div id=\"imageContentDiv\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td colspan=\"2\">\r\n");
      out.write("                                <img id=\"showImg\" width=\"70\" height=\"70\">&emsp;\r\n");
      out.write("                                <!-- 사용자가 업로드한 이미지를 미리 보여줄 영역 -->\r\n");
      out.write("                                \r\n");
      out.write("                                <img src=\"../image/camera.png\" alt=\"카메라\" id=\"camera\" width=\"50\"\r\n");
      out.write("                                    height=\"50\"> \r\n");
      out.write("                                <!-- 파일 선택을 위한 아이콘 역할을 하는 카메라 이미지 -->\r\n");
      out.write("                                \r\n");
      out.write("                                <input type=\"file\" id=\"image1\" name=\"image1\"\r\n");
      out.write("                                    style=\"visibility: hidden;\">\r\n");
      out.write("                                <!-- 실제 파일 업로드 필드로 숨김 처리됨, 카메라 클릭 시 열림 -->\r\n");
      out.write("                                \r\n");
      out.write("                                <div id=\"image1Div\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td colspan=\"2\" class=\"table-buttons\">\r\n");
      out.write("                            	<input type=\"submit\" value=\"이미지 등록\">\r\n");
      out.write("                                <!-- <input type=\"button\" value=\"이미지 등록\" id=\"imageboardWriteBtn\"> -->\r\n");
      out.write("                                <!-- 이미지 등록을 위한 버튼 -->\r\n");
      out.write("                                \r\n");
      out.write("                                <input type=\"reset\" value=\"다시작성\">\r\n");
      out.write("                                <!-- 입력한 내용을 초기화하는 버튼 -->\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </table>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    <script src=\"http://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("    <!-- jQuery 라이브러리 로드 -->\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("    $('#camera').click(function(){\r\n");
      out.write("        // 카메라 아이콘을 클릭하면 파일 선택 창이 열리도록 함\r\n");
      out.write("        $('#image1').trigger('click');\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    // 사용자가 파일을 선택하면 선택된 파일의 이미지를 보여줌\r\n");
      out.write("    $('#image1').change(function(){\r\n");
      out.write("        readURL(this);\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    function readURL(input){\r\n");
      out.write("        var reader = new FileReader();\r\n");
      out.write("        // FileReader 객체를 사용하여 파일을 비동기적으로 읽어옴\r\n");
      out.write("        \r\n");
      out.write("        reader.onload = function(e){\r\n");
      out.write("            $('#showImg').attr('src', e.target.result); \r\n");
      out.write("            // 파일이 로드되면 미리보기 이미지의 src 속성을 변경하여 보여줌\r\n");
      out.write("        }\r\n");
      out.write("        reader.readAsDataURL(input.files[0]); \r\n");
      out.write("        // 선택한 파일을 데이터 URL 형식으로 읽어옴 (이미지 미리보기에 적합)\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    $('#imageboardWriteBtn').click(function(){\r\n");
      out.write("    		\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("FileReader 란?\r\n");
      out.write("FileReader는 type이 file인 input 태그 또는 API 요청과 같은 인터페이스를 통해 \r\n");
      out.write("File 또는 Blob 객체를 편리하게 처리할수있는 방법을 제공하는 객체이며\r\n");
      out.write("abort, load, error와 같은 이벤트에서 발생한 프로세스를 처리하는데 주로 사용되며,\r\n");
      out.write("File 또는 Blob 객체를 읽어서 result 속성에 저장한다.\r\n");
      out.write("\r\n");
      out.write("FileReader도 비동기로 동작한다.\r\n");
      out.write("\r\n");
      out.write("FileReader.onload()\r\n");
      out.write("load 이벤트의 핸들러. 이 이벤트는 읽기 동작이 성공적으로 완료되었을 때마다 발생한다.\r\n");
      out.write("\r\n");
      out.write("파일업로드\r\n");
      out.write("- 파일을 업로드 하기 위해서는 반드시 post 방식이여야 한다.\r\n");
      out.write("- enctype=\"multipart/form-data\" 지정해야 한다.\r\n");
      out.write("- <input type=\"file\" />\r\n");
      out.write("- *.jar 필요하다.(cos-05Nov2002.jar)\r\n");
      out.write("- storage 폴더 작성\r\n");
      out.write("1. 가상폴더 : D:\\Web\\workspace\\projectMVC\\src\\main\\webapp\\storage\r\n");
      out.write("2. 실제폴더 : D:\\Web\\workspace\\.metadata\\.plugin\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("-->\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
