/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-10 06:21:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.dao.BoardDAO_lean;
import board.bean.BoardDTO;
import java.util.List;
import board.bean.BoardPaging;

public final class boardList_005flean_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("board.bean.BoardPaging");
    _jspx_imports_classes.add("board.dao.BoardDAO_lean");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.bean.BoardDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    ");

    // 'pg' 파라미터를 request에서 받아옵니다. 이는 현재 페이지 번호를 나타냅니다.
    // 사용자가 특정 페이지 번호를 클릭했을 때, 그 페이지 번호를 'pg'로 전달받아 처리합니다.
    int pg = Integer.parseInt(request.getParameter("pg"));
    
    // 한 페이지당 표시할 게시글 수를 5개로 설정합니다.
    // 따라서 'pg'에 따라 계산된 startNum과 endNum으로 해당 페이지에 표시될 게시글을 가져옵니다.
    int endNum = pg * 5; // 현재 페이지에서 끝 번호를 계산합니다. 5개씩 보여주므로 예를 들어, 1페이지는 1~5번 글을 가져옵니다.
    // startNum은 endNum에서 4를 뺀 값으로, 예를 들어 1페이지의 경우 1부터 시작하게 됩니다.
    int startNum = endNum - 4; // 시작 번호는 끝 번호에서 4를 뺀 값이 됩니다. 즉, 1페이지는 1번부터 시작하게 됩니다.

    // 데이터베이스에서 게시글을 가져오기 위해 BoardDAO_lean 객체를 생성합니다.
    // Singleton 패턴을 사용하여 하나의 인스턴스만 사용하도록 보장합니다.
    BoardDAO_lean boardDAO_lean = BoardDAO_lean.getInstance(); 
    // boardList 메서드를 호출하여 startNum과 endNum에 해당하는 게시글 목록을 가져옵니다.
    // 이 메서드는 해당 페이지에 보여줄 게시글을 DB에서 가져오는 역할을 합니다.
    List<BoardDTO> list = boardDAO_lean.boardList(startNum, endNum);
    
    // 페이징 처리
    // 전체 게시글 수(totalA)를 가져오기 위해 BoardDAO_lean 클래스의 getTotalA() 메서드를 호출합니다.
    // 이 값은 전체 페이지 수를 계산하는 데 사용됩니다.
    int totalA = boardDAO_lean.getTotalA();
    
    // BoardPaging 객체를 생성하여 페이징 처리를 설정합니다.
    BoardPaging boardPaging = new BoardPaging();
	    
    // 현재 페이지를 설정합니다. 사용자가 보고 있는 페이지 번호입니다.
    boardPaging.setCurrentPage(pg);
    // 페이지 블록 수를 3으로 설정합니다. 즉, 한 번에 3개의 페이지 번호를 보여줍니다.
    boardPaging.setPageBlock(3);
    // 한 페이지당 5개의 게시글을 표시하도록 설정합니다.
    boardPaging.setPageSize(5);
    // 전체 게시글 수를 설정합니다. 이 값은 전체 페이지 수를 계산하는 데 사용됩니다.
    boardPaging.setTotalA(totalA);
    
    // 페이징 HTML을 생성하는 메서드를 호출합니다.
    // 이 메서드는 현재 페이지, 총 페이지 수, 그리고 이전/다음 버튼을 포함하는 HTML 코드를 생성합니다.
    boardPaging.makePagingHTML();
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판 목록</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table {\r\n");
      out.write("    border-collapse: collapse; /* 테이블의 셀 간 경계선을 하나로 합칩니다 */\r\n");
      out.write("}\r\n");
      out.write("th, td{\r\n");
      out.write("    padding:7px; /* 셀 안의 내용을 일정한 간격으로 배치하여 가독성을 높입니다 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#currentPaging {\r\n");
      out.write("    /* 현재 페이지를 표시하는 스타일 */\r\n");
      out.write("	border: 1px solid blue;\r\n");
      out.write("	color: red;\r\n");
      out.write("	font-size: 15pt;\r\n");
      out.write("	padding: 5px 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#paging {\r\n");
      out.write("    /* 다른 페이지 번호를 표시하는 스타일 */\r\n");
      out.write("	border: 1px solid blue;\r\n");
      out.write("	color: black;\r\n");
      out.write("	font-size: 15pt;\r\n");
      out.write("	padding: 5px 8px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("span:hover {\r\n");
      out.write("	text-decoration: underline; /* 마우스를 올렸을 때 밑줄 표시 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<!-- 게시글 목록을 테이블로 표시합니다. -->\r\n");
      out.write("	<!-- 테이블을 사용하여 데이터를 행과 열로 나누어 보여줍니다. -->\r\n");
      out.write("	<table border=\"1\" frame=\"hsides\" >\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"100\"> 글번호 </th> <!-- 각 열의 제목을 설정합니다. 글 번호, 제목, 작성자 등 게시글 정보를 표시할 것입니다. -->\r\n");
      out.write("			<th width=\"400\"> 제목 </th>\r\n");
      out.write("			<th width=\"150\"> 작성자 </th>\r\n");
      out.write("			<th width=\"150\"> 작성일 </th>\r\n");
      out.write("			<th width=\"100\"> 조회수 </th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		<!-- list가 null이 아니면, 즉 게시글 목록이 있을 때 테이블에 게시글을 출력합니다. -->\r\n");
      out.write("		");
 if(list != null){ 
      out.write("\r\n");
      out.write("			<!-- list에 담긴 각 게시글의 정보를 출력합니다. for-each 루프를 사용하여 list에 있는 BoardDTO 객체를 하나씩 가져옵니다. -->\r\n");
      out.write("			");
 for(BoardDTO boardDTO : list) { 
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getSeq() );
      out.write("</td> <!-- 게시글의 고유 번호(seq)를 출력합니다. 이 값은 게시글을 구분하는 키입니다. -->\r\n");
      out.write("					<td>");
      out.print(boardDTO.getSubject() );
      out.write("</td> <!-- 게시글의 제목(subject)을 출력합니다. 제목은 사용자가 클릭하여 상세 페이지로 이동할 때 사용됩니다. -->\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getId() );
      out.write("</td> <!-- 게시글을 작성한 사용자의 ID(id)를 출력합니다. -->\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getLogtime() );
      out.write("</td> <!-- 게시글이 작성된 시간을 출력합니다. -->\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getHit() );
      out.write("</td> <!-- 게시글의 조회수(hit)를 출력합니다. 조회수는 게시글이 얼마나 많이 읽혔는지 나타냅니다. -->\r\n");
      out.write("				</tr>\r\n");
      out.write("				");
 } // for 
      out.write(" <!-- for 루프 종료 -->\r\n");
      out.write("		");
 } // if 
      out.write(" <!-- 게시글 목록이 없으면 아무것도 출력되지 않음 -->\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 사용자가 클릭하면 index.jsp 페이지로 이동하는 버튼 -->\r\n");
      out.write("	<!-- div 태그에 'onclick' 이벤트를 설정하여 사용자가 클릭하면 index.jsp로 이동하도록 설정합니다. -->\r\n");
      out.write("	<div onclick=\"location.href='../index.jsp'\" align=\"center\" style=\"cursor: pointer;\">\r\n");
      out.write("		index로 \r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<hr/> \r\n");
      out.write("	\r\n");
      out.write("	<!-- 페이징 HTML을 가운데 정렬하여 표시합니다. -->\r\n");
      out.write("	<!-- boardPaging 객체에서 생성된 HTML을 출력하여 페이지 번호와 이전/다음 버튼을 표시합니다. -->\r\n");
      out.write("	<div style=\"text-align: center; width: 800px; margin-top: 15px;\" >\r\n");
      out.write("		");
      out.print(boardPaging.getPagingHTML() );
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    // 페이지 번호를 클릭하면 해당 페이지로 이동하는 함수입니다.\r\n");
      out.write("    function boardPaging(pg){\r\n");
      out.write("        // 사용자가 클릭한 페이지 번호를 'pg' 파라미터로 전달하여 해당 페이지로 이동합니다.\r\n");
      out.write("        location.href = \"boardList_lean.jsp?pg=\" + pg;\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
