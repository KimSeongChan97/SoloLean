/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-10 06:38:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.dao.MemberDAO;
import member.bean.MemberDTO;

public final class memberUpdateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("member.dao.MemberDAO");
    _jspx_imports_classes.add("member.bean.MemberDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("   \r\n");
      out.write("    \r\n");
 
    // 로그인된 사용자 세션에서 사용자 ID를 가져옵니다.
    // 'memId'는 세션에 저장된 사용자 ID를 의미하며, 이 값을 사용해 DB에서 회원 정보를 조회합니다.
	String id = (String)session.getAttribute("memId"); 
 	
 	//DB에서 해당 사용자 정보를 가져오기 위해 MemberDAO의 인스턴스를 생성합니다.
 	MemberDAO memberDAO = MemberDAO.getInstance();
 	// getMember() 메서드를 호출하여 로그인된 사용자의 회원 정보를 가져옵니다.
 	MemberDTO memberDTO = memberDAO.getMember(id);
 	 

      out.write("   \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원정보 수정 페이지</title>\r\n");
      out.write("<!-- 회원 정보 수정 페이지의 CSS 파일을 링크합니다. -->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"/projectJSP/css/updatecss.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <!-- 네비게이션 바를 외부 JSP 파일에서 포함시킵니다. -->\r\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/jsp/nav.jsp", out, false);
      out.write("\r\n");
      out.write("    <hr/>\r\n");
      out.write("    <!-- 회원정보 수정 폼입니다. -->\r\n");
      out.write("    <form name=\"updateForm\" >\r\n");
      out.write("        <table>\r\n");
      out.write("            <!-- 로그인한 사용자 정보를 미리 채워서 보여줍니다. -->\r\n");
      out.write("\r\n");
      out.write("            <!-- 이름 입력 필드: 사용자의 이름을 보여주며, 수정 가능합니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>이름</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                <!-- value 속성으로 DB에서 가져온 회원 이름을 미리 보여줍니다. -->\r\n");
      out.write("                <input type=\"text\" name=\"name\" id=\"name\" value=\"");
      out.print(memberDTO.getName() );
      out.write("\" maxlength=\"50\">\r\n");
      out.write("                <div id=\"nameDiv\"></div>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 아이디 필드는 수정할 수 없도록 읽기 전용으로 설정합니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>아이디</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                <!-- 아이디는 변경할 수 없으므로 readonly 속성을 사용합니다. -->\r\n");
      out.write("                <input type=\"text\" name=\"id\" id=\"id\" value=\"");
      out.print(memberDTO.getId() );
      out.write("\" readonly>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 비밀번호 입력 필드: 비밀번호는 새로 입력할 수 있습니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>비밀번호</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                <!-- 새 비밀번호를 입력받는 필드입니다. -->\r\n");
      out.write("                <input type=\"password\" name=\"pwd\" id=\"pwd\" placeholder=\"새 비밀번호 입력\">\r\n");
      out.write("                <div id=\"pwdDiv\"></div>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 비밀번호 재입력 필드: 비밀번호 확인을 위한 필드입니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>재확인</td>\r\n");
      out.write("                <td><input type=\"password\" name=\"repwd\" id=\"repwd\" placeholder=\"비밀번호 재입력\">\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            \r\n");
      out.write("            <!-- 성별 선택 필드: 남성/여성 중 하나를 선택할 수 있습니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>성별</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <!-- 성별을 라디오 버튼으로 표시하며, 서버에서 가져온 값을 기준으로 선택 상태를 설정합니다. -->\r\n");
      out.write("                    <input type=\"radio\" name=\"gender\" value=\"M\" />남자 \r\n");
      out.write("                    <input type=\"radio\" name=\"gender\" value=\"F\" />여자 \r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 이메일 필드: 사용자의 이메일 정보를 보여주고 수정할 수 있습니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>이메일</td>\r\n");
      out.write("                <td class=\"email-field\">\r\n");
      out.write("                    <!-- 이메일 앞부분과 뒷부분을 나누어 입력받습니다. -->\r\n");
      out.write("                    <input type=\"text\" name=\"email1\" id=\"email1\" value=\"");
      out.print(memberDTO.getEmail1() );
      out.write("\" >\r\n");
      out.write("					@\r\n");
      out.write("					<!-- 이메일 도메인은 직접 입력하거나 미리 제공된 목록에서 선택할 수 있습니다. -->\r\n");
      out.write("					<input type=\"text\" name=\"email2\" id=\"email2\" value=\"");
      out.print(memberDTO.getEmail2() );
      out.write("\" list=\"email_list\">\r\n");
      out.write("					\r\n");
      out.write("                    <!-- 이메일 도메인을 선택할 수 있는 리스트를 제공합니다. -->\r\n");
      out.write("                    <datalist id=\"email_list\">\r\n");
      out.write("                        <option value=\"naver.com\"></option>\r\n");
      out.write("                        <option value=\"gmail.com\"></option>\r\n");
      out.write("                        <option value=\"hanmail.com\"></option>\r\n");
      out.write("                        <option value=\"daum.net\"></option>\r\n");
      out.write("                    </datalist>\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 전화번호 입력 필드: 전화번호는 3부분으로 나누어 입력받습니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>휴대전화</td>\r\n");
      out.write("                <td class=\"phone-field\">\r\n");
      out.write("                    <!-- 첫 번째 필드에서는 전화번호 앞자리를 선택할 수 있습니다. -->\r\n");
      out.write("                    <select name=\"tel1\" id=\"tel1\"> \r\n");
      out.write("                        <option value=\"010\">010</option>\r\n");
      out.write("                        <option value=\"011\">011</option>\r\n");
      out.write("                        <option value=\"019\">019</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                    <!-- 전화번호 중간과 마지막 자리는 직접 입력받습니다. -->\r\n");
      out.write("                    -\r\n");
      out.write("                    <input type=\"text\" name=\"tel2\" id=\"tel2\" maxlength=\"4\" value=\"");
      out.print(memberDTO.getTel2() );
      out.write("\">\r\n");
      out.write("                    -\r\n");
      out.write("                    <input type=\"text\" name=\"tel3\" id=\"tel3\" maxlength=\"4\" value=\"");
      out.print(memberDTO.getTel3() );
      out.write("\">\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 주소 입력 필드: 우편번호와 주소를 보여주고 수정할 수 있습니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>주소</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <!-- 우편번호는 읽기 전용 필드로 설정하며, 버튼을 눌러 우편번호 검색을 할 수 있습니다. -->\r\n");
      out.write("                    <input type=\"text\" name=\"zipcode\" id=\"zipcode\" value=\"");
      out.print(memberDTO.getZipcode() );
      out.write("\" readonly placeholder=\"우편번호\">\r\n");
      out.write("                    <input type=\"button\" value=\"우편번호 검색\" onclick=\"checkPost()\">\r\n");
      out.write("                    <br>\r\n");
      out.write("                    <!-- 기본 주소는 읽기 전용 필드로 설정합니다. -->\r\n");
      out.write("                    <input type=\"text\" name=\"addr1\" id=\"addr1\" value=\"");
      out.print(memberDTO.getAddr1() );
      out.write("\" readonly placeholder=\"주소\">\r\n");
      out.write("                    <br>\r\n");
      out.write("                    <!-- 상세 주소는 사용자가 직접 입력할 수 있습니다. -->\r\n");
      out.write("                    <input type=\"text\" name=\"addr2\" id=\"addr2\" value=\"");
      out.print(memberDTO.getAddr2() );
      out.write("\" placeholder=\"상세주소\">\r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("\r\n");
      out.write("            <!-- 수정 버튼과 폼 초기화 버튼을 제공합니다. -->\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td colspan=\"2\" align=\"center\">\r\n");
      out.write("                    <!-- 회원 정보를 수정하는 버튼입니다. -->\r\n");
      out.write("                    <input type=\"button\" value=\"회원정보 수정\" id=\"updateBtn\" /> \r\n");
      out.write("                    <!-- 폼을 초기화하는 리셋 버튼입니다. -->\r\n");
      out.write("                    <input type=\"reset\" value=\"다시 입력\" onclick=\"location.reload()\" /> \r\n");
      out.write("                    <!-- 뒤로 가기 버튼으로, 메인 Main Menu 로 돌아갑니다. -->\r\n");
      out.write("                    <input type=\"button\" value=\"Main Menu\" onclick=\"window.location.href='../index.jsp';\"> \r\n");
      out.write("                </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </table>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("<!-- 외부 JS 파일 및 Daum 우편번호 API를 포함합니다. -->\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script src=\"../js/member.js\"></script>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    // 네비게이션 바를 외부 JSP 파일에서 불러옵니다.\r\n");
      out.write("    $('#navbar').load('/projectJSP/jsp/nav.jsp');\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" >\r\n");
      out.write("	// 페이지가 로드될 때 실행됩니다.\r\n");
      out.write("	window.onload = function() {\r\n");
      out.write("	    // 성별 값을 서버에서 가져옵니다. (남성: M, 여성: F)\r\n");
      out.write("	    var gender = \"");
      out.print( memberDTO.getGender() );
      out.write("\";  \r\n");
      out.write("	 	// 성별 값을 비교하여 해당하는 라디오 버튼을 선택 상태로 만듭니다.\r\n");
      out.write("	    if (gender === \"M\") {\r\n");
      out.write("	        document.updateForm.gender[0].checked = true; // 남성 (첫 번째 radio 버튼 선택)\r\n");
      out.write("	    } else if (gender === \"F\") {\r\n");
      out.write("	        document.updateForm.gender[1].checked = true; // 여성 (두 번째 radio 버튼 선택)\r\n");
      out.write("	    }\r\n");
      out.write("	 	\r\n");
      out.write("	 	// 전화번호 첫 번째 필드 값을 서버에서 가져와서 설정합니다.\r\n");
      out.write("	 	document.updateForm.tel1.value = '");
      out.print(memberDTO.getTel1() );
      out.write("';\r\n");
      out.write("	};\r\n");
      out.write("</script>\r\n");
      out.write("  \r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
