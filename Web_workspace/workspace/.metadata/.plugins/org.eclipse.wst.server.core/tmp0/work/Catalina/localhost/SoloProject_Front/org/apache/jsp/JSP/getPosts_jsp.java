/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-08-30 10:51:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSP;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.io.*;

public final class getPosts_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

    // 데이터베이스 연결을 위한 URL, 사용자 이름, 비밀번호를 설정합니다.
    String dbURL = "jdbc:oracle:thin:@localhost:1521:xe";
    String dbUser = "hr";
    String dbPass = "hr";

    Connection conn = null;  // 데이터베이스 연결 객체
    PreparedStatement pstmt = null;  // SQL 쿼리 실행 객체
    ResultSet rs = null;  // 쿼리 실행 결과를 저장하는 객체

    try {
        // Oracle JDBC 드라이버를 메모리에 로드합니다.
        Class.forName("oracle.jdbc.driver.OracleDriver");
        // 설정된 URL, 사용자 이름, 비밀번호로 데이터베이스에 연결합니다.
        conn = DriverManager.getConnection(dbURL, dbUser, dbPass);

        // 게시글 목록을 가져오는 SQL 쿼리에서 작성자의 이름과 조회수를 가져오도록 수정
        // BOARD 테이블과 MEMBER 테이블을 JOIN하여 게시글 정보와 작성자 이름을 함께 가져옵니다.
        String sql = "SELECT B.SEQ, B.SUBJECT, M.NAME AS WRITER, B.LOGTIME, B.VIEWS FROM BOARD B JOIN MEMBER M ON B.MEMBER_ID = M.MEMBER_ID ORDER BY B.SEQ DESC";
        pstmt = conn.prepareStatement(sql);  // SQL 쿼리를 준비합니다.
        rs = pstmt.executeQuery();  // 쿼리를 실행하고 결과를 ResultSet 객체에 저장합니다.

        // ResultSet을 순회하며 각 게시글의 정보를 가져와 출력합니다.
        while (rs.next()) {
            int seq = rs.getInt("SEQ");  // 게시글 번호를 가져옵니다.
            String subject = rs.getString("SUBJECT");  // 게시글 제목을 가져옵니다.
            String writer = rs.getString("WRITER"); // 작성자 이름을 가져옵니다.
            String logtime = rs.getString("LOGTIME");  // 게시글 작성 시간을 가져옵니다.
            int views = rs.getInt("VIEWS");  // 조회수를 가져옵니다.

            // HTML 테이블의 각 행에 게시글 정보를 출력합니다.
            out.println("<tr>");
            out.println("<td>" + seq + "</td>");  // 게시글 번호 출력
            out.println("<td>" + subject + "</td>");  // 게시글 제목 출력
            out.println("<td>" + writer + "</td>"); // 작성자 이름 출력
            out.println("<td>" + logtime + "</td>");  // 게시글 작성 시간 출력
            out.println("<td>" + views + "</td>"); // 조회수 출력
            out.println("<td><a href='JSP/view_post.jsp?seq=" + seq + "'>View</a></td>");  // 게시글 보기 링크 출력
            out.println("</tr>");
        }
    } catch (Exception e) {
        // 예외가 발생한 경우, 예외 정보를 StringWriter와 PrintWriter를 사용하여 문자열로 변환 후 출력합니다.
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        e.printStackTrace(pw);  // 예외 정보를 StringWriter에 출력
        out.println("<pre>" + sw.toString() + "</pre>");  // 예외 정보를 브라우저에 출력
    } finally {
        // 리소스 해제: ResultSet, PreparedStatement, Connection 객체를 닫아줍니다.
        try { if (rs != null) rs.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (pstmt != null) pstmt.close(); } catch (Exception e) { e.printStackTrace(); }
        try { if (conn != null) conn.close(); } catch (Exception e) { e.printStackTrace(); }
    }

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
