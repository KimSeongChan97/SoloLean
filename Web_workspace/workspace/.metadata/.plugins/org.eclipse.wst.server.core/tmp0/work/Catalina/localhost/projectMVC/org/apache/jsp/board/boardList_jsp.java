/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-19 10:27:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.bean.BoardDTO;
import java.util.List;
import board.bean.BoardPaging;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("board.bean.BoardPaging");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.bean.BoardDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>게시판 목록</title>  \r\n");
      out.write("    <!-- 커스텀 CSS 파일을 적용 -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/boardlist.css?v=1.0\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("    <!-- 게시판 목록 테이블 -->\r\n");
      out.write("    <table class=\"table table-dark table-hover\">\r\n");
      out.write("        <thead>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <th scope=\"col\">글번호</th>\r\n");
      out.write("                <th scope=\"col\">제목</th>\r\n");
      out.write("                <th scope=\"col\">작성자</th>\r\n");
      out.write("                <th scope=\"col\">작성일</th>\r\n");
      out.write("                <th scope=\"col\">조회수</th>\r\n");
      out.write("            </tr>\r\n");
      out.write("        </thead>\r\n");
      out.write("        <tbody>\r\n");
      out.write("        ");
 
            // DB에서 가져온 게시글 목록을 출력
            List<BoardDTO> list = (List<BoardDTO>) request.getAttribute("list");
            if (list != null) {
                for (BoardDTO boardDTO : list) { 
        
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td align=\"center\">");
      out.print( boardDTO.getSeq() );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( boardDTO.getSubject() );
      out.write("</td>\r\n");
      out.write("                <td align=\"center\">");
      out.print( boardDTO.getId() );
      out.write("</td>\r\n");
      out.write("                <td align=\"center\">");
      out.print( boardDTO.getLogtime() );
      out.write("</td>\r\n");
      out.write("                <td align=\"center\">");
      out.print( boardDTO.getHit() );
      out.write("</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("        ");
 
                } 
            } 
        
      out.write("\r\n");
      out.write("        </tbody>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("    <!-- 메인 페이지로 이동하는 링크 -->\r\n");
      out.write("    <div onclick=\"location.href='/projectMVC/index.do'\" align=\"center\" style=\"cursor: pointer;\">\r\n");
      out.write("        index로 \r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <hr/>\r\n");
      out.write("\r\n");
      out.write("    <!-- 페이지네이션 표시 부분 -->\r\n");
      out.write("    <div style=\"text-align: center; width: 800px; margin-top: 15px;\">\r\n");
      out.write("        ");
      out.print( ((BoardPaging) request.getAttribute("boardPaging")).getPagingHTML() );
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("<!-- JavaScript를 이용해 페이지를 넘기는 함수 -->\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    // 선택한 페이지로 이동하는 함수\r\n");
      out.write("    function boardPaging(pg) {\r\n");
      out.write("        location.href = \"boardList.do?pg=\" + pg;\r\n");
      out.write("    };\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
