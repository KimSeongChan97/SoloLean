/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-23 02:43:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/D:/Web/workspace/projectMVC/src/main/webapp/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1726024852904L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시글 보기</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/index.css\">\r\n");
      out.write("<!-- 외부 CSS 파일을 연결합니다. pageContext.request.contextPath는 현재 웹 애플리케이션의 컨텍스트 경로를 나타냅니다. \r\n");
      out.write("     예를 들어, 프로젝트가 http://localhost:8080/projectMVC 라는 URL로 서비스되고 있다면, \r\n");
      out.write("     ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("는 /projectMVC로 대체되어 CSS 파일의 경로를 올바르게 설정해줍니다. -->\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table {\r\n");
      out.write("	border: collapse;\r\n");
      out.write("	/* 테이블의 테두리가 서로 겹쳐지지 않도록 collapse 설정을 사용합니다. */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	/* 테이블의 셀 안에 여백을 주어 내용을 보기 좋게 만듭니다. */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#boardViewForm {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	margin-top: 30px 0;\r\n");
      out.write("	/* 게시글 뷰 폼을 화면 중앙에 정렬하고, 위아래로 여백을 추가합니다. */\r\n");
      out.write("}\r\n");
      out.write("/* \r\n");
      out.write("     flex-direction: column;은 자식 요소들을 수직으로 나열하며, \r\n");
      out.write("     align-items: center;는 요소들을 수평으로 중앙에 정렬합니다. \r\n");
      out.write("     이렇게 하면 테이블과 버튼들이 화면 가운데에 일관성 있게 배치됩니다. */\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div id=\"wrap\">\r\n");
      out.write("		<div id=\"header\">\r\n");
      out.write("			<h1>\r\n");
      out.write("				<img alt=\"사과\"\r\n");
      out.write("					src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/image/apple.png\"\r\n");
      out.write("					width=\"50\" height=\"50\"\r\n");
      out.write("					onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/index.do'\"\r\n");
      out.write("					style=\"cursor: pointer;\">\r\n");
      out.write("				<!-- 클릭하면 홈으로 이동하도록 설정된 이미지입니다. -->\r\n");
      out.write("				<!-- 이미지의 크기는 50x50으로 설정되었고, 클릭 시 index.do 페이지로 이동합니다.\r\n");
      out.write("				     style=\"cursor: pointer;\"는 마우스를 올렸을 때 포인터 커서가 보이도록 설정한 부분입니다. -->\r\n");
      out.write("				\r\n");
      out.write("				MVC를 활용한 미니프로젝트\r\n");
      out.write("			</h1>\r\n");
      out.write("			<hr style=\"border-color: #483D8B; border-width: 3px;\" />\r\n");
      out.write("			<!-- 스타일이 적용된 수평선을 추가합니다. \r\n");
      out.write("			     border-color는 선의 색상을 지정하며, border-width는 선의 굵기를 지정합니다.\r\n");
      out.write("			     여기서는 3픽셀 두께의 어두운 블루(#483D8B) 색상이 사용되었습니다. -->\r\n");
      out.write("			<!-- 이 부분은 페이지의 헤더를 구성합니다. 로고 이미지와 프로젝트 제목을 포함하고 있습니다. -->\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div id=\"container\">\r\n");
      out.write("			");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../main/boardMenu.jsp", out, false);
      out.write("\r\n");
      out.write("			<!-- 다른 JSP 파일인 boardMenu.jsp 파일을 현재 위치에 포함시킵니다. \r\n");
      out.write("			     이 코드는 주로 메뉴바 같은 공통 요소를 삽입할 때 사용됩니다. \r\n");
      out.write("			     이렇게 하면 메뉴를 여러 페이지에 중복해서 작성할 필요 없이 한 파일로 관리할 수 있어 유지보수에 유리합니다. -->\r\n");
      out.write("			<!-- 이 include 문은 게시판 메뉴를 포함시켜 페이지의 일관성을 유지합니다. -->\r\n");
      out.write("\r\n");
      out.write("			<div id=\"section\" class=\"boardViewDiv\">\r\n");
      out.write("				<form id=\"boardViewForm\">\r\n");
      out.write("					\r\n");
      out.write("					<input type=\"hidden\" id=\"memId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.memId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("					<!-- 세션 값을 유지하기 위해 가져옴 -->\r\n");
      out.write("					<!-- 현재 로그인한 사용자의 ID를 hidden 필드로 저장합니다. 이는 JavaScript에서 사용될 수 있습니다.\r\n");
      out.write("					     hidden 필드는 화면에는 표시되지 않지만, 자바스크립트나 서버로 데이터를 전송할 때 활용됩니다. -->\r\n");
      out.write("					\r\n");
      out.write("					<input type=\"hidden\" name=\"seq\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.seq }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("					<input type=\"hidden\" name=\"pg\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${requestScope.pg }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("					<!-- seq는 게시글 번호, pg는 페이지 정보를 의미하며, hidden 필드로 저장하여 서버로 전송하거나 \r\n");
      out.write("					     JavaScript에서 사용할 수 있도록 준비해 둡니다. -->\r\n");
      out.write("					\r\n");
      out.write("					<table border=\"1\" frame=\"hsides\" rules=\"rows\">\r\n");
      out.write("						<!-- 테이블을 생성하고, border=\"1\"로 테두리를 추가합니다.\r\n");
      out.write("						     frame=\"hsides\"는 테이블의 상단과 하단에만 테두리를 표시하고, \r\n");
      out.write("						     rules=\"rows\"는 각 행(row)을 구분하는 선을 추가하는 속성입니다. -->\r\n");
      out.write("\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td colspan=\"3\">\r\n");
      out.write("							<h2>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.subject }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h2>\r\n");
      out.write("							<!-- ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.subject}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("는 게시글의 제목을 출력하는 부분입니다. -->\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td width=\"200\">글번호 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.seq }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("							<!-- 글번호는 게시글의 고유한 식별자입니다. -->\r\n");
      out.write("							<td width=\"200\">작성자 : <span id=\"id\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</span></td>\r\n");
      out.write("							<!-- 작성자의 ID를 출력하고, span 태그로 감싸서 이후에 JavaScript에서 접근할 수 있도록 합니다. -->\r\n");
      out.write("							<td width=\"200\">조회수 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.hit }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</td>\r\n");
      out.write("							<!-- 조회수는 해당 게시글이 몇 번 조회되었는지를 나타냅니다. -->\r\n");
      out.write("						</tr>\r\n");
      out.write("						\r\n");
      out.write("						<tr>\r\n");
      out.write("							<td height=\"300\" colspan=\"3\" valign=\"top\" >\r\n");
      out.write("								<div style=\"width: 100%; height:100%; overflow: auto;\">\r\n");
      out.write("									<pre style=\"white-space: pre-line; word-break: break-all;\">\r\n");
      out.write("										");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${boardDTO.content }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("										<!-- 게시글의 내용을 표시하는 부분입니다. -->\r\n");
      out.write("										<!-- white-space: pre-line;을 사용해 게시글의 줄바꿈을 유지하고, -->\r\n");
      out.write("										<!-- word-break: break-all;로 긴 단어들도 자동으로 줄바꿈이 되도록 설정합니다. -->\r\n");
      out.write("									</pre> \r\n");
      out.write("								</div>\r\n");
      out.write("							</td>\r\n");
      out.write("						</tr>\r\n");
      out.write("					</table>\r\n");
      out.write("\r\n");
      out.write("					<div style=\"width:650px; margin-top: 1px;\" >\r\n");
      out.write("						<input type=\"button\" value=\"목록\" \r\n");
      out.write("								onclick=\"location.href='/projectMVC/board/boardList.do?pg=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">\r\n");
      out.write("						<!-- 목록 버튼은 게시글 목록 페이지로 이동합니다.\r\n");
      out.write("						     ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("는 현재 페이지 번호를 유지하여, 목록 페이지에서 원래 위치로 돌아갈 수 있도록 합니다. -->\r\n");
      out.write("						\r\n");
      out.write("						");
      out.write("\r\n");
      out.write("						    <span id=\"boardViewSpan\">\r\n");
      out.write("						    <!-- 글 수정 및 삭제 버튼 -->\r\n");
      out.write("						    ");
      out.write("\r\n");
      out.write("						    <input type=\"button\" value=\"게시글 수정\" id=\"boardUpdateFormBtn\"> \r\n");
      out.write("						    <!-- 게시글 수정 버튼입니다. 클릭 시 JavaScript로 이벤트가 처리되며,\r\n");
      out.write("						         seq (게시글 번호)와 pg (페이지 번호)의 값을 전달하여 수정 화면으로 이동합니다. -->\r\n");
      out.write("						    \r\n");
      out.write("						    <input type=\"button\" value=\"게시글 삭제\" id=\"boardDeleteFormBtn\"> \r\n");
      out.write("						    <!-- 게시글 삭제 버튼입니다. 클릭 시 JavaScript에서 seq의 값을 가지고 삭제 작업이 수행됩니다. -->\r\n");
      out.write("							</span>\r\n");
      out.write("						");
      out.write("\r\n");
      out.write("					</div> <!-- 기타 버튼 -->\r\n");
      out.write("				</form>\r\n");
      out.write("			</div>\r\n");
      out.write("			<!-- id=\"section\" -->\r\n");
      out.write("		</div>\r\n");
      out.write("		<!-- id=\"container\" -->\r\n");
      out.write("	</div>\r\n");
      out.write("	<!-- id=\"wrap\" -->\r\n");
      out.write("	\r\n");
      out.write("	<script src=\"http://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("	<!-- jQuery 라이브러리를 로드합니다. 여기서 jQuery는 3.7.1 버전을 사용하고 있습니다. \r\n");
      out.write("	     이 라이브러리를 통해 JavaScript의 기능을 더욱 쉽게 사용할 수 있습니다. -->\r\n");
      out.write("	\r\n");
      out.write("	<script type=\"text/javascript\" src=\"../js/boardView.js\"></script>\r\n");
      out.write("	<!-- 사용자 정의 JavaScript 파일을 로드합니다. boardView.js 파일은 이 페이지의 동적 기능을 담당하는 스크립트입니다. -->\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
