/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-06 12:55:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.bean.MemberDTO;
import member.dao.MemberDAO;

public final class memberUpdate_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("member.dao.MemberDAO");
    _jspx_imports_classes.add("member.bean.MemberDTO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");

	// 한글 인코딩
	// 클라이언트로부터 전송된 데이터를 UTF-8로 인코딩하여 한글 처리를 올바르게 하기 위한 설정입니다.
	request.setCharacterEncoding("UTF-8");
	
    // POST 요청으로 넘어온 데이터 처리
    // 폼에서 사용자가 입력한 데이터를 받아오는 부분입니다. 각 필드는 사용자로부터 전달된 데이터를 의미합니다.
    String name = request.getParameter("name"); // 사용자가 입력한 이름을 가져옵니다.
    String id = request.getParameter("id"); // 사용자가 입력한 ID를 가져옵니다.
    String pwd = request.getParameter("pwd"); // 사용자가 입력한 비밀번호를 가져옵니다. 
    String gender = request.getParameter("gender"); // 성별 선택 값을 가져옵니다.
    String email1 = request.getParameter("email1"); // 이메일 앞 부분 (예: user) 값을 가져옵니다.
    String email2 = request.getParameter("email2"); // 이메일 도메인 부분 (예: naver.com)을 가져옵니다.
    String tel1 = request.getParameter("tel1"); // 전화번호 첫 부분 (예: 010)을 가져옵니다.
    String tel2 = request.getParameter("tel2"); // 전화번호 중간 부분 (예: 1234)을 가져옵니다.
    String tel3 = request.getParameter("tel3"); // 전화번호 마지막 부분 (예: 5678)을 가져옵니다.
    String zipcode = request.getParameter("zipcode"); // 사용자가 입력한 우편번호를 가져옵니다.
    String addr1 = request.getParameter("addr1"); // 사용자가 입력한 기본 주소를 가져옵니다.
    String addr2 = request.getParameter("addr2"); // 사용자가 입력한 상세 주소를 가져옵니다.

    // MemberDTO 객체에 폼 데이터 담기
    // 추가 주석: DTO(Data Transfer Object)는 데이터를 운반하기 위한 객체입니다. 
    // MemberDTO는 회원 정보를 저장하는 객체로, 사용자로부터 입력받은 데이터를 담아 전달하는 역할을 합니다.
    MemberDTO memberDTO = new MemberDTO();
    memberDTO.setName(name); // 입력받은 이름을 memberDTO 객체에 저장
    memberDTO.setId(id); // 입력받은 ID를 memberDTO 객체에 저장
    memberDTO.setPwd(pwd); // 입력받은 비밀번호를 memberDTO 객체에 저장
    memberDTO.setGender(gender); // 선택된 성별을 memberDTO 객체에 저장
    memberDTO.setEmail1(email1); // 이메일 앞 부분을 memberDTO 객체에 저장
    memberDTO.setEmail2(email2); // 이메일 도메인 부분을 memberDTO 객체에 저장
    memberDTO.setTel1(tel1); // 전화번호 첫 번째 부분을 memberDTO 객체에 저장
    memberDTO.setTel2(tel2); // 전화번호 두 번째 부분을 memberDTO 객체에 저장
    memberDTO.setTel3(tel3); // 전화번호 세 번째 부분을 memberDTO 객체에 저장
    memberDTO.setZipcode(zipcode); // 우편번호를 memberDTO 객체에 저장
    memberDTO.setAddr1(addr1); // 기본 주소를 memberDTO 객체에 저장
    memberDTO.setAddr2(addr2); // 상세 주소를 memberDTO 객체에 저장

    // 데이터베이스 업데이트
    // 추가 주석: DAO(Data Access Object)는 데이터베이스와의 상호작용을 처리하는 객체입니다. 
    // MemberDAO는 회원 정보를 DB에 업데이트하는 작업을 담당하며, 이를 통해 데이터가 실제로 DB에 저장됩니다.
    // getInstance() 메서드를 통해 싱글톤 패턴으로 생성된 DAO 인스턴스를 가져옵니다.
    MemberDAO memberDAO = MemberDAO.getInstance();
    memberDAO.updateMember(memberDTO); // MemberDTO에 담긴 데이터를 DB에 업데이트합니다.

      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
