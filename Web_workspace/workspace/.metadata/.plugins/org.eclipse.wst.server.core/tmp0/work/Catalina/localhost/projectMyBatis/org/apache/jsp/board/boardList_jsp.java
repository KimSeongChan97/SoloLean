/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-11 08:59:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.bean.BoardDTO;
import board.bean.BoardPaging;
import board.dao.BoardDAO;
import java.text.SimpleDateFormat;
import java.util.List;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(7);
    _jspx_imports_classes.add("board.bean.BoardPaging");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("board.dao.BoardDAO");
    _jspx_imports_classes.add("board.bean.BoardDTO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" <!-- BoardDTO 클래스를 임포트하여 사용 -->\r\n");
      out.write(" <!-- 페이징 처리를 위한 BoardPaging 클래스를 임포트 -->\r\n");
      out.write(" <!-- 데이터베이스와의 연동을 위한 BoardDAO 클래스를 임포트 -->\r\n");
      out.write(" <!-- 날짜 형식을 변환하기 위한 SimpleDateFormat 클래스 임포트 -->\r\n");
      out.write(" <!-- List 자료구조 사용을 위한 java.util.List 임포트 -->\r\n");
      out.write("\r\n");

	int pg = Integer.parseInt(request.getParameter("pg")); 
	// 현재 페이지 번호를 request 파라미터로부터 받아와서 정수형으로 변환.
	// 'pg'는 URL에서 전달된 값으로, 사용자가 보고자 하는 페이지 번호를 나타낸다.
	// 예를 들어, "boardList.jsp?pg=1"이 전달되면 pg는 1이 된다.

	//1페이지당 5개씩
	int endNum = pg * 5;
	// endNum은 해당 페이지의 마지막 게시글 번호로, 페이지 번호(pg)에 따라 다르다.
	// 예를 들어, pg가 1일 때 endNum은 5가 되며, 이는 1페이지에서 5번째 글이 마지막이라는 뜻이다.
	
	int startNum = endNum - 4;
	// startNum은 해당 페이지의 첫 번째 게시글 번호이다.
	// 예를 들어, 1페이지일 경우 startNum은 1이 되고, 2페이지라면 startNum은 6이 된다.

	//DB 연동을 위한 DAO 객체 생성
	BoardDAO boardDAO = BoardDAO.getInstance();
	// DAO는 데이터베이스와의 연동을 담당하는 객체로, 싱글톤 패턴으로 생성된 인스턴스를 사용한다.

	List<BoardDTO> list = boardDAO.boardList(startNum, endNum);
	// boardList 메서드를 호출하여 startNum과 endNum 사이의 게시글 목록을 가져온다.
	// 이 목록은 현재 페이지에 표시될 게시글들이다.
	
	//페이징 처리
	int totalA = boardDAO.getTotalA();
	// 전체 게시글의 수를 데이터베이스에서 조회하여 totalA에 저장한다.

	BoardPaging boardPaging = new BoardPaging();
	// 페이징 처리를 위한 BoardPaging 객체를 생성한다.
	boardPaging.setCurrentPage(pg);
	// 현재 페이지 번호를 설정한다.
	boardPaging.setPageBlock(3);
	// 한 번에 보여줄 페이지 번호의 개수를 설정. 여기서는 3개씩 보여준다.
	boardPaging.setPageSize(5);
	// 한 페이지당 보여줄 게시글 수를 설정. 여기서는 5개로 설정되어 있다.
	boardPaging.setTotalA(totalA);
	// 전체 게시글의 개수를 설정하여 페이징 처리를 위한 정보로 사용한다.
	
	boardPaging.makePagingHTML();
	// 페이징 HTML 코드를 생성한다. 이를 통해 페이지 번호 링크들이 만들어진다.


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("table {\r\n");
      out.write("    border-collapse: collapse;\r\n");
      out.write("    /* 테이블 경계를 합쳐서 하나로 만든다 */\r\n");
      out.write("}\r\n");
      out.write("th, td{\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    /* 테이블 셀 내부의 여백을 설정한다 */\r\n");
      out.write("}\r\n");
      out.write("#currentPaging {\r\n");
      out.write("	border: 1px solid blue;\r\n");
      out.write("	/* 현재 페이지 번호에 파란색 테두리를 설정 */\r\n");
      out.write("	color: red;\r\n");
      out.write("	/* 현재 페이지 번호의 텍스트 색상을 빨간색으로 설정 */\r\n");
      out.write("	font-size: 15pt;\r\n");
      out.write("	/* 글자 크기를 15포인트로 설정 */\r\n");
      out.write("	padding: 5px 8px;\r\n");
      out.write("	/* 안쪽 여백을 설정 */\r\n");
      out.write("	margin: 3px;\r\n");
      out.write("	/* 바깥쪽 여백을 설정 */\r\n");
      out.write("}\r\n");
      out.write("#paging {\r\n");
      out.write("	color: black;\r\n");
      out.write("	/* 일반 페이지 번호의 텍스트 색상을 검정색으로 설정 */\r\n");
      out.write("	font-size: 15pt;\r\n");
      out.write("	/* 글자 크기를 15포인트로 설정 */\r\n");
      out.write("	padding: 5px 8px;\r\n");
      out.write("	/* 안쪽 여백을 설정 */\r\n");
      out.write("	margin: 3px;\r\n");
      out.write("	/* 바깥쪽 여백을 설정 */\r\n");
      out.write("}\r\n");
      out.write("span:hover {\r\n");
      out.write("	text-decoration: underline;\r\n");
      out.write("	/* 페이지 번호에 마우스를 올리면 밑줄을 표시 */\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<table border=\"1\" frame=\"hsides\" rules=\"rows\">\r\n");
      out.write("		<!-- 테이블을 생성하고, 가로선만 표시되도록 설정 -->\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"100\">글번호</th> <!-- 글 번호 열 -->\r\n");
      out.write("			<th width=\"400\">제목</th> <!-- 제목 열 -->\r\n");
      out.write("			<th width=\"150\">작성자</th> <!-- 작성자 열 -->\r\n");
      out.write("			<th width=\"150\">작성일</th> <!-- 작성일 열 -->\r\n");
      out.write("			<th width=\"100\">조회수</th> <!-- 조회수 열 -->\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		<!-- list가 null이 아니면 게시글 목록을 출력한다. -->\r\n");
      out.write("		");
 if(list != null){ 
      out.write("\r\n");
      out.write("			<!-- for문을 사용하여 list에 있는 각 BoardDTO 객체에 대해 반복문을 실행 -->\r\n");
      out.write("			");
 for(BoardDTO boardDTO : list) { 
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getSeq() );
      out.write("</td>\r\n");
      out.write("					<!-- 게시글 번호를 출력한다. getSeq() 메서드는 게시글의 고유 번호를 반환한다. -->\r\n");
      out.write("					<td>");
      out.print(boardDTO.getSubject() );
      out.write("</td>\r\n");
      out.write("					<!-- 게시글 제목을 출력한다. getSubject() 메서드는 제목을 반환한다. -->\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getId() );
      out.write("</td>\r\n");
      out.write("					<!-- 게시글 작성자의 ID를 출력한다. getId() 메서드는 작성자의 ID를 반환한다. -->\r\n");
      out.write("					<td align=\"center\">\r\n");
      out.write("						<!-- 게시글 작성일을 'yyyy.MM.dd' 형식으로 변환하여 출력한다. -->\r\n");
      out.write("							");
      out.print(new SimpleDateFormat("yyyy.MM.dd").format(boardDTO.getLogtime()) );
      out.write("</td>\r\n");
      out.write("					<!-- getLogtime()은 게시글이 작성된 시간을 반환하며, SimpleDateFormat을 사용해 형식을 지정한다. -->\r\n");
      out.write("					<td align=\"center\">");
      out.print(boardDTO.getHit() );
      out.write("</td>\r\n");
      out.write("					<!-- 게시글의 조회수를 출력한다. getHit() 메서드는 해당 게시글의 조회수를 반환한다. -->\r\n");
      out.write("				</tr>\r\n");
      out.write("			");
}//for 
      out.write("\r\n");
      out.write("		");
}//if 
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 페이지 번호를 출력하는 영역 -->\r\n");
      out.write("	<div style=\"text-align: center; width: 1000px; margin-top: 15px;\">\r\n");
      out.write("		");
      out.print(boardPaging.getPagingHTML() );
      out.write("\r\n");
      out.write("		<!-- 페이징 HTML을 출력한다. getPagingHTML()은 페이징 처리된 페이지 번호들을 포함한 HTML 코드를 반환한다. -->\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function boardPaging(pg){\r\n");
      out.write("	// 페이지 번호를 클릭할 때 호출되는 자바스크립트 함수.\r\n");
      out.write("	// 클릭한 페이지 번호를 매개변수로 받아서 해당 페이지로 이동한다.\r\n");
      out.write("	location.href = \"boardList.jsp?pg=\" + pg;\r\n");
      out.write("	// 'boardList.jsp' 페이지로 이동하면서 클릭한 페이지 번호를 'pg' 파라미터로 전달.\r\n");
      out.write("}\r\n");
      out.write("</script>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
