/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-09-23 03:02:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardDeleteForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("#boardDeleteForm {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	margin: 30px auto;\r\n");
      out.write("	text-align: left;\r\n");
      out.write("	background-color: #1a1a1a; /* 어두운 배경을 사용하여 눈에 덜 피로한 스타일 적용 */\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	border-radius: 10px; /* 테두리에 둥근 모서리 적용 */\r\n");
      out.write("	box-shadow: 0 0 10px #00ffcc; /* 네온 스타일의 그림자 효과 적용 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#boardDeleteForm div {\r\n");
      out.write("    color: #ff00ff; /* 네온 스타일 색상으로 강조 */\r\n");
      out.write("    font-size: 10pt;\r\n");
      out.write("    font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"text\"], textarea {\r\n");
      out.write("    background-color: #333333; /* 어두운 색상으로 입력 필드 배경 설정 */\r\n");
      out.write("    color: #00ffcc; /* 네온 스타일 텍스트 색상 */\r\n");
      out.write("    border: 1px solid #00ffcc; /* 네온 스타일 테두리 */\r\n");
      out.write("    padding: 10px;\r\n");
      out.write("    width: 100%;\r\n");
      out.write("    box-sizing: border-box; /* 요소 크기를 내용물 크기까지 포함하도록 설정 */\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"button\"], input[type=\"reset\"] {\r\n");
      out.write("    background-color: #00ffcc; /* 네온 스타일 배경 */\r\n");
      out.write("    color: #0d0d0d; /* 어두운 텍스트 색상 */\r\n");
      out.write("    border: none;\r\n");
      out.write("    padding: 10px 20px;\r\n");
      out.write("    cursor: pointer;\r\n");
      out.write("    margin: 10px;\r\n");
      out.write("    transition: background-color 0.3s; /* 배경색 변화에 부드러운 애니메이션 적용 */\r\n");
      out.write("    border-radius: 25px;    \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("input[type=\"button\"]:hover, input[type=\"reset\"]:hover {\r\n");
      out.write("    background-color: #00ffcc;\r\n");
      out.write("    box-shadow: 0 0 10px cyan, 0 0 20px cyan, 0 0 30px cyan, 0 0 40px cyan; /* 네온 효과 강조 */\r\n");
      out.write("    transition: box-shadow 1.5s ease; /* 그림자가 천천히 변하는 효과 */\r\n");
      out.write("    border-radius: 25px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".table-buttons {\r\n");
      out.write("    text-align: center;\r\n");
      out.write("    padding-top: 20px; /* 버튼들을 테이블 하단에 위치시키기 위한 여백 */\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    // 삭제 확인 메시지를 띄우고, 확인 시 삭제 처리\r\n");
      out.write("    function deleteConfirm(seq) {\r\n");
      out.write("        if (confirm(\"정말로 이 게시글을 삭제하시겠습니까?\")) {\r\n");
      out.write("            // 삭제 요청을 보내는 폼 제출\r\n");
      out.write("            document.location.href = '/projectMVC/board/boardDeleteForm.do?seq=' + seq;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("</script>\r\n");
      out.write(" <h2>게시글 삭제</h2>\r\n");
      out.write("    <p>정말로 삭제하시겠습니까?</p>\r\n");
      out.write("    \r\n");
      out.write("    <input type=\"button\" value=\"삭제\" onclick=\"deleteConfirm(");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.seq}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(")\">\r\n");
      out.write("    <input type=\"button\" value=\"취소\" onclick=\"history.back();\">\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
