<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>    
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>JSTL TEST</title>
<style type="text/css">

body {
	background-color: #0d0d0d;
	color: #00ffcc;
	text-align: center;
}

</style>
</head>
<body>
	
	<h3>*** 변수 설정 ***</h3>
	
	<!-- 자료형이 아님. -->
	<!-- String name 의 역할 -->
	<%-- 
		- JSTL의 <c:set> 태그는 자바 코드에서 변수를 선언하고 값을 할당하는 역할을 대신합니다.
		- "var" 속성으로 변수명을 정의하고, "value" 속성으로 그 변수에 할당할 값을 설정합니다.
		- 여기서 'name'이라는 변수를 선언하고, 그 값으로 "홍길동"을 할당합니다.
		- 이 변수는 JSP 페이지 내에서 EL(Expression Language)을 통해 사용할 수 있습니다.
		
		* 추가 설명:
		- JSTL은 JSP에서 자주 사용하는 공통 기능들을 템플릿처럼 제공하는 라이브러리입니다. 
		- <c:set>은 변수를 선언하고 값을 할당하는 역할을 하며, 자바 코드와 유사하지만 더 직관적이고 간단하게 사용할 수 있습니다.
		- EL(Expression Language)는 JSP 페이지에서 자바 코드를 삽입하지 않고도 데이터를 표현할 수 있는 방식입니다. ${변수명}으로 데이터를 출력할 수 있습니다.
	--%>
	<c:set var="name" value="홍길동" />
	<c:set var="age">25</c:set>
	<%-- 
		- 'age'라는 변수를 선언하고 25라는 값을 할당합니다.
		- 이 경우 value 속성을 사용하지 않고 태그 본문에 직접 값을 지정했습니다.
		
		* 추가 설명:
		- value 속성을 생략하면 태그 본문에 값을 직접 입력할 수 있습니다.
		- 이는 간단한 값 설정에 유용하지만, value 속성을 사용하는 방식과 기능적으로는 동일합니다.
		- EL과 함께 사용하면 자바 코드 없이도 페이지에서 변수의 값을 쉽게 관리할 수 있습니다.
	--%>
	
	나의 이름은 ${name } 입니다. <br/>
	<%-- 
		- EL(Expression Language)을 사용해 'name' 변수의 값을 출력합니다.
		- ${name}은 위에서 설정한 "홍길동"이라는 값을 가져와 출력합니다.
		- EL은 자바 코드 없이도 간단하게 변수를 출력할 수 있는 JSP 표현식입니다.
		
		* 추가 설명:
		- EL은 ${변수명} 형식으로 변수를 출력할 수 있습니다.
		- 이는 자바 코드로 out.print(name) 등을 사용하는 것보다 간단하고 직관적입니다.
	--%>
	
	내 나이는 <c:out value="${age}"/>살 입니다. <br/>
	<%-- 
		- <c:out> 태그는 변수를 출력하는 데 사용됩니다. 
		- EL로 출력하는 것과 기능적으로는 동일하지만, <c:out>은 태그로 변수를 출력하는 방식입니다.
		- "${age}"는 위에서 설정한 25라는 값을 출력합니다.
		
		* 추가 설명:
		- <c:out>은 JSTL의 출력 태그로, ${변수명}과 같은 방식으로 EL을 출력하지만 더 안전하게 처리됩니다.
		- 예를 들어, 출력할 값에 HTML 태그가 포함되어 있다면 <c:out>은 이를 자동으로 이스케이프(escape) 처리해, 보안 위험을 줄입니다.
		- 따라서 보안이나 HTML 태그가 포함된 데이터를 출력할 때는 <c:out>을 권장합니다.
	--%>
	
	나의 키는 ${height }cm 입니다. <br/>
	<!-- 변수를 잡은 적이 없다면 그냥 없이 나온다. -->
	<%-- 
		- 'height'라는 변수는 설정된 적이 없으므로, 빈 값으로 출력됩니다.
		- JSTL과 EL을 사용할 때, 정의되지 않은 변수는 오류 없이 그냥 빈 값으로 출력됩니다.
		
		* 추가 설명:
		- EL과 JSTL은 선언되지 않은 변수에 대해 에러를 발생시키지 않고, 그냥 빈 값으로 처리하는 유연성을 가지고 있습니다.
		- 이로 인해 페이지의 중단 없이 코드를 실행할 수 있지만, 반드시 필요한 변수가 있을 때는 이를 미리 정의하는 것이 좋습니다.
	--%>
	
	<h3>*** forEach ***</h3>
	<!-- for문 대신 forEach를 사용한다. -->
	<%-- 
		- JSTL의 <c:forEach> 태그는 자바의 for문과 같은 기능을 합니다.
		- "begin"은 반복을 시작할 값, "end"는 끝나는 값, "step"은 증가값을 의미합니다.
		- 이 코드는 i가 1부터 시작해 10까지 1씩 증가하는 반복문을 실행합니다. 
		- for(int i=1; i<=10; i++)와 같은 역할을 합니다.
		- var 속성으로 현재 반복되는 값을 저장할 변수를 정의합니다.
		
		* 추가 설명:
		- <c:forEach>는 자바의 for문을 대체하며, 배열, 리스트 또는 숫자 범위 같은 반복 가능한 객체에서 사용됩니다.
		- begin과 end는 반복의 시작과 끝을 나타내며, step은 반복 시 증가할 값입니다.
		- var="i"로 선언된 변수 i는 각 반복에서 해당 값을 가집니다.
	--%>
	<c:forEach var="i" begin="1" end="10" step="1"> <%-- for(int i=1; i<=10 i++) 과 같다. --%>
		${i } &emsp;
		<%-- 
			- ${i}는 현재 반복 중인 i 값을 출력합니다.
			- 반복이 1에서 10까지 진행되므로 1부터 10까지의 숫자가 차례대로 출력됩니다.
			- &emsp;는 HTML 엔티티로, 텍스트 사이에 공백을 삽입하는 역할을 합니다.
			
			* 추가 설명:
			- ${i}는 <c:forEach>에서 현재 반복 중인 숫자 값을 가져옵니다. 
			- 이때 HTML 엔티티 &emsp;를 사용해 각 숫자 사이에 적당한 공백을 넣어 출력의 가독성을 높이고 있습니다.
		--%>
			<%-- 
				- 'sum'이라는 변수를 선언하고, 그 값을 0으로 초기화합니다.
				- 이 변수는 반복문 안에서 1부터 10까지의 값을 누적하는 데 사용됩니다.
				
				* 추가 설명:
				- <c:set>을 사용해 sum 변수에 현재 i 값을 계속 더해줍니다. 
				- sum은 누적되어 1부터 10까지의 값이 더해지며, 최종적으로 55가 됩니다.
			--%>
		<c:set var="sum" value="${sum + i }" /> <%-- 현재 합계에 i값을 더해서 sum 변수에 저장 --%>
	</c:forEach>
	<!-- 출력 -->
	<br/>
	1 ~ 10 까지의 합 = ${sum }
	<%-- 
		- 반복이 끝난 후, 최종적으로 계산된 sum의 값을 출력합니다.
		- 이 값은 1부터 10까지의 합인 55가 됩니다.
		- i는 현재 반복 중인 값입니다.
		- ${sum + i}는 이전까지의 합계인 sum에 현재 값 i를 더한 결과입니다.
		- 이 값을 다시 sum에 저장하여 누적합을 계산합니다.
		- 첫 번째 반복에서는 sum = 0 + 1, 두 번째 반복에서는 sum = 1 + 2, ... 마지막에는 sum = 45 + 10 = 55가 됩니다.
		
		* 추가 설명:
		- <c:set>을 사용해 반복할 때마다 sum에 i 값을 더해 누적합을 구합니다.
		- ${sum + i}로 계산된 값을 다시 sum에 저장하면서 누적되는 과정이 진행됩니다.
		- 이 방식으로 1부터 10까지의 합을 계산하게 됩니다.
	--%>
	<br><br>
	
	10 ~ 1 까지 나열하기 : 
	<c:forEach var="i" begin="1" end="10" step="1">
		${11-i } &emsp;
	</c:forEach>	
	<%-- (step 은 0보다 무조건 커야하고 같으면 안된다.) --%>
	<%-- 
		- 위 반복문에서 ${11 - i}로 1부터 10까지 감소하는 값을 출력합니다.
		- begin과 end는 1부터 10까지 반복되지만 ${11 - i}로 역순을 출력하는 방식입니다.
		- step은 반드시 0보다 큰 값을 가져야 하며, 0이거나 음수일 경우 무한 루프에 빠질 위험이 있습니다.
	--%>
	<br><br>
	
	<h3>*** forToken ***</h3>
	StringTokeninzer or String의 split() -> 문자열 분리
	<br>
	<c:forTokens var="car" items="소나타,아우디,페라리,벤츠,링컨" delims=",">
		${car } <br>
	</c:forTokens>
	<%-- item을 , 가지고 분리 --%>
	<%-- 
		- <c:forTokens>는 자바의 StringTokenizer나 String.split()과 같은 역할을 합니다.
		- 'items' 속성에 주어진 문자열을 'delims' 속성에서 지정한 구분자(,)로 나누어 각 토큰을 반복합니다.
		- 이 코드는 '소나타,아우디,페라리,벤츠,링컨'을 각각 하나씩 나누어 출력합니다.
		- var="car"로 각 반복 시 해당 자동차 이름을 car 변수에 저장하고 출력합니다.
		
		* 추가 설명:
		- <c:forTokens>는 문자열을 특정 구분자에 따라 나누고 각 토큰을 반복할 수 있는 태그입니다.
		- items 속성에 주어진 문자열을 delims 속성에 지정한 구분자(여기서는 ,)로 분리합니다.
		- 이때 각 토큰은 car 변수에 저장되고 출력됩니다.
	--%>
		
	
	
</body>
</html>
