<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberSQL">
    <!-- 아이디 중복 체크 -->
    <!-- 사용자가 입력한 ID가 데이터베이스에 이미 존재하는지 확인하는 쿼리입니다. 
         로그인 또는 회원가입 시, ID의 중복을 확인하여 유효한 ID인지 체크하는 데 사용됩니다.
         만약 같은 ID가 이미 데이터베이스에 존재한다면, 중복된 ID로 인식하여 경고 메시지를 표시하거나 
         다른 ID를 입력하게 유도할 수 있습니다. -->
    <select id="isExistId" parameterType="String" resultType="member.bean.MemberDTO">
        select * from member where id=#{id}
    </select>
    
    <!-- 회원가입 -->
    <!-- 사용자가 입력한 정보를 통해 새로운 회원을 등록하는 쿼리입니다. 
         'member' 테이블에 새로운 레코드를 삽입하며, 입력한 이름, ID, 비밀번호, 성별, 이메일, 
         전화번호, 우편번호, 주소 등의 정보를 저장합니다. 
         회원이 가입한 시간을 기록하기 위해 logtime 필드에는 시스템의 현재 시간을 저장합니다. -->
    <insert id="write" parameterType="member">
        INSERT INTO member(name
                         , id
                         , pwd
                         , gender
                         , email1
                         , email2
                         , tel1
                         , tel2
                         , tel3
                         , zipcode
                         , addr1
                         , addr2
                         , logtime)
                    VALUES(#{name}
                         , #{id}
                         , #{pwd}
                         , #{gender}
                         , #{email1}
                         , #{email2}
                         , #{tel1}
                         , #{tel2}
                         , #{tel3}
                         , #{zipcode}
                         , #{addr1}
                         , #{addr2}
                         , SYSDATE) <!-- SYSDATE는 Oracle에서 현재 날짜와 시간을 가져옵니다. -->
    </insert>
    
    <!-- 로그인 -->
    <!-- 사용자가 입력한 ID와 비밀번호를 확인하여, 로그인 가능한지 체크하는 쿼리입니다.
         ID와 비밀번호가 일치하는 회원의 정보를 조회하고, 이를 통해 로그인을 처리합니다.
         로그인에 성공하면 사용자의 정보가 반환되며, 실패 시 null 값을 반환할 수 있습니다.
         이 쿼리에서 사용하는 파라미터는 Map으로, key로 'id'와 'pwd'가 사용됩니다. -->
    <select id="login" parameterType="java.util.Map" resultType="member">
        select * from member where id=#{id} and pwd=#{pwd}
    </select>
    
    <!-- id에 해당하는 정보 가져오기 -->
    <!-- 주어진 ID에 해당하는 회원의 모든 정보를 조회하는 쿼리입니다.
         회원 정보 페이지를 열 때, 해당 사용자의 데이터를 가져와 화면에 표시할 수 있습니다.
         예를 들어, 사용자가 자신의 회원 정보를 수정하거나 조회할 때 이 쿼리를 사용하여 데이터를 가져옵니다. -->
    <select id="getMember" parameterType="String" resultType="member">
        select * from member where id=#{id}
    </select>
    
    <!-- 회원정보수정 -->
    <!-- 회원이 자신의 정보를 수정했을 때, 변경된 내용을 업데이트하는 쿼리입니다.
         ID를 기준으로 회원의 이름, 비밀번호, 성별, 이메일, 전화번호, 우편번호, 주소 등을 수정합니다.
         회원이 정보를 수정한 시점의 시간도 logtime에 기록되며, 이 때 역시 현재 시간을 SYSDATE를 통해 저장합니다. -->
    <update id="update" parameterType="member">
        update member set name = #{name}
                        , pwd = #{pwd}
                        , gender = #{gender}
                        , email1 = #{email1}
                        , email2 = #{email2}
                        , tel1 = #{tel1}
                        , tel2 = #{tel2}
                        , tel3 = #{tel3}
                        , zipcode = #{zipcode}
                        , addr1 = #{addr1}
                        , addr2 = #{addr2}
                        , logtime = SYSDATE <!-- SYSDATE를 사용해 회원정보를 수정한 시간 기록 -->
        where id = #{id} <!-- 회원 ID를 기준으로 데이터를 수정 -->
    </update>
</mapper>

