<?xml version="1.0" encoding="UTF-8"?>
<!-- FilmNote/src/main/java/mapper/movieMapper.xml -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movieSQL">
    <!-- 영화 등록 -->
    <!-- 영화 데이터를 movie_tb 테이블에 삽입 -->
    <insert id="writeMovie" parameterType="movie.bean.MovieDTO">
        INSERT INTO movie_tb (title, director, genre, release_date, rating, score, synopsis, poster)
        VALUES (#{title}, #{director}, #{genre}, #{release_date}, #{rating}, #{score}, #{synopsis}, #{poster})
        <!-- #{title}, #{director} 등은 파라미터로 전달된 값들이 매핑됨 -->
    </insert>
	
    <!-- 영화 목록 조회 -->
    <!-- 특정 범위(startNum부터 endNum까지)의 영화를 가져옴 (페이징 처리) -->
    <select id="movieList" parameterType="java.util.Map" resultType="movie">
    	SELECT * FROM movie_tb ORDER BY mcode DESC LIMIT #{startNum}, #{endNum}
        <!-- LIMIT을 통해 페이지 단위로 영화 목록을 제한하여 가져옴 -->
    </select>
    
    <!-- 영화 개수 조회 -->
    <!-- 전체 영화 개수를 가져옴 -->
    <select id="getTotalA" resultType="int">
        SELECT COUNT(*) FROM movie_tb
        <!-- movie_tb 테이블의 영화 행의 개수를 반환 -->
    </select>

    <!-- 특정 영화 조회 (영화 코드에 맞는 영화 1개 조회) -->
    <select id="getMovie" parameterType="int" resultType="movie">
    	SELECT * FROM movie_tb WHERE mcode = #{mcode}
        <!-- mcode에 해당하는 영화 정보를 조회 -->
    </select>
	
    <!-- 영화 평점 업데이트 -->
    <!-- 리뷰 테이블에서 특정 영화의 평점을 평균 계산하여 영화 테이블의 평점(score)을 업데이트 -->
    <update id="updateMovieScore" parameterType="java.util.Map">
		update movie_tb mt, (
						select mt.mcode mcode, sum(rt.score)/count(rt.score) avg_score 
						from review_tb rt 
						left join movie_tb mt on rt.movie_code = mt.mcode 
						where rt.movie_code = #{mcode}
					) t 
		set mt.score = t.avg_score 
		where mt.mcode = t.mcode;
		<!-- 리뷰 테이블의 해당 영화 리뷰 점수의 평균값을 movie_tb의 score에 반영 -->
    </update>
	
    <!-- 영화 수정 -->
    <!-- 특정 영화의 정보를 수정 -->
    <update id="updateMovie" parameterType="movie.bean.MovieDTO">
	    UPDATE movie_tb
	    SET title = #{title}, director = #{director}, genre = #{genre},
	        release_date = #{release_date}, rating = #{rating},
	        score = #{score}, synopsis = #{synopsis}, poster = #{poster}
	    WHERE mcode = #{mcode}
	    <!-- #{mcode}에 해당하는 영화의 정보를 수정함 -->
	</update>
	
    <!-- 영화 삭제 -->
    <!-- 여러 영화를 한번에 삭제 (mcode 리스트로 전달받음) -->
    <delete id="deleteMovies" parameterType="list">
	    DELETE FROM movie_tb WHERE mcode IN
	    <foreach item="mcode" collection="mcodes" open="(" separator="," close=")">
	        #{mcode}
	    </foreach>
	    <!-- 전달된 여러 mcode를 이용해 해당 영화들을 삭제 -->
	</delete>

    <!-- 영화 검색 (검색 항목에 따라 검색어가 포함된 영화 목록 개수 조회) -->
    <select id="getSelectTotal" parameterType="java.util.Map" resultType="int">
	    SELECT COUNT(*) FROM movie_tb WHERE ${type} LIKE CONCAT('%', #{value}, '%')
	    <!-- 검색어(value)가 포함된 영화의 개수를 반환 -->
	</select>

    <!-- 영화 검색 (검색 결과를 페이징 처리하여 조회) -->
    <select id="selectMovie"  parameterType="java.util.Map" resultType="movie">
		SELECT * from movie_tb 
		WHERE ${type} LIKE CONCAT('%', #{value}, '%') 
		ORDER BY mcode DESC LIMIT #{startNum}, #{endNum}
		<!-- 검색어(value)를 포함하는 영화를 가져오고, mcode 기준 내림차순으로 정렬 후 페이징 처리 -->
	</select>	

    <!-- index.jsp에서 영화 검색 -->
    <!-- 검색 조건에 따라 영화 목록을 가져옴 (페이징 없이 전체 검색) -->
    <select id="indexSelectMovie"  parameterType="java.util.Map" resultType="movie">
		SELECT * from movie_tb 
		WHERE ${type} LIKE CONCAT('%', #{value}, '%') 
		ORDER BY mcode DESC
		<!-- index 페이지에서 검색된 영화를 mcode 기준 내림차순으로 정렬하여 전체 조회 -->
	</select>

	
</mapper>