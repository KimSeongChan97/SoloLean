Linux 학습_1회_241125

-------------------------------------------------------------
223.130.137.169

ssh root@223.130.137.169
bitcamp123!@#

CLI ( 커맨드로만 처리 )

useradd 사용자계정
useradd -m angel
su - angel

숨김 항목 까지 보기
ls -al

ls -a .ssh

root@bitcamp-jenkins:~# ls -al .ba*
ba로 시작하는 모든걸 보여줌

** 디렉토리 계층 !

usr ( 접근 기준 )
home ( 유저 )

/usr/include/aio.h
-> data block

명령어 ~

ls --help

pwd : 현재 위치 알기
절대 경로를 사용하여  /usr/include 디렉토리로 이동  : cd /usr/include
상대 경로를 사용하여  /usr/bin 디렉토리로 이동  :  cd ../bin
직전에 위치했던 디렉토리로 이동  :  cd -
접속한 계정의 홈 디렉토리로 이동  :  cd ~

ls [옵션][디렉토리(파일)] : list 보기


 temp라는 이름의 디렉토리  1개 생성 : mkdir temp
여러 디렉토리를 동시에 생성 : mkdir temp2 temp3 temp4
하위 디렉토리 함께 생성 : mkdir -p temp5/sub/sub2

 rmdir temp
(빈 디렉토리가 아닐 경우 에러 발생)

 .profile 파일의 내용 출력 : cat .profile
행 번호를 붙여서 출력 : cat -n .profile
.profile, .selected_editor 파일의 내용을 붙여서 출력 : cat .profile .selected_editor


 .bashrc 파일의 내용 출력  :  more .bashrc
 .bashrc 파일의 내용 출력  :  less .bashrc
 .bashrc 파일의 앞부분 10줄 출력  :  head .bashrc
.bashrc 파일의 앞부분 3줄 출력  :  head -3 .bashrc

 .bashrc 파일의 마지막 10줄 출력  :  tail .bashrc
.bashrc 파일의 마지막 5줄 출력  :  tail -5 .bashrc

.bashrc 파일을 현재 디렉토리에 bashrc_copy라는 이름의 파일로 복사  :  
cp .bashrc bashrc_copy
**
cp [옵션] [ SOURCE 파일(디렉토리) ]...  [ DEST 파일(디렉토리) ]
		무엇을			어디로


.bashrc 파일을 temp2 디렉토리에 복사  :   cp .bashrc temp2
						상대경로지정
절대경로 지정 : cp .bashrc /root/temp2
원본과 다른 파일명 지정 : 
cp .bashrc temp2/bashrc_copy
cp .bashrc /root/temp2/bashrc_copy

  .bashrc, .profile 파일을 temp3 디렉토리에 복사  :   cp .bashrc .profile temp3

 이미 존재하는 파일인 경우 덮어쓸 것인지 질문 :   cp -i .bashrc temp2/bashrc_copy

temp2 디렉토리를 temp4 디렉토리에 복사  :   cp -r temp2 temp4

 bashrc_copy 파일을 bashrc_mv 파일로 이동(이름을 바꿈)  :  
mv bashrc_copy bashrc_mv

mv [옵션] [ SOURCE 파일(디렉토리) ]...  [ DEST 파일(디렉토리) ]
		무엇을				어디로

bashrc_mv 파일을 temp2 디렉토리로 이동  :   
mv bashrc_mv temp2
mv bashrc_mv /root/temp2
mv bashrc_mv temp2/bashrc_moved
mv bashrc_mv /root/temp2/bashrc_moved ( 이동하면서 파일명 변경 )


temp2/bashrc_copy, temp2/bashrc_moved 파일을 temp3 디렉토리로 이동  : 
mv  temp2/bashrc_copy  temp2/bashrc_moved temp3
(마지막으로 지정한 디렉토리로 이동)


이미 존재하는 파일인 경우 덮어쓸 것인지 질문  :  
mv -i  temp3/bashrc_copy temp3/bashrc_moved
해당 경로에 같은 이름의 파일이 이미 존재하는 경우

 rm [옵션] [ 파일 또는 디렉토리 ]

 temp3/bashrc_moved 파일을 삭제 :   rm temp3/bashrc_moved

rm -rf temp2   ( -f : 강제 삭제 옵션 )


파일의 링크를 생성
ln [옵션] [ 원본 파일 ] [ 링크 파일 ]
 /etc/hosts 파일에 대한 하드 링크 생성  :   ln /etc/hosts host_link

 /etc/sudoers 파일에 대한 심볼릭 링크(바로가기) 생성  :  ln -s /etc/sudoers sudoers_link

 test라는 이름의 빈 파일 생성  :  touch test
기능   :   빈 파일 만들기, 접근/수정 시간 변경
형식   :   touch [옵션] [파일]

test 파일의 수정 시간 변경  :  touch test

grep
○   기능   :   텍스트 파일에서 지정한 패턴이 포함된 행을 검색
○   형식   :   grep [옵션] [패턴] [파일]
1.  .bashrc 파일에서 ‘alias’라는 문자열이 포함된 행을 행 번호 포함하여 출력  :  grep -n “alias” .bashrc

find
○   기능   :   지정한 위치에서 조건에 맞는 파일 및 디렉토리를 검색
○   형식   :   find [경로] [조건] [동작]

1.  /etc 디렉토리에서 cron이라는 이름의 파일을 검색하고 긴 목록으로 출력  : 
 find /etc -name “cron” -ls
2.  /etc 디렉토리에서 cron이라는 이름의 파일을 검색하고 inode 값을 출력 : 
find /etc -name “cron” -exec ls -i {} \;

find 명령 형식
find /etc -name “cron” -ls
     경로  검색조건         동작

검색 조건
-name 파일명 : 파일명 검색
-type 파일 종류 : 파일 종류로 검색
f(파일), d(디렉토리 ), l(심볼릭 링크) 등 
-user 사용자 : 사용자가 소유한 파일 검색
-perm 권한 값 : 사용 권한이 일치하는 파일 검색

동작
-exec 명령 {} \; : 검색된 파일에 명령 실행 
-ok 명령 {} \; : 사용자의 확인을 받아서 명령 실행
-ls : 검색 결과를 긴 목록으로 출력


whereis
○   기능   :   지정된 이름의 바이너리 파일이나 매뉴얼 파일의 위치 검색
○   형식   :   whereis [옵션] [파일]
1.  ls 파일의 위치 검색 :  whereis ls
주요 옵션
-b : 바이너리 파일만 검색
-m : 매뉴얼 파일만 검색
-s : 소스 파일만 검색

which
○   기능   :   명령(실행) 파일의 위치를 찾아서 경로 출력
○   형식   :   which [파일]


file
○   기능   :   파일의 종류 표시
○   형식   :   file [파일]
1.  .bashrc파일의 종류 표시 :  file .bashrc

 /dev/stdin 파일의 종류 표시 :  file /dev/stdin

=============================================================
문제]
root@bitcamp-jenkins:~#

test 디렉토리 생성
test 디렉토리에 /etc/crontab 파일 복사
test 디렉토리에 crontab_link 하드 링크 만들기
test 디렉토리에 inode 확인하기 ( crontab 파일과 crontab_link가 같은 inode 이어야 한다.)
test 디렉토리에 crontab_slink 심볼릭 링크 만들기
test 디렉토리에 inode 확인하기 ( crontab 파일과 crontab_slink가 다른 inode 이어야 한다.)
test 디렉토리에 crontab_link2 하드 링크 만들기
test 디렉토리에 crontab_link2 삭제하기
test 디렉토리에 crontab_link2 가 삭제되고, inode의 값이 감소한 것 확인하기

mkdir test
cd test
cp /etc/crontab crontab
ln crontab crontab_link
ln -s crontab crontab_slink
ln crontab crontab_link2
ls -i
rm crontab_link2
ls -i


===================

쉘(Shell)이란?
리눅스 커널과 사용자를 연결해주는 인터페이스
사용자가 입력하는 명령을 읽어 해석하고 프로그램을 실행시키는 인터페이스

쉘(Shell)의 기능
명령어 해석기 기능
사용자와 커널 사이에서 명령을 해석하여 전달한다. (대화식 사용)

프로그래밍 기능
일련의 명령어와 쉘 자체로 프로그램을 만들 수 있다 (Shell Script).

사용자 환경설정 기능
리눅스의 세션 변수들을 정의하여 사용자가 리눅스 환경을 설정할 수 있다.

쉘의 종류

bourne shell 계열
sh (bourne shell)
1974년 'Stephen Bourne' (스티브 본) 이 개발한 최초의 쉘
/bin/sh
대부분의 리눅스에 기본적으로 설치
스크립트를 지원

ksh (korn shell)
유닉스에서 가장 많이 사용되는 본 쉘을 확장한 쉘
/bin/ksh
명령어 완성 기능, 히스토리 기능 지원

bash (bourne again shell)
Linux 표준 쉘로 채택 (리눅스에서 가장 많이 사용하는 쉘)
/bin/bash
본셸을 기반으로 GNU 프로젝트를 위해 'Brian Fox' (브라이언 폭스) 가 작성한 쉘
Linux, MAC OS X 등 다양한 OS에서 사용됨
명령어 완성 기능, 히스토리, 명령어 치환, 편집 등을 지원
POSIX와 호환 가능

zsh (z shell)
확장형 본쉘, 콘쉘의 재작성 쉘
/bin/zsh
강력한 history 기능
향상된 명령행 편집 기능

C Shell 계열
csh (C Shell)
본쉘의 사용성을 높인 쉘
/bin/csh
C언어의 특징을 많이 포함함
히스토리, 별명, 작업 제어 등의 기능 포함

tcsh (tc shell, tee-see-shell)
csh의 기능을 강화한 쉘
/bin/tcsh
확장 C쉘로, BSD 계열에서 가장 많이 사용
명령어 편집 기능 제공

커널이란?
커널은 운영체제의 핵심부분으로써 주로 디바이스 관리, 프로세스 관리, 메모리 관리, 시스템 콜 제공 같은 기능을 관리하는 등, 컴퓨터 자원을 관리한다.
하지만 커널은 항상 컴퓨터 자원들만 바라보고 있어 사용자와 직접적인 상호작용은 하지 않는다.
그렇기 때문에 사용자와 상호작용을 하기 위해 필요한 것이 시스템 프로그램 ( Shell ) 이다.

===

/bin
이것은 Linux의 기본 명령이 등록 되어 있는 directory 이다.
Linux 배포판에 따라 차이가 있지만 Linux 라면 대체로 비슷한 명령어가 여기에 있다.

/sbin
관리 시스템 명령어
/bin 명령은 root or user 라도 사용할 수 있는 명령어지만,
/sbin 명령은 root 사용자 이외에는 보통 환경 패스가 걸려 있지 않으므로 default로는 사용할 수 없는 명령어 이다.

/usr/bin
/usr/bin은 /bin과 달리 일반 사용자가 사용하는 명령어가 포함 되어 있다.


/usr/sbin
/usr/sbin는 관리 명령어 이다.

/usr/local/bin
/usr/local/bin은 스스로 설치한 명령어를 사용할 수 있도록 하는 장소이다.
Linux 저장소에 있는 것 이외의 것을 설치했을 때나 자작 명령어를 보관해야 할 때 유용하다.

---

sed (Stream Editor) 명령어
텍스트를 변환하는 스트림 편집기
리눅스에서 grep 명령과 비슷하게 사용할 수 있다.
vi 편집기처럼 원하는 문자열을 치환하는 등 다양한 작업을 수행할 수 있다.
어떤 파일에서 원하는 내용을 추출하거나, 치환하는 작업을 수행할 수 있다.

awk
패턴 기반의 텍스트 처리 도구
텍스트 파일의 각 줄을 읽고, 특정 조건을 만족하는 줄에 대해 작업을 수행한다.
일반적으로 파일에서 데이터를 추출하거나 변환할 때 많이 사용한다.

























































