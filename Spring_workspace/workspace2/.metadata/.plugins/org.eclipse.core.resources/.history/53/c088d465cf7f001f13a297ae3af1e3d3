package sample03;

import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class SungJukImpl implements SungJuk {
    private SungJukDTO sungJukDTO = null;

    // 생성자를 통한 의존성 주입 (Constructor Injection)
    @Autowired
    public SungJukImpl(SungJukDTO sungJukDTO) {
        this.sungJukDTO = sungJukDTO;
    }

    @Override
    public void calcTot() {
        // 총점 계산
        int tot = sungJukDTO.getKor() + sungJukDTO.getEng() + sungJukDTO.getMath();
        sungJukDTO.setTot(tot);
    }

    @Override
    public void calcAvg() {
        // 평균 계산
        double avg = sungJukDTO.getTot() / 3.0;
        sungJukDTO.setAvg(avg);
    }

    @Override
    public void display() {
        // 결과 출력
    	System.out.println("이름\t국어\t영어\t수학\t총점\t평균");
        // 추가 설명: 점수 데이터 출력 전, 데이터를 보기 쉽게 탭 문자(\t)를 사용하여 표 형식으로 출력합니다.
        System.out.print(sungJukDTO);
        // 추가 설명: SungJukDTO 객체의 toString() 메서드가 호출되며, 성적 데이터를 출력합니다.
    }

    @Override
    public void modify() {
    	// 입력을 받아 수정하는 기능
        // 추가 설명: 사용자로부터 입력을 받아 SungJukDTO 객체의 데이터를 수정합니다.
        // Scanner 클래스를 사용하여 입력을 받고, 입력된 값을 각각의 필드에 저장합니다.
        // 입력이 완료되면 총점과 평균을 다시 계산하는 calcTot() 및 calcAvg() 메서드를 호출하여 값을 업데이트합니다.
        Scanner sc = new Scanner(System.in);

        System.out.print("이름 입력: ");
        String name = sc.next();
        // 추가 설명: 사용자가 입력한 이름을 sungJukDTO 객체의 name 필드에 저장합니다.

        System.out.print("국어 입력: ");
        int kor = sc.nextInt();
        // 추가 설명: 사용자가 입력한 국어 점수를 sungJukDTO 객체의 kor 필드에 저장합니다.

        System.out.print("영어 입력: ");
        int eng = sc.nextInt();
        // 추가 설명: 사용자가 입력한 영어 점수를 sungJukDTO 객체의 eng 필드에 저장합니다.

        System.out.print("수학 입력: ");
        int math = sc.nextInt();
        // 추가 설명: 사용자가 입력한 수학 점수를 sungJukDTO 객체의 math 필드에 저장합니다.

        // sungJukDTO 객체에 수정된 데이터 설정
        sungJukDTO.setName(name);
        sungJukDTO.setKor(kor);
        sungJukDTO.setEng(eng);
        sungJukDTO.setMath(math);
        // 추가 설명: 입력받은 값을 각각의 필드에 저장하고, 총점과 평균을 다시 계산하여 갱신된 데이터를 저장합니다.
        
        // 총점과 평균 재계산
        // 추가 설명: 사용자 입력이 완료되면 calcTot() 메서드로 총점을 다시 계산하고,
        // calcAvg() 메서드로 평균을 다시 계산합니다. 이렇게 함으로써 수정된 점수를 반영한 결과가 정확하게 저장됩니다.
        calcTot();
        calcAvg();
    }
}
