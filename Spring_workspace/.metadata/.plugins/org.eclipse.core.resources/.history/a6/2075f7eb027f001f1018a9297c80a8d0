package sample01;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;

public class HelloSpring {

	public static void main(String[] args) {
		// sayHello 메서드 호출
		// MessageBeanKo messageBeanKo = new MessageBeanKo(); // 1:1 관계, 결합도 100%
		// 클래스가 많을 때는 클래스를 생성하는 코드가 많아짐
		// -> 여기서는 `MessageBeanKo`라는 클래스와 `HelloSpring` 클래스가 직접적인 1:1 관계를 맺고 있음.
		// 결합도가 높다는 것은, 만약 `MessageBeanKo`의 구현이 변경되면 `HelloSpring`도 수정이 필요하다는 의미입니다.
		// 스프링을 사용하지 않는 경우에는, 각각의 클래스에 대한 인스턴스를 직접 new 연산자로 생성해야 하기 때문에,
		// 프로젝트가 커질수록 관리가 복잡해지고 코드의 유연성이 떨어집니다.

		// 부모 = 자식, 다형성, 결합도 낮추기
		// MessageBean messageBean = new MessageBeanEn(); // 내부적으로 생성자 
		// -> 이 방식은 부모 클래스(`MessageBean`) 타입의 참조 변수가 자식 클래스(`MessageBeanEn`)의 객체를 참조하는 방식입니다.
		// 이는 다형성의 예시로, 코드의 결합도를 낮추어, 이후에 다른 `MessageBean` 구현체로 쉽게 변경할 수 있게 해줍니다.
		// 그러나 여전히 직접 객체를 생성해야 하므로, 이 부분을 스프링으로 관리하면 더 효율적입니다.
		
		// 스프링 설정파일을 이용
		// -> 스프링에서는 이러한 객체 생성을 `ApplicationContext`라는 컨테이너가 대신 관리해 줍니다.
		// `ApplicationContext`는 스프링의 핵심 컨테이너 중 하나로, 설정 파일을 읽어서 빈(Bean)을 생성하고 관리합니다.
		ApplicationContext context = new FileSystemXmlApplicationContext("src/applicationContext.xml");
		// -> `FileSystemXmlApplicationContext`는 파일 시스템에서 XML 설정 파일을 읽어와서 스프링 컨텍스트를 초기화합니다.
		// `"src/applicationContext.xml"`은 XML 파일의 경로를 나타냅니다. 이 XML 파일에는 생성할 객체(빈)의 설정 정보가 담겨 있습니다.
		// 이 컨테이너는 설정된 대로 객체를 자동으로 생성하고, 의존성 주입(Dependency Injection)을 수행합니다.
		
		MessageBean messageBean = (MessageBean) context.getBean("messageBean"); 
		// -> `context.getBean("messageBean")`는 XML 파일에서 id가 `"messageBean"`인 빈을 가져옵니다.
		// 이 메서드는 Object 타입을 반환하므로, 이를 `MessageBean` 타입으로 캐스팅해야 합니다.
		// 이렇게 스프링이 객체 생성과 관리를 대신해줌으로써 코드의 결합도를 낮추고, 유지보수를 용이하게 합니다.

		messageBean.sayHello("Spring"); // num = 1
		// -> `sayHello` 메서드를 호출하면서 인수로 `"Spring"` 문자열을 전달합니다.
		// 이 메서드는 `messageBean` 객체에 구현된 대로 동작하게 됩니다. 어떤 구현체인지에 따라 다른 동작을 수행할 수 있습니다.
		// 예를 들어, 한국어 메시지를 출력하거나 영어로 메시지를 출력하는 방식이 다를 수 있습니다.
		System.out.println();
		
		// MessageBean messageBean = new MessageBeanKo();
		
		MessageBean messageBean2 = (MessageBean) context.getBean("messageBean");
		messageBean2.sayHello("Spring"); // num = 1 일줄 알지만, 2
		System.out.println();

		MessageBean messageBean3 = (MessageBean) context.getBean("messageBean");
		messageBean3.sayHello("Spring"); // num = 1 일줄 알지만, 3
		System.out.println();
				
	} // Spring 은 기본이 싱글톤이다.

}

// 변환되는 클래스 생성을 스프링이 해준다.
// Scanner scan = new Scanner(System.in); 은 그냥 new 한다.
// -> 일반적인 경우에는 `Scanner`처럼 new 키워드를 사용하여 객체를 직접 생성하지만, 스프링에서는 객체 생성과 관리를 스프링 컨테이너가 대신 처리합니다.
// 이로 인해 객체 생성과 관련된 코드가 분리되고, 코드의 유지보수성과 재사용성이 높아집니다.
