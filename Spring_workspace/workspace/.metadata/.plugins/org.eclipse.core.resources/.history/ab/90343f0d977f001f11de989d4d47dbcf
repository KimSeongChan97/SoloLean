<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- sample01 -->
	<bean id="messageBean" class="sample01.MessageBeanKo" scope="prototype">
	    <!-- 
	    1. <bean> 태그는 스프링에서 관리할 객체(빈)를 정의하는 태그입니다.
	       이 태그는 스프링 컨테이너가 객체를 생성하고 관리하도록 합니다.
	    
	    2. id="messageBean"
	       - id 속성은 이 빈을 참조할 때 사용할 고유 식별자입니다.
	       - 스프링 애플리케이션에서 이 id를 사용하여 해당 빈을 가져올 수 있습니다.
	       - 예를 들어, Java 코드에서 context.getBean("messageBean")을 호출하여 이 빈을 가져옵니다.
	    
	    3. class="sample01.MessageBeanKo"
	       - class 속성은 이 빈이 생성될 때 사용할 클래스의 전체 경로를 지정합니다.
	       - 여기서 'sample01.MessageBeanKo'는 'sample01' 패키지 안에 있는 MessageBeanKo 클래스를 의미합니다.
	       - 스프링은 이 클래스를 기반으로 인스턴스를 생성하고, 이를 관리하게 됩니다.
	
	    4. scope="prototype"
	       - scope 속성은 스프링이 빈을 어떻게 관리할지 정의하는 속성입니다.
	       - 기본적으로 스프링 빈은 싱글톤(singleton)으로 관리되며, 이는 애플리케이션 내에서 해당 클래스의 인스턴스가 하나만 생성됨을 의미합니다.
	       - 그러나 `prototype` 스코프는 getBean() 메서드를 호출할 때마다 새로운 인스턴스를 생성하게 합니다.
	       - 즉, 이 빈은 싱글톤이 아니며, 매번 새로운 객체가 필요할 때마다 스프링이 인스턴스를 새로 생성해줍니다.
	       - `prototype` 스코프는 상태를 가진 객체나, 매번 다른 동작을 해야 하는 객체의 경우 유용하게 사용됩니다.
	
	    5. 이 빈 정의는 MessageBeanKo라는 클래스를 스프링이 대신 생성하고 관리하도록 설정한 것입니다.
	       스코프가 "prototype"이므로, Java 코드에서 `context.getBean("messageBean")`을 호출할 때마다 새로운 인스턴스가 반환됩니다.
	       즉, new MessageBeanKo()를 직접 호출하지 않고도 스프링이 매번 새로운 객체를 생성해줍니다.

		6. 의존성 주입(Dependency Injection)
		   - 이 XML 설정 파일은 의존성 주입의 좋은 예시입니다.
		   - HelloSpring 클래스는 Calc 인터페이스에 의존하지만, 구체적인 구현 클래스(CalcAdd, CalcMul)를 직접 생성하지 않습니다.
		   - 대신, Spring 컨테이너가 이 의존성을 주입해줍니다.
		
		7. 인터페이스 기반 프로그래밍
		   - Calc 인터페이스를 사용함으로써, 구체적인 구현에 의존하지 않고 추상화에 의존하는 설계 원칙을 따르고 있습니다.
		   - 이는 코드의 유연성과 확장성을 높여줍니다.
		
		8. XML 기반 설정
		   - 이 예제는 XML을 사용한 Spring 설정을 보여줍니다.
		   - 최신 Spring 프로젝트에서는 Java 기반 설정이나 어노테이션 기반 설정을 더 많이 사용하지만, XML 설정을 이해하는 것도 중요합니다.
	    -->
	</bean>
	
	<!-- sample02 -->
	<bean id="calcAdd" class="sample02.CalcAdd" />
	<bean id="calcMul" class="sample02.CalcMul" />
	<!-- 
	1. sample02.CalcAdd와 sample02.CalcMul은 각각 Calc 인터페이스를 구현한 클래스들로 보입니다.
	   - `CalcAdd`는 덧셈 기능을, `CalcMul`은 곱셈 기능을 구현한 클래스일 수 있습니다.
	   - 두 클래스 모두 Calc 인터페이스를 구현함으로써, 구체적인 구현체 대신 인터페이스에 의존하는 방식으로 애플리케이션이 설계되었을 가능성이 큽니다.
	
	2. id="calcAdd" 및 id="calcMul"
	   - 각각 `calcAdd`와 `calcMul`은 빈을 식별하는 고유 ID입니다.
	   - Java 코드에서 `context.getBean("calcAdd")`와 같은 방식으로 이 빈을 불러올 수 있습니다.
	   - 이 ID들은 각 클래스의 기능(덧셈, 곱셈)을 쉽게 구분하고 사용할 수 있도록 명확하게 이름이 지정되었습니다.
	
	3. class="sample02.CalcAdd" 및 class="sample02.CalcMul"
	   - 각각 `sample02.CalcAdd`와 `sample02.CalcMul` 클래스는 `sample02` 패키지에 위치한 덧셈과 곱셈 연산을 처리하는 클래스들입니다.
	   - 스프링 컨테이너는 이 클래스들의 인스턴스를 생성하고 관리합니다.
	   
	4. 기본 스코프 (싱글톤)
	   - 별도로 `scope` 속성이 명시되지 않았기 때문에, 이 두 빈은 기본적으로 싱글톤(Singleton) 스코프로 관리됩니다.
	   - 싱글톤 스코프에서는 애플리케이션 실행 중 하나의 인스턴스만 생성되며, 이를 통해 메모리 사용을 절약할 수 있습니다.
	   - 스프링 컨테이너에서 한 번 생성된 `CalcAdd` 및 `CalcMul` 빈은 모든 곳에서 동일한 인스턴스를 공유하게 됩니다.
	
	5. 의존성 주입의 사용
	   - 만약 다른 클래스에서 이 두 빈을 필요로 한다면, 스프링 컨테이너는 자동으로 해당 빈을 주입할 수 있습니다.
	   - 예를 들어, `HelloSpring` 클래스가 `Calc` 인터페이스를 통해 `calcAdd` 또는 `calcMul`을 사용하게 된다면, 스프링은 `Calc` 타입의 변수를 해당 빈으로 자동 주입할 수 있습니다.
	   
	6. XML 기반 설정에서의 간편한 확장
	   - 새로운 연산 기능(예: 나눗셈)을 추가하려면, 유사한 방식으로 `CalcDiv` 클래스를 추가하고 XML 파일에 새로운 `<bean>` 태그를 추가하면 됩니다.
	   - XML 설정을 사용하면 의존성 관리와 빈의 생명주기를 한눈에 파악할 수 있는 장점이 있습니다.
	   
	7. 인터페이스 기반 설계의 장점
	   - `Calc` 인터페이스를 사용하는 것은 다양한 계산 방식을 유연하게 변경할 수 있는 구조를 제공합니다.
	   - 만약 더 복잡한 계산 기능을 추가하고 싶다면, 새로운 클래스를 만들고 이 인터페이스를 구현하면 되므로 기존 코드를 수정하지 않고도 기능 확장이 가능합니다.
	-->
	
	<!-- sample03 -->
	<bean id="sungJukImpl" class="sample03.SungJukImpl" />
	<!-- 
	1. id="sungJukImpl"
	   - `sungJukImpl`은 이 빈을 식별하기 위한 고유 ID입니다.
	   - 스프링 애플리케이션 내에서 이 빈을 참조할 때 이 ID를 사용하게 됩니다.
	   - 예를 들어, Java 코드에서 `context.getBean("sungJukImpl")`으로 이 빈을 가져올 수 있습니다.
	   
	2. class="sample03.SungJukImpl"
	   - `sample03.SungJukImpl` 클래스는 `sample03` 패키지에 있는 SungJukImpl 클래스를 의미합니다.
	   - 스프링 컨테이너가 이 클래스를 기반으로 객체를 생성하여 관리하게 됩니다.
	   
	3. 싱글톤 스코프
	   - 이 빈 정의에서는 `scope` 속성을 명시하지 않았기 때문에 기본적으로 싱글톤(Singleton) 스코프가 적용됩니다.
	   - 즉, 애플리케이션에서 `sungJukImpl` 빈은 하나의 인스턴스만 생성되며, 모든 요청에 대해 동일한 객체가 사용됩니다.
	   - 싱글톤 빈은 상태를 공유할 필요가 없거나, 리소스를 절약하기 위해 사용되는 경우 유용합니다.
	   
	4. SungJukImpl 클래스
	   - `SungJukImpl` 클래스는 주로 성적을 처리하는 구현 클래스일 가능성이 큽니다.
	   - 예를 들어, 성적 데이터를 받아서 처리(평균 계산, 성적 관리 등)하는 로직을 구현했을 수 있습니다.
	   - 이 클래스는 특정 인터페이스나 추상 클래스를 구현하여 성적 처리 관련 메서드를 정의하고, 스프링이 그 인스턴스를 관리하도록 설정했을 가능성이 큽니다.
	   
	5. XML 설정을 통한 관리
	   - 이 빈 정의는 XML 기반 설정을 사용하여 SungJukImpl 클래스를 스프링 컨테이너에서 관리하도록 설정한 것입니다.
	   - XML 설정을 통해 SungJukImpl 클래스의 인스턴스를 생성, 주입 및 관리하는 과정을 명시적으로 제어할 수 있습니다.
	   
	6. 의존성 주입(Dependency Injection)
	   - 만약 `SungJukImpl` 클래스가 다른 의존성을 필요로 한다면, 스프링 컨테이너는 해당 의존성을 자동으로 주입할 수 있습니다.
	   - 이는 클래스 내에서 객체 생성과 관리의 부담을 덜어주며, 스프링 컨테이너가 해당 의존성을 처리해줍니다.
	   
	7. 확장 가능성
	   - 이 구조는 성적 처리를 위한 다른 구현체(예: `SungJukImpl2` 또는 `AdvancedSungJukImpl`)가 추가되더라도 쉽게 확장할 수 있는 유연한 구조를 제공합니다.
	   - 새로운 클래스를 만들고 XML 파일에 새로운 `<bean>` 태그를 추가하여, 성적 처리를 위한 다른 방식도 손쉽게 관리할 수 있습니다.
	
	8. 인터페이스 기반 설계
	   - 일반적으로 이와 같은 클래스는 인터페이스를 구현했을 가능성이 큽니다.
	   - `SungJukImpl`이 인터페이스를 구현했다면, 다른 구현체와의 교체가 용이하며, 다형성을 활용할 수 있습니다.
	-->

</beans>
