<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- 	
    <bean id="messageBean" class="sample01.MessageBeanKo" scope="prototype">
    1. <bean> 태그는 스프링에서 관리할 객체(빈)를 정의하는 태그입니다.
       이 태그는 스프링 컨테이너가 객체를 생성하고 관리하도록 합니다.
       -> 스프링 컨테이너는 애플리케이션 실행 중 필요한 객체를 직접 생성하지 않고, 스프링이 자동으로 생성하고 관리하는 역할을 수행합니다.

    2. id="messageBean"
       - id 속성은 이 빈을 참조할 때 사용할 고유 식별자입니다.
       - 스프링 애플리케이션에서 이 id를 사용하여 해당 빈을 가져올 수 있습니다.
       - 예를 들어, Java 코드에서 context.getBean("messageBean")을 호출하여 이 빈을 가져옵니다.
       -> id는 해당 빈을 참조할 때 사용하는 이름입니다. 스프링에서 빈을 불러올 때 이 id를 사용하여 객체를 찾습니다.

    3. class="sample01.MessageBeanKo"
       - class 속성은 이 빈이 생성될 때 사용할 클래스의 전체 경로를 지정합니다.
       - 여기서 'sample01.MessageBeanKo'는 'sample01' 패키지 안에 있는 MessageBeanKo 클래스를 의미합니다.
       - 스프링은 이 클래스를 기반으로 인스턴스를 생성하고, 이를 관리하게 됩니다.
       -> `MessageBeanKo` 클래스는 스프링이 이 빈을 생성할 때 사용되는 구체적인 클래스입니다.

    4. scope="prototype"
       - scope 속성은 스프링이 빈을 어떻게 관리할지 정의하는 속성입니다.
       - 기본적으로 스프링 빈은 싱글톤(singleton)으로 관리되며, 이는 애플리케이션 내에서 해당 클래스의 인스턴스가 하나만 생성됨을 의미합니다.
       - 그러나 `prototype` 스코프는 getBean() 메서드를 호출할 때마다 새로운 인스턴스를 생성하게 합니다.
       - 즉, 이 빈은 싱글톤이 아니며, 매번 새로운 객체가 필요할 때마다 스프링이 인스턴스를 새로 생성해줍니다.
       - `prototype` 스코프는 상태를 가진 객체나, 매번 다른 동작을 해야 하는 객체의 경우 유용하게 사용됩니다.
       -> `singleton` 스코프는 객체를 한 번만 생성하지만, `prototype`은 매번 새로운 객체를 생성합니다.
       -> 주로 매번 다른 값을 처리하는 객체나 상태를 가질 수 있는 객체에 유용합니다.

    5. 이 빈 정의는 MessageBeanKo라는 클래스를 스프링이 대신 생성하고 관리하도록 설정한 것입니다.
       스코프가 "prototype"이므로, Java 코드에서 `context.getBean("messageBean")`을 호출할 때마다 새로운 인스턴스가 반환됩니다.
       즉, new MessageBeanKo()를 직접 호출하지 않고도 스프링이 매번 새로운 객체를 생성해줍니다.
       -> `scope="prototype"`으로 설정된 경우, 각 호출에서 새로운 객체가 반환되므로 상태가 공유되지 않습니다.
    </bean> 
-->

<context:component-scan base-package="sample01" />

<!-- 
    1. <context:component-scan> 태그는 스프링의 컴포넌트 스캔 기능을 활성화하는 설정입니다.
       - 스프링은 이 태그를 통해 특정 패키지에서 빈으로 등록할 클래스를 찾아내고 자동으로 빈을 생성하여 컨테이너에 등록합니다.
       - 이 예시에서는 `sample01` 패키지 내에서 @Component, @Service, @Repository, @Controller와 같은 애노테이션이 붙은 클래스를 자동으로 빈으로 등록합니다.
       -> 수동으로 빈을 등록하지 않고, 스프링이 @Component 계열 애노테이션을 붙인 클래스를 찾아서 빈으로 등록하는 역할을 합니다.

    2. base-package="sample01"
       - base-package 속성은 컴포넌트 스캔을 할 기준 패키지를 지정하는 역할을 합니다.
       - 여기서는 `sample01` 패키지와 그 하위 패키지에 있는 클래스들이 스캔되어 빈으로 등록됩니다.
       -> 스프링이 빈을 스캔하는 범위를 지정하는 속성입니다. 예를 들어, `sample01` 패키지 내의 클래스를 스캔해 자동으로 빈을 등록합니다.

    3. @Component와 관련된 애노테이션 사용
       - 이 설정을 통해 @Component, @Service, @Repository, @Controller와 같은 스프링의 애노테이션이 붙은 클래스들을 자동으로 빈으로 등록할 수 있습니다.
       - 수동으로 <bean> 태그를 사용하지 않고도, 애노테이션을 통해 빈을 정의하고 스프링이 이를 자동으로 관리할 수 있습니다.
       -> <bean> 태그를 사용하지 않아도 클래스에 애노테이션만 추가하면 스프링이 빈을 자동으로 생성하고 관리하게 됩니다.
-->

<context:component-scan base-package="sample02" />

<!-- <context:component-scan base-package="sample03" /> -->

</beans>
