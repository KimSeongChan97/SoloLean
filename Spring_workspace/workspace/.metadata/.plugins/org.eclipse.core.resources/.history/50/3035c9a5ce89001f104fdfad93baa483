<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user.dao.UserDAO">
    
    <!-- 중복아이디 체크 -->
    <!-- id로 사용자 정보를 조회하는 SQL 쿼리 -->
    <!-- #{id}는 MyBatis가 전달받은 매개변수를 해당 쿼리에 바인딩하는 부분입니다. -->
    <select id="getExistId" parameterType="String" resultType="userDTO">
        SELECT * FROM usertable WHERE id = #{id}
        <!-- #{id}는 SQL 실행 시 전달받은 사용자 id 값을 의미합니다. 
             해당 id로 데이터베이스에서 일치하는 사용자가 있는지 조회합니다. -->
    </select>
    
    <!-- 사용자 정보 삽입 -->
    <!-- 사용자 등록을 위한 INSERT 쿼리 -->
    <!-- #{name}, #{id}, #{pwd}는 각각 사용자가 입력한 값을 SQL에 바인딩합니다. -->
    <insert id="write" parameterType="userDTO">
        INSERT INTO usertable (name, id, pwd) VALUES (#{name}, #{id}, #{pwd})
        <!-- 사용자의 이름(name), 아이디(id), 비밀번호(pwd)를 usertable 테이블에 삽입합니다. -->
    </insert>
    
    <!-- 모든 사용자 목록 가져오기 -->
    <!-- 사용자 정보를 페이지 단위로 가져오기 위한 SELECT 쿼리 -->
    <!-- resultType="user"는 이 쿼리 결과가 User 객체와 매핑된다는 것을 의미합니다. -->
    <select id="list" resultType="userDTO">
        SELECT * FROM usertable limit ${startNum}, #{endNum}
        <!-- limit는 MySQL에서 사용되는 페이징 처리 구문으로, ${startNum}에서 #{endNum}만큼의 레코드를 가져옵니다. -->
        <!-- ${startNum}는 시작 번호, #{endNum}는 가져올 데이터의 수를 나타냅니다. -->
    </select>
    
    <!-- 페이징 -->
    <!-- 전체 사용자 수를 조회하는 SELECT 쿼리 -->
    <select id="getTotalA" resultType="int">
        select count(*) from usertable 
        <!-- 전체 사용자 수를 계산하여 페이징 처리를 위한 총 레코드 수를 반환합니다. -->
    </select>
    
    <!-- 사용자정보 조회(id 조회) -->
    <!-- 특정 id에 해당하는 사용자의 정보를 가져오는 SELECT 쿼리 -->
    <!-- #{id}는 매개변수로 전달된 사용자의 id 값을 의미합니다. -->
    <select id="getUser" parameterType="String" resultType="userDTO">
        select * from usertable where id = #{id}
        <!-- 특정 사용자 id에 해당하는 레코드를 usertable에서 가져옵니다. -->
    </select>
    
    <!-- 사용자 정보 업데이트 -->
    <!-- 사용자 정보를 수정하는 UPDATE 쿼리 -->
    <!-- #{name}, #{pwd}, #{id}는 각각 업데이트할 값을 의미합니다. -->
    <update id="update" parameterType="userDTO">
        UPDATE usertable SET name = #{name}, pwd = #{pwd} WHERE id = #{id}
        <!-- 사용자 id에 해당하는 레코드를 찾아 사용자의 이름과 비밀번호를 수정합니다. -->
    </update>
	
	<!-- 삭제VER2 -->
	<select id="getExistPwd" parameterType="String" resultType="userDTO">
		select * from usertable where id = #{id}
	</select>
	
    <!-- 사용자 정보 삭제 -->
    <!-- 특정 id에 해당하는 사용자의 정보를 삭제하는 DELETE 쿼리 -->
    <!-- #{id}는 삭제할 사용자의 id를 의미합니다. -->
    <delete id="delete" parameterType="userDTO">
        DELETE FROM usertable WHERE id = #{id}
        <!-- 해당 사용자 id를 기준으로 usertable에서 해당 사용자 레코드를 삭제합니다. -->
    </delete>
    
    
</mapper>
