package spring.conf;

import org.apache.commons.dbcp2.BasicDataSource;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;

@Configuration  // 이 어노테이션은 Spring 설정 클래스임을 나타냅니다. XML이 아닌 자바 클래스로 설정을 관리할 때 사용합니다.
@PropertySource("classpath:spring/db.properties")  // 외부 properties 파일에서 DB 연결 정보를 불러오기 위해 사용됩니다.
public class SpringConfiguration {

    // @Value 어노테이션은 properties 파일에서 값을 읽어올 때 사용됩니다. db.properties 파일에서 각각의 값(driver, url, username, password)을 가져옵니다.
    private @Value("${jdbc.driver}") String driver;  // jdbc.driver 속성을 db.properties 파일에서 가져옴
    private @Value("${jdbc.url}") String url;  // jdbc.url 속성을 db.properties 파일에서 가져옴
    private @Value("${jdbc.username}") String username;  // jdbc.username 속성을 db.properties 파일에서 가져옴
    private @Value("${jdbc.password}") String password;  // jdbc.password 속성을 db.properties 파일에서 가져옴

    // DB와 연결하기 위한 DataSource를 설정합니다. 
    // BasicDataSource는 DBCP2(Connection Pooling)를 사용하여 DB 연결을 관리합니다. 커넥션 풀은 여러 DB 연결을 미리 만들어두고 필요할 때 재사용하는 방식으로 성능을 높입니다.
    @Bean
    public BasicDataSource dataSource() {

        BasicDataSource basicDataSource = new BasicDataSource();  // DBCP2의 BasicDataSource 객체 생성

        basicDataSource.setDriverClassName(driver);  // db.properties에서 가져온 드라이버 클래스 설정 (예: MySQL의 경우 com.mysql.cj.jdbc.Driver)
        basicDataSource.setUrl(url);  // db.properties에서 가져온 DB URL 설정 (DB의 주소와 포트)
        basicDataSource.setUsername(username);  // db.properties에서 가져온 DB 사용자 이름 설정
        basicDataSource.setPassword(password);  // db.properties에서 가져온 DB 비밀번호 설정

        return basicDataSource;  // 설정된 DataSource 객체 반환. 이 DataSource는 이후에 DB 연결에 사용됩니다.

    }

    // MyBatis의 SqlSessionFactory를 설정합니다. SqlSessionFactory는 MyBatis에서 SQL 실행과 트랜잭션을 관리하는 핵심 클래스입니다.
    @Bean
    public SqlSessionFactory sqlSessionFactory() throws Exception {
        SqlSessionFactoryBean sqlSessionFactoryBean = new SqlSessionFactoryBean();  // SqlSessionFactory를 생성하기 위한 팩토리 빈
        sqlSessionFactoryBean.setDataSource(dataSource());  // 위에서 설정한 DataSource를 사용하여 DB 연결을 설정
        sqlSessionFactoryBean.setConfigLocation(new ClassPathResource("spring/mybatis-config.xml"));  // MyBatis 설정 파일 위치 설정
        sqlSessionFactoryBean.setMapperLocations(new ClassPathResource("userMapper.xml"));  // MyBatis 매퍼 파일 설정. SQL 쿼리와 자바 객체를 매핑하는 데 사용됩니다.

        return sqlSessionFactoryBean.getObject();  // 팩토리 빈에서 실제 SqlSessionFactory 객체를 반환

    }

    // SqlSessionTemplate을 설정합니다. 이 클래스는 MyBatis의 SqlSession을 구현한 것으로, Spring과 MyBatis의 통합을 도와줍니다. 
    // SqlSessionTemplate은 스레드 세이프하고, SQL 실행 및 트랜잭션을 쉽게 관리할 수 있습니다.
    @Bean
    public SqlSessionTemplate sqlSession() throws Exception {
        SqlSessionTemplate sqlSessionTemplate = new SqlSessionTemplate(sqlSessionFactory());  // SqlSessionFactory에서 SqlSessionTemplate 생성
        return sqlSessionTemplate;  // SqlSessionTemplate 객체 반환. 이 객체를 사용해 SQL 쿼리를 실행할 수 있습니다.

    }

    // 트랜잭션 관리를 위한 DataSourceTransactionManager 설정입니다.
    // 이 매니저는 JDBC를 통한 트랜잭션을 관리하며, Spring의 @Transactional 어노테이션과 함께 사용됩니다.
    @Bean
    public DataSourceTransactionManager transactionManager() {
        DataSourceTransactionManager dataSourceTransactionManager =
                new DataSourceTransactionManager(dataSource());  // DataSource 기반으로 트랜잭션 매니저 생성
        return dataSourceTransactionManager;  // 트랜잭션 매니저 객체 반환. 트랜잭션 관리에 사용됩니다.
    }

}
