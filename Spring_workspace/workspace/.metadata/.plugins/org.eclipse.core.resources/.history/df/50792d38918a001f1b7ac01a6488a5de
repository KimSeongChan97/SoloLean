package user.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import user.bean.UserUploadDTO;
import user.dao.UserUploadDAO;
import user.service.ObjectStorageService;
import user.service.UserUploadService;

@Service
public class UserUploadServiceImpl implements UserUploadService {
    
    @Autowired
    private UserUploadDAO userUploadDAO; 
    // `userUploadDAO`는 데이터베이스와 상호작용하는 객체입니다.
    // `DAO`는 Data Access Object의 약자로, 데이터베이스 작업을 처리하는 계층을 의미합니다.
    
    @Autowired
    private HttpSession session; 
    // `HttpSession`은 현재 사용자의 세션에 대한 정보를 저장하고 관리하는 객체입니다.
    // 여기서는 업로드 파일의 경로를 설정할 때 사용됩니다.
    
    @Autowired
    private ObjectStorageService objectStorageService; 
    // `ObjectStorageService`는 클라우드 상의 객체 스토리지(NCP)를 다루는 서비스입니다.
    // 파일을 S3에 업로드하거나 삭제하는 작업을 담당합니다.
    
    private String bucketName = "bitcamp-9th-bucket-65"; 
    // NCP에서 사용하는 S3 버킷 이름을 지정합니다. 
    // 버킷은 파일을 저장하는 공간이며, 여기서는 "bitcamp-9th-bucket-65"라는 이름의 버킷을 사용합니다.

    @Override
    public void upload(List<UserUploadDTO> imageUploadList) {
        // `upload` 메서드는 데이터베이스에 파일 업로드 정보를 저장합니다.
        userUploadDAO.upload(imageUploadList); // DAO를 통해 업로드된 파일 리스트를 저장합니다.
    }
    
    @Override
    public List<UserUploadDTO> uploadList() {
        // `uploadList` 메서드는 업로드된 파일 목록을 조회하는 메서드입니다.
        // 데이터베이스에서 모든 업로드된 파일의 목록을 가져옵니다.
        return userUploadDAO.uploadList();
    }
    
    @Override
    public UserUploadDTO getuploadDTO(String seq) {
        // `getuploadDTO`는 특정 파일(이미지)의 정보를 가져오는 메서드입니다.
        // `seq`는 파일의 고유 식별자(시퀀스)이며, 이를 기반으로 데이터베이스에서 파일 정보를 조회합니다.
        return userUploadDAO.getuploadDTO(seq);
    }
    
    @Override
    public void uploadUpdate(UserUploadDTO userUploadDTO, MultipartFile img) {
        
        // 실제 폴더
        // 서버의 실제 파일 저장 경로를 구합니다. 이 경로는 WAR 파일 내부의 `WEB-INF/storage` 디렉토리를 의미합니다.
        String filePath = session.getServletContext().getRealPath("WEB-INF/storage");  
        System.out.println("실제 폴더 = " + filePath); 
        // `session.getServletContext().getRealPath`는 서버 상의 실제 물리적 경로를 가져오는 메서드입니다.
        
        System.out.println("img = " + img);
        	if(img.getSize() != 0) {
        // Object Storage (NCP) 는 이미지를 덮어쓰지 않는다.
        // NCP의 Object Storage는 파일을 덮어쓰는 방식이 아닌, 고유한 파일 이름을 생성하여 처리합니다.
        // 기존 이미지를 삭제하고 나서 새로운 이미지를 넣어야 한다.
        // 먼저 기존 이미지를 삭제한 후, 새로운 이미지를 업로드하는 절차를 따릅니다.
        		
        // DB 에서 seq 에 해당하는 imageFileName 을 꺼내와서 현재 DB에 저장된 파일 이름을 조회합니다.
        // Object Storage (NCP)의 이미지를 삭제하고, Object Storage 상에서 이 파일을 삭제한 후,
        // 새로운 이미지를 업로드 한다.
        
        // seq 가져오기
        // `userUploadDTO.getSeq()`를 사용하여 해당 이미지의 시퀀스를 가져옵니다.
        String imageFileName = userUploadDAO.getImageFileName(userUploadDTO.getSeq());
        // 데이터베이스에서 해당 시퀀스(seq)에 대한 `imageFileName`을 가져옵니다.
        System.out.println("imageFileName = " + imageFileName); 

        // 1. 이미지 삭제
        // 기존의 이미지를 Object Storage에서 삭제합니다.
        objectStorageService.deleteFile(bucketName, "storage/", imageFileName);
        // `deleteFile` 메서드는 Object Storage에 저장된 특정 파일을 삭제하는 작업을 수행합니다.
        // `bucketName`, `storage/` 경로와 이미지 파일 이름을 인자로 받아 해당 파일을 삭제합니다.

        // 2. 새로운 객체 이미지 삽입
        // 새로운 이미지를 Object Storage에 업로드하고, 업로드된 파일 이름을 반환받습니다.
        imageFileName = objectStorageService.uploadFile(bucketName, "storage/", img);
        // `uploadFile` 메서드는 새로운 파일을 Object Storage에 업로드하고, 업로드된 파일의 고유 이름을 반환합니다.
        
        String imageOriginalFileName = img.getOriginalFilename();  
        // 업로드된 파일의 원본 파일 이름을 가져옵니다.
        // `getOriginalFilename()`은 사용자가 업로드한 파일의 실제 이름을 반환합니다.
        
        File file = new File(filePath, imageOriginalFileName);  
        // `File` 객체를 생성하여, 해당 경로에 파일을 생성할 준비를 합니다.
        // `filePath`는 서버 상의 실제 경로이고, `imageOriginalFileName`은 원본 파일 이름입니다.
        
        try {
            img.transferTo(file);  // 업로드된 파일을 지정한 경로로 실제 저장합니다.
            // `transferTo` 메서드는 업로드된 파일을 지정된 경로에 저장하는 메서드입니다.
            // 여기서 `file` 경로는 위에서 지정한 서버의 실제 폴더입니다.
        } catch (IllegalStateException e) {
            e.printStackTrace();
            // 파일을 저장하는 과정에서 상태가 잘못되었을 때 예외 처리.
        } catch (IOException e) {
            e.printStackTrace();
            // 파일을 저장하는 과정에서 IO 예외가 발생했을 때 처리.
        }

        // userUploadDTO 객체에 새로운 파일 이름과 원본 파일 이름을 설정합니다.
        userUploadDTO.setImageFileName(imageFileName);
        userUploadDTO.setImageOriginalFileName(imageOriginalFileName);
        // 새로운 파일 이름과 원본 파일 이름을 DTO 객체에 설정하여 이후 데이터베이스에 업데이트할 수 있게 합니다.
        
    	} else {
        	
        } 
        	// 이미지 수정 없이 다른거만 수정해서 올린다면, Size=0, 그리고 fileName 은 없다, 그러므로
        	// getSize가 != 0 일 경우로 해두고,  == 0 일 경우에는 else 에서 처리한다.
        
        // DB 연동
        // 수정된 파일 이름, 설명 등을 데이터베이스에 업데이트합니다.
        userUploadDAO.uploadUpdate(userUploadDTO);
        // `uploadUpdate` 메서드는 데이터베이스에서 해당 레코드를 수정하는 역할을 합니다.
        
    }

}
