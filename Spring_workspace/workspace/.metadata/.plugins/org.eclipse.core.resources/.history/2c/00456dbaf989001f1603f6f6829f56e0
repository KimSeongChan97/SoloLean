package user.controller;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

//import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import user.bean.UserUploadDTO;
import user.service.ObjectStorageService;
import user.service.UserUploadService;

@Controller
@RequestMapping(value="user")
public class UserUploadController {
	
	@Autowired
	private UserUploadService userUploadService;
	
	@Autowired
	private ObjectStorageService objectStorageService;
	
	private String bucketName = "bitcamp-9th-bucket-65";
	
	@RequestMapping(value="uploadForm")
	public String uploadForm() {
		return "/upload/uploadForm";  // 업로드 폼 페이지를 반환
	}
	
	@RequestMapping(value="uploadAJaxForm")
	public String uploadAJaxForm() {
		return "/upload/uploadAJaxForm";  // Ajax를 사용한 업로드 폼 페이지를 반환
	}
	
	// 1개의 데이터를 업로드 할 때
	/*
	@RequestMapping(value="upload", method=RequestMethod.POST)
	@ResponseBody
	public String upload(@ModelAttribute UserUploadDTO userUploadDTO,
						 @RequestParam MultipartFile img,
						 HttpSession session) {
		// 실제 폴더
		// String filePath = 세션
		String filePath = session.getServletContext().getRealPath("WEB-INF/storage");
		System.out.println("실제 폴더 = " + filePath);
		// D:\Spring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\SpringProject\WEB-INF\storage
		String imageOriginalFileName;
		File file;
		
		imageOriginalFileName = img.getOriginalFilename();
		
		file = new File(filePath, imageOriginalFileName);
		
		try {
			img.transferTo(file);  // 업로드된 파일을 지정된 경로로 저장
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		String result = "<span>"
						+ "<img src='/spring/storage/" + imageOriginalFileName + "' width='200' height='200'>"
						+ "</span>";
		// url : '/spring/storage/' 은 가상의 위치이다.
		// 실제 파일은 WEB-INF 폴더 안에 저장되지만, 브라우저에서 접근할 수 있는 가상의 경로를 통해 이미지를 불러온다.

		System.out.println(userUploadDTO.getImageName() + ", "
							+ userUploadDTO.getImageContent() + ", "
							+ userUploadDTO.getImageFileName() + ", "
							+ userUploadDTO.getImageOriginalFileName());
		userUploadDTO.setImageOriginalFileName(imageOriginalFileName);

		//"/upload/uploadForm"
		return result;  // 결과를 HTML 형식의 문자열로 반환
	}
	*/
	
	/*
	// 2개 이상의 데이터를 업로드할 때
	@RequestMapping(value="upload", method=RequestMethod.POST)
	@ResponseBody
	public String upload(@ModelAttribute UserUploadDTO userUploadDTO,
						 @RequestParam MultipartFile[] img,
						 HttpSession session) {
		// 실제 폴더
		// String filePath = 세션
		String filePath = session.getServletContext().getRealPath("WEB-INF/storage");
		System.out.println("실제 폴더 = " + filePath);
		// D:\Spring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\SpringProject\WEB-INF\storage
		String imageOriginalFileName;
		File file;
		String result;
		
		// --------------------------------------
		imageOriginalFileName = img[0].getOriginalFilename();
		file = new File(filePath, imageOriginalFileName);
		
		try {
			img[0].transferTo(file);  // 첫 번째 파일 업로드
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		result = "<span>"
						+ "<img src='/spring/storage/" + imageOriginalFileName + "' width='200' height='200'>"
						+ "</span>";
		// --------------------------------------
		imageOriginalFileName = img[1].getOriginalFilename();
		file = new File(filePath, imageOriginalFileName);
		
		try {
			img[1].transferTo(file);  // 두 번째 파일 업로드
		} catch (IllegalStateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		result += "<span>"
			   + "<img src='/spring/storage/" + imageOriginalFileName + "' width='200' height='200'>"
			   + "</span>";
		// --------------------------------------
		// url : '/spring/storage/' 은 가상의 위치이다.
		// 두 개의 파일을 각각 업로드한 후, 그 결과 이미지를 화면에 표시하기 위해 HTML을 구성한다.

		System.out.println(userUploadDTO.getImageName() + ", "
							+ userUploadDTO.getImageContent() + ", "
							+ userUploadDTO.getImageFileName() + ", "
							+ userUploadDTO.getImageOriginalFileName());
		userUploadDTO.setImageOriginalFileName(imageOriginalFileName);
		
		//"/upload/uploadForm"
		return result;
	}
	*/
	
	// 1개 또는 여러개(드래그)
	// 파일명에 한글 또는 공백이 있어도 업로드가 가능하다. ( produces = "text/html; charset=UTF-8" )
	@RequestMapping(value="upload", method=RequestMethod.POST, produces = "text/html; charset=UTF-8")
	@ResponseBody
	public String upload(@ModelAttribute UserUploadDTO userUploadDTO,
						 @RequestParam("img[]") List<MultipartFile> list,
						 HttpSession session) {
		// 실제 폴더
		// String filePath = 세션
		String filePath = session.getServletContext().getRealPath("WEB-INF/storage");  
		// session.getServletContext().getRealPath()는 서버의 실제 디렉토리 경로를 반환합니다.
		// 여기서는 "WEB-INF/storage" 폴더 경로를 가져옵니다. 
		// 이 경로는 서버의 실제 파일 시스템 내의 경로이므로, 여기에 업로드된 파일이 저장됩니다.
		System.out.println("실제 폴더 = " + filePath);
		// D:\Spring\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp0\wtpwebapps\SpringProject\WEB-INF\storage
		// 이 경로는 실제로 서버의 로컬 파일 시스템 상에서 파일이 저장되는 위치를 나타냅니다.
		// 실제 배포 환경에서는 서버 환경에 따라 이 경로가 달라질 수 있습니다.
		
		String imageFileName;
		String imageOriginalFileName;
		File file;
		String result = "";
		
		// 파일들을 모아서 DB로 보내기
		List<UserUploadDTO> imageUploadList = new ArrayList<>();
		// 업로드된 파일 정보를 저장할 DTO 리스트를 생성합니다.

			for (MultipartFile img : list) {  // 업로드된 파일 리스트를 순회하면서 각각의 파일을 처리
				 //imageFileName = UUID.randomUUID().toString(); // UUID 로 보안성 지정
	            
	            // Naver Cloud Platform _ Object Storage -------------------------------
	            imageFileName = objectStorageService.uploadFile(bucketName, "storage/", img);
	            // objectStorageService를 사용하여 파일을 Naver Object Storage에 업로드하고, 
	            // 저장된 파일명을 반환받습니다.
	            // ----------------------------------------------------------------------------
				
				
				imageOriginalFileName = img.getOriginalFilename();  // 업로드된 파일의 원본 이름을 가져옵니다.
				file = new File(filePath, imageOriginalFileName);  // 서버 내에 저장할 파일 경로와 이름을 설정합니다.
				
				try {
					img.transferTo(file);  // 업로드된 파일을 지정한 경로로 실제 저장합니다.
				} catch (IllegalStateException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
				
				// 화면에 표시할 이미지를 위한 HTML 코드 생성
				result += "<span>"
						+ "<img src='/spring/storage/"
						+ imageOriginalFileName
						+ "' width='200' height='200'>"
						+ "</span>";
				// '/spring/storage/'는 브라우저에서 이미지를 불러오기 위한 가상의 경로입니다.
				// 실제 파일은 'WEB-INF/storage'에 저장되지만, 이 경로는 브라우저에서 직접 접근할 수 없으므로, 가상의 경로를 사용하여 파일에 접근하게 됩니다.
				
				// 업로드된 파일 정보로 DTO를 생성하고 리스트에 추가
				UserUploadDTO dto = new UserUploadDTO();
				dto.setImageName(userUploadDTO.getImageName());
				dto.setImageContent(userUploadDTO.getImageContent());
				dto.setImageFileName(imageFileName);  // 실제 저장 파일명을 설정하지 않고 빈 문자열로 유지
				dto.setImageOriginalFileName(imageOriginalFileName);  // 원본 파일명을 DTO에 설정
				
				imageUploadList.add(dto);  // DTO 리스트에 추가
				
			} // for
		
		// 업로드된 파일 정보 출력 (서버 로그)
		System.out.println(userUploadDTO.getImageName() + ", "
					+ userUploadDTO.getImageContent() + ", "
					+ userUploadDTO.getImageFileName() + ", "
					+ userUploadDTO.getImageOriginalFileName());
		
		// DB 로 저장 !
		userUploadService.upload(imageUploadList);  // 업로드된 파일 정보를 DB에 저장합니다. (여기서는 이미지 메타데이터만 저장)
		
		return result;  // HTML 형식으로 만들어진 결과 문자열을 반환하여 클라이언트에게 전송합니다.
	}
	
	@RequestMapping(value="uploadList")
	public ModelAndView uploadList() {
	    // UserUploadService를 통해 업로드된 파일 목록을 가져옵니다.
	    // UserUploadDTO 타입의 리스트로 반환됩니다.
	    List<UserUploadDTO> list = userUploadService.uploadList();
	    // ModelAndView 객체를 생성합니다.
	    // ModelAndView는 데이터와 뷰 이름을 함께 담을 수 있는 객체로, Spring MVC에서 자주 사용됩니다.
	    ModelAndView mav = new ModelAndView();
	    // 가져온 업로드 파일 리스트를 모델에 추가합니다.
	    // "list"라는 이름으로 업로드된 파일 목록을 view에 전달합니다.
	    mav.addObject("list", list);  
	    // 모델과 함께 반환될 뷰의 이름을 설정합니다.
	    // "/upload/uploadList"는 반환할 JSP 또는 화면의 경로로, 업로드된 파일 리스트를 보여주는 페이지입니다.
	    mav.setViewName("/upload/uploadList"); 
	    // 설정한 ModelAndView 객체를 반환합니다.
	    // 이때, 뷰 이름과 함께 모델에 추가된 데이터도 함께 전달되어 JSP 등에서 데이터를 사용할 수 있게 됩니다.
	    return mav;
	}
	
	@RequestMapping(value="uploadView")
	public String uploadView(@RequestParam String seq, Model map) {
		
		return "";
	}
	
}

// Mapper -> DAO Interface -> ServiceImpl -> Service Interface -> controller

/*
@ResponseBody ?
@ResponseBody는 메서드가 반환하는 값을 view를 통해서가 아니라, 
HTTP 응답 본문에 직접 쓰는 역할을 합니다. 
주로 AJAX나 RESTful 웹 서비스에서 사용되며, JSON, XML 또는 문자열 데이터를 반환할 때 사용됩니다.
*/
