<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd">



<!-- Connection Pool & DataSource -->
<!-- 
<context:property-placeholder> 태그는 외부의 properties 파일에서 속성값을 가져오기 위해 사용됩니다. 
여기서는 "classpath:spring/db.properties" 파일에서 데이터베이스 연결 정보 (jdbc.driver, jdbc.url 등)를 가져옵니다. 
이렇게 외부 파일에 설정을 두면, 코드에서 설정을 변경하지 않고도 쉽게 데이터베이스 연결 정보를 수정할 수 있습니다.
-->
<context:property-placeholder location="classpath:spring/db.properties"/>

<bean id="dataSource" 
      class="org.apache.commons.dbcp2.BasicDataSource"
      p:driverClassName="${jdbc.driver}"
      p:url="${jdbc.url}"
      p:username="${jdbc.username}"
      p:password="${jdbc.password}">
</bean>
<!-- 
이 부분은 Apache Commons DBCP2를 사용하여 DataSource를 설정합니다.
DataSource는 데이터베이스 연결을 관리하는 객체로, 여기서 BasicDataSource를 통해 커넥션 풀을 설정합니다.
driverClassName, url, username, password와 같은 속성은 외부의 db.properties 파일에서 값을 가져와 설정됩니다.
DB 커넥션 풀을 사용하면 성능을 향상시킬 수 있고, 새로운 연결을 매번 생성하는 대신 재사용할 수 있습니다.
-->

<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" >
    <constructor-arg ref="dataSource" />
</bean> -->
<!-- 
JdbcTemplate은 Spring에서 JDBC를 간편하게 사용할 수 있도록 도와주는 클래스입니다.
여기서는 DataSource를 주입받아 DB와의 연결을 관리하고 SQL을 실행하는데 사용됩니다.
이 클래스는 JDBC의 반복적인 코드를 줄이고, 예외 처리 및 자원 관리를 자동으로 처리해줍니다.
-->

<!-- SqlSessionFactory -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />
	<property name="configLocation" value="classpath:spring/mybatis-config.xml" />
	<property name="mapperLocations" value="classpath:mapper/userMapper.xml" />
</bean>
<!-- 
SqlSessionFactory는 MyBatis와 Spring 간의 통합을 위한 핵심 역할을 합니다.
여기서는 MyBatis가 사용할 데이터베이스 연결을 설정하고, 설정 파일(configLocation)과 매퍼 파일(mapperLocations)을 지정합니다.
- configLocation: MyBatis 설정 파일의 위치를 지정하며, 데이터베이스 매핑 설정 등이 들어 있습니다.
- mapperLocations: SQL 쿼리와 매핑 정보를 담고 있는 매퍼 파일의 위치를 지정합니다. userMapper.xml 파일에는 실제 SQL 쿼리와 그에 대한 매핑 정보가 들어 있습니다.
-->

<!-- SqlSession -->
<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactory" />
</bean>
<!-- 
SqlSessionTemplate은 MyBatis의 SqlSession을 구현한 Spring 클래스입니다. 
MyBatis의 SqlSession 인터페이스를 통해 데이터베이스와 상호작용하며, 여기서는 SqlSessionFactory를 주입받아 DB 연결 및 쿼리 실행을 관리합니다.
SqlSessionTemplate은 스레드 세이프(thread-safe)한 방식으로 SqlSession을 처리해줍니다.
-->

<!-- Transaction -->
<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<constructor-arg ref="dataSource" />
</bean>
<!-- 
DataSourceTransactionManager는 JDBC 기반 트랜잭션을 관리하는 트랜잭션 관리자입니다.
여기서는 DataSource를 통해 트랜잭션을 관리하며, 커밋과 롤백을 담당합니다.
Spring에서 @Transactional 어노테이션을 사용하여 트랜잭션을 선언적으로 관리할 수 있으며, 이 때 DataSourceTransactionManager가 사용됩니다.
-->

<bean id="helloSpring" class="user.main.HelloSpring" />
<!-- 
HelloSpring 클래스는 애플리케이션의 핵심 클래스로, 사용자와 상호작용하는 메인 로직을 담당합니다.
이 클래스는 Spring 컨테이너에 빈으로 등록되어, 애플리케이션 실행 시 호출됩니다.
-->

<bean id="userInsertService" class="user.service.UserInsertService">
    <property name="userDTO" ref="userDTO" />
    <property name="userDAO" ref="userMybatisDAO" />
</bean>

<bean id="userSelectService" class="user.service.UserSelectService">
    <property name="userDAO" ref="userMybatisDAO" />
</bean>


<bean id="userUpdateService" class="user.service.UserUpdateService">
    <property name="userDAO" ref="userMybatisDAO" />
</bean>


<bean id="userDeleteService" class="user.service.UserDeleteService">
    <property name="userDAO" ref="userMybatisDAO" />
</bean>

<bean id="userDTO" class="user.bean.UserDTO" />

<bean id="mybatis" class="user.dao.impl.UserMybatisDAO"></bean>
<!-- <bean id="userDAOImpl" class="user.dao.impl.UserDAOImpl">
    <property name="dataSource" ref="dataSource" />
</bean> -->

</beans>
