package user.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import user.bean.UserDTO;
import user.service.UserService;

@Controller
@RequestMapping(value="user")
public class UserController {
	
	@Autowired
	private UserService userService;
	
	
	@RequestMapping(value="/writeForm", method = RequestMethod.GET)
	public String writeForm() {
		
		return "/user/writeForm";
	}
	
	@RequestMapping(value="/getExistId", method = RequestMethod.POST)
	@ResponseBody
	public String getExistId(String id) {
		
		// Service 로 넘김
		return userService.getExistId(id);
		// 단순 문자열이 아니라 JSP 파일명으로 인식
		// 결과적으로 HandlerMapping 이 연결을 하고, data 값을 가지고, write.js 로 가야함.
	}
	
	@RequestMapping(value="/write", method = RequestMethod.POST)
	@ResponseBody
	public void write(@ModelAttribute UserDTO userDTO) {
		userService.write(userDTO);
	}
	
	@RequestMapping(value="/list", method = RequestMethod.GET)
	public String list(@RequestParam(required = false, defaultValue = "1") String pg, Model model) {
		
		Map<String, Object> map2 = userService.list(pg);
		
		map2.put("pg", pg);
		model.addAttribute("map2", map2);
		
		//model.addAttribute("list", map2.get("list"));
		//model.addAttribute("userPaging", map2.get("userPaging"));
		
		return "/user/list"; // -> /WEB-INF/user/list.jsp
	}
	
	@RequestMapping(value="/updateForm", method = RequestMethod.GET)
	public String updateForm(@RequestParam("id") String id, @RequestParam("pg") int pg, Model model) {
		
		UserDTO userDTO = userService.getUser(id);
		
		model.addAttribute("userDTO", userDTO);
		model.addAttribute("pg", pg);
		
		return "/user/updateForm";
	}
	
	@RequestMapping(value="/update", method = RequestMethod.POST)
	public void update(@ModelAttribute UserDTO userDTO) {
		userService.update(userDTO);
		
	}
	
	
	@RequestMapping(value="/loginForm", method = RequestMethod.GET)
	public String loginForm() {
		return "/user/loginForm";
	}
	
	 @RequestMapping(value="/login", method = RequestMethod.POST)
	    public String login(String id, String pwd, HttpSession session) {
	        UserDTO userDTO = userService.login(id, pwd);
	        
	        if (userDTO != null) {
	            // 로그인 성공, 세션에 유저 정보 저장
	            session.setAttribute("loginUser", userDTO);
	            return "redirect:/"; // 메인 페이지로 이동
	        } else {
	            // 로그인 실패, 로그인 페이지로 다시 이동
	            return "redirect:/user/loginForm?error=true";
	        }
	    }

	    @RequestMapping(value="/logout", method = RequestMethod.GET)
	    public String logout(HttpSession session) {
	        // 세션 무효화
	        session.invalidate();
	        return "redirect:/"; // 메인 페이지로 이동
	    }
	
	    
	
	
}
