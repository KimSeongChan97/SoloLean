package review.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import review.bean.ReviewDTO;
import review.service.ReviewService;

@Controller
@RequestMapping("/review")
public class ReviewController {

    @Autowired
    private ReviewService reviewService;
    
    // 특정 roomId에 따른 리뷰 목록을 가져오는 메서드 (경로 변경)
    @RequestMapping(value="/reviewListByRoom", method = RequestMethod.GET)
    public String getReviewListByRoom(@RequestParam("roomId") int roomId, Model model) {
        // roomId에 따른 리뷰 목록을 가져온다
        List<ReviewDTO> reviews = reviewService.getReviewsByRoomId(roomId);
        model.addAttribute("reviews", reviews);
        return "review/reviewList";
    }
    
    // 리뷰 작성 폼으로 이동하는 메서드
    @RequestMapping(value="/reviewWriteForm", method = RequestMethod.GET)
    public String reviewWriteForm(@RequestParam(value="roomId", required=true) int roomId, 
                                  @RequestParam(value="reviewId", required=false) Integer reviewId, Model model) throws Exception {
        if (reviewId != null) {
            // 리뷰 ID가 있으면 해당 리뷰 데이터를 조회하여 수정 폼에 전달
            ReviewDTO review = reviewService.getReviewById(reviewId);
            model.addAttribute("review", review);
        }
        model.addAttribute("roomId", roomId);
        return "review/reviewWriteForm";  // JSP 파일 경로
    }
    
    // 리뷰 수정 폼으로 이동하는 메서드
    @RequestMapping(value="/reviewUpdateForm", method = RequestMethod.GET)
    public String reviewUpdateForm(@RequestParam("reviewId") int reviewId, Model model) throws Exception {
        ReviewDTO review = reviewService.getReviewById(reviewId); // 리뷰를 조회해서 모델에 추가
        model.addAttribute("review", review);
        return "review/reviewUpdateForm";  // JSP 파일로 이동
    }

    // 모든 리뷰 목록을 가져오는 메서드 (기존 경로 유지)
    @RequestMapping(value="/reviewList", method = RequestMethod.GET)
    public String reviewList(Model model) throws Exception {
        List<ReviewDTO> reviews = reviewService.getAllReviews();
        model.addAttribute("reviews", reviews);
        return "review/reviewList";  // JSP 파일 경로로 이동
    }
    
    // 리뷰를 추가하는 메서드
    @RequestMapping(value="/insertReview", method = RequestMethod.POST)
    public String insertReview(@ModelAttribute ReviewDTO review) throws Exception {
        reviewService.insertReview(review);
        return "redirect:/review/reviewList";  // 리뷰 추가 후 목록으로 이동
    }

    // 리뷰를 업데이트하는 메서드
    @RequestMapping(value="/updateReview", method = RequestMethod.POST)
    @ResponseBody  // JSON 응답을 위한 어노테이션 추가
    public ResponseEntity<String> updateReview(@ModelAttribute ReviewDTO review) {
        try {
            reviewService.updateReview(review);
            return new ResponseEntity<>("리뷰 수정 성공", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 수정 실패", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 리뷰를 삭제하는 메서드
    @RequestMapping(value="/deleteReview", method = RequestMethod.POST)
    @ResponseBody  // JSON 응답을 위한 어노테이션 추가
    public ResponseEntity<String> deleteReview(@RequestParam("reviewId") int reviewId) {
        try {
            reviewService.deleteReview(reviewId);
            return new ResponseEntity<>("리뷰 삭제 성공", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 삭제 실패", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
