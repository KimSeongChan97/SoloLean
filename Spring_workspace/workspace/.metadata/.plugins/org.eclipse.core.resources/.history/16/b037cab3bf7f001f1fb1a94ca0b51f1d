<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- sample01 -->
<bean id="messageBeanImpl" class="sample01.MessageBeanImpl">
    <!-- 'messageBeanImpl'이라는 id로 Bean을 정의하고 있습니다. 이 Bean은 Spring이 관리하는 객체입니다.
         Bean은 객체를 생성하고 관리하는 역할을 합니다. 여기서는 MessageBeanImpl 클래스를 사용하여 생성된 객체를 관리합니다. -->

    <constructor-arg>
        <!-- 생성자 인자를 정의하는 부분입니다. 즉, MessageBeanImpl 클래스의 생성자에 넘겨줄 값을 설정하고 있습니다. -->
        <value>사과</value>
        <!-- 생성자에 전달할 값으로 "사과"를 지정했습니다.
             여기서 "사과"는 MessageBeanImpl 클래스의 생성자에 전달되는 문자열입니다.
             이 부분은 실제로 자바 코드로 작성된다면 아래와 같은 코드와 동일합니다:

             MessageBeanImpl messageBeanImpl = new MessageBeanImpl("사과");

             '사과'는 객체 생성 시에 사용될 매개변수입니다.
             즉, MessageBeanImpl 클래스의 생성자가 하나의 문자열을 받아서 객체를 생성할 때 이 값이 사용됩니다.
             생성자가 어떤 역할을 하는지에 따라 '사과'라는 값은 객체 내부에서 처리됩니다. -->
    </constructor-arg>

    <property name="cost">
        <!-- MessageBeanImpl 객체의 'cost'라는 프로퍼티(필드) 값을 설정하는 부분입니다.
             'cost'는 아마도 사과의 가격을 의미하며, 이 값은 5000으로 설정됩니다. -->
        <value>5000</value>
        <!-- 5000이라는 값은 객체의 'cost' 필드에 설정됩니다.
             실제 자바 코드로 표현하면 다음과 같이 동작합니다:

             messageBeanImpl.setCost(5000);

             Spring이 객체를 생성한 후, setCost 메소드를 호출하여 cost 값을 5000으로 설정합니다. -->
    </property>

    <property name="qty" value="3" />
    <!-- 'qty'라는 프로퍼티 값도 설정하고 있습니다. 이 값은 수량을 나타낼 가능성이 큽니다.
         여기서는 3이라는 값이 'qty' 프로퍼티에 설정됩니다.
         자바 코드로 표현하면 다음과 같은 코드와 동일합니다:

         messageBeanImpl.setQty(3);

         즉, setQty 메소드를 통해 수량을 3으로 설정하는 것입니다. -->
</bean>
<!-- 이 코드는 Spring의 XML 설정 파일에서 Bean을 정의하는 부분입니다.
     Spring 프레임워크는 이 설정 파일을 읽고 'messageBean'이라는 id로 객체를 생성하여 애플리케이션 컨텍스트에 등록합니다.
     애플리케이션에서 'messageBean'을 필요로 할 때마다 Spring은 이 객체를 주입해 줍니다. -->

<!-- sample02 -->
  <bean id="calcAdd" class="sample02.CalcAdd">
    <!-- 생성자 인젝션(Constructor Injection)을 사용하여 CalcAdd 객체를 생성합니다.
         25와 36이라는 값이 생성자에 전달되며, 이를 통해 필드 x와 y가 초기화됩니다.
         여기서 전달된 값들은 CalcAdd 클래스의 생성자에서 사용됩니다. -->
    <constructor-arg value="25"/>
    <constructor-arg value="36"/>
  </bean>

  <bean id="calcMul" class="sample02.CalcMul">
    <!-- Setter 인젝션(Setter Injection)을 사용하여 CalcMul 객체를 생성합니다.
         여기서는 x와 y 값이 각각 25와 36으로 설정됩니다.
         이 값들은 CalcMul 클래스의 setX()와 setY() 메서드를 통해 설정됩니다. -->
    <property name="x" value="25"/>
    <property name="y" value="36"/>
  </bean>

  <!-- sample03 -->
  <bean id="sungJukDTO" class="sample03.SungJukDTO">
        <!-- Setter Injection -->	
        <property name="name" value="홍길동"/>
        <property name="kor" value="97"/>
        <property name="eng" value="100"/>
        <property name="math" value="95"/>
    </bean>

    <bean id="sungJukImpl" class="sample03.SungJukImpl">
        <!-- Constructor Injection -->
        <constructor-arg ref="sungJukDTO"/>
    </bean>



</beans>
