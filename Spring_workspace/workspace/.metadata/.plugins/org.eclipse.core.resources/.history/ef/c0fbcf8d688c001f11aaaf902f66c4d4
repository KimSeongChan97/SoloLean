package review.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import review.bean.ReviewDTO;
import review.service.ReviewService;

@Controller
@RequestMapping("/review")
public class ReviewController {

    @Autowired
    private ReviewService reviewService;

    // roomId에 맞는 리뷰 리스트를 반환하는 메서드
    @RequestMapping(value="/reviewListByRoom", method = RequestMethod.GET)
    public String getReviewListByRoom(@RequestParam("roomId") int roomId, Model model) {
        List<ReviewDTO> reviews = reviewService.getReviewsByRoomId(roomId); // roomId에 맞는 리뷰들을 가져옴
        model.addAttribute("reviews", reviews);
        model.addAttribute("roomId", roomId); // roomId를 JSP로 전달
        return "review/reviewList"; // 리뷰 목록을 보여주는 JSP로 이동
    }

    // 리뷰 작성 후 roomId로 필터링된 리뷰 리스트를 보여줌 (JSP로 리다이렉트 하지 않음)
    @RequestMapping(value="/insertReview", method = RequestMethod.POST)
    @ResponseBody
    public ResponseEntity<String> insertReview(@ModelAttribute ReviewDTO review) {
        try {
            reviewService.insertReview(review);  // 리뷰 작성 로직
            return new ResponseEntity<>("리뷰 작성 성공", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 작성 실패", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 리뷰를 업데이트하는 메서드
    @RequestMapping(value="/updateReview", method = RequestMethod.POST)
    @ResponseBody  // JSON 응답을 위한 어노테이션 추가
    public ResponseEntity<String> updateReview(@ModelAttribute ReviewDTO review) {
        try {
            reviewService.updateReview(review);
            return new ResponseEntity<>("리뷰 수정 성공", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 수정 실패", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // 리뷰를 삭제하는 메서드
    @RequestMapping(value="/deleteReview", method = RequestMethod.POST)
    @ResponseBody  // JSON 응답을 위한 어노테이션 추가
    public ResponseEntity<String> deleteReview(@RequestParam("reviewId") int reviewId) {
        try {
            reviewService.deleteReview(reviewId);
            return new ResponseEntity<>("리뷰 삭제 성공", HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 삭제 실패", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
