package user.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import user.bean.UserDTO;
import user.bean.UserPaging;
import user.dao.UserDAO;
import user.service.UserService;

@Service // 이 클래스가 서비스 레이어임을 나타냅니다.
public class UserServiceImpl implements UserService {

    @Autowired
    private UserDAO userDAO; // DAO 객체를 주입받아 DB와의 연결을 관리합니다.
    
    @Autowired
    private UserPaging userPaging; // 페이징 처리를 위한 객체
    
    @Override
    public String getExistId(String id) {
        // ID 중복 확인을 위한 서비스 메서드
        UserDTO userDTO = userDAO.getExistId(id); // DAO에서 해당 ID 조회
        if (userDTO == null) {
            return "non_exist"; // 존재하지 않으면 'non_exist' 반환
        } else {
            return "exist"; // 존재하면 'exist' 반환
        }
    }

    @Override
    public void write(UserDTO userDTO) {
        // DAO로 회원 정보를 전달하여 DB에 저장
        userDAO.write(userDTO);
    }

    @Override
    public Map<String, Object> list(String pg) {
        // 페이지네이션을 위한 리스트 조회 서비스
        int startNum = (Integer.parseInt(pg) - 1) * 5; // 시작 인덱스 계산
        int endNum = 5; // 페이지 당 글 수
        
        Map<String, Integer> map = new HashMap<>();
        map.put("startNum", startNum);
        map.put("endNum", endNum);

        // DB에서 리스트 가져오기
        List<UserDTO> list = userDAO.list(map);

        // 페이징 처리
        int totalA = userDAO.getTotalA(); // 전체 글 수 조회
        userPaging.setCurrentPage(Integer.parseInt(pg)); // 현재 페이지 설정
        userPaging.setPageBlock(3); // 페이지 블록 설정
        userPaging.setPageSize(5); // 한 페이지당 글 수 설정
        userPaging.setTotalA(totalA); // 총 글 수 설정
        userPaging.makePagingHTML(); // 페이징 HTML 생성

        Map<String, Object> map2 = new HashMap<>();
        map2.put("list", list); // 리스트 저장
        map2.put("userPaging", userPaging); // 페이징 정보 저장
        
        return map2;
    }

    @Override
    public UserDTO getUser(String id) {
        // ID로 사용자 정보를 가져옴
        return userDAO.getUser(id);
    }

    @Override
    public void update(UserDTO userDTO) {
        // 수정된 사용자 정보를 DB에 업데이트
        Map<String, String> map = new HashMap<>();
        map.put("name", userDTO.getName());
        map.put("id", userDTO.getId());
        map.put("pwd", userDTO.getPwd());
        
        userDAO.update(map);
    }

    @Override
    public UserDTO login(String id, String pwd) {
        // 로그인 처리. ID와 비밀번호 일치 여부 확인
        UserDTO userDTO = userDAO.getUser(id);
        
        if (userDTO != null && userDTO.getPwd().equals(pwd)) {
            return userDTO; // 비밀번호가 일치하면 로그인 성공
        } else {
            return null; // 실패하면 null 반환
        }
    }

    @Override
    public UserDTO getExistPwd(String id) {
    	UserDTO userDTO = userDAO.getExistPwd(id);
    	
    	return userDTO;
    }
    
}
