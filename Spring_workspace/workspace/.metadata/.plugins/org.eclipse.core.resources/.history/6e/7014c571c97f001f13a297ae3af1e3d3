<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- <bean id="messageBeanImpl" class="sample01.MessageBeanImpl">
    <constructor-arg>
        <value>사과</value>
    </constructor-arg>

    <property name="cost">
        <value>5000</value>
    </property>

    <property name="qty" value="3"></property>
</bean> -->
<!-- 이 부분은 XML에서 직접 Bean을 정의하는 방식입니다. 
     messageBeanImpl이라는 id로 MessageBeanImpl 객체를 생성하며, 생성자와 setter를 통해 값을 주입합니다.
     하지만 이 부분은 주석 처리되어 있으며, 대신 component-scan을 사용하여 자동으로 Bean을 스캔하는 방식을 사용합니다. -->

<context:component-scan base-package="spring.conf" />
<!-- 'spring.conf' 패키지 내의 클래스를 스캔합니다.
     이 패키지 안에서 @Component 등의 어노테이션이 붙은 클래스들이 자동으로 Bean으로 등록됩니다.
     
     예를 들어, 'spring.conf' 패키지에 @Configuration 클래스나 Spring 관련 설정 클래스를 위치시키고,
     이를 자동으로 스캔해서 Spring 컨테이너에 등록합니다. 이를 통해 애플리케이션 설정이나 구성 요소들이 자동으로 관리됩니다. -->
     
<context:component-scan base-package="sample01" />
<!-- component-scan은 지정한 패키지("sample01")에서 @Component, @Service, @Repository, @Controller 같은 
     Spring 어노테이션이 붙은 클래스를 스캔하여 자동으로 Bean으로 등록합니다.
     여기서는 'sample01' 패키지 내에서 이러한 클래스를 스캔해 자동으로 Bean을 관리하게 됩니다.
     이 방법은 XML에 Bean을 일일이 등록하지 않아도 되기 때문에 더욱 효율적입니다. 
     
     예를 들어, sample01 패키지에 있는 MessageBeanImpl 클래스에 @Component 어노테이션이 있으면,
     Spring은 이 클래스를 자동으로 Bean으로 등록하고 관리하게 됩니다. -->
<context:component-scan base-package="sample02" />
<context:component-scan base-package="sample03" />
<context:component-scan base-package="sample04" />
	
</beans>
