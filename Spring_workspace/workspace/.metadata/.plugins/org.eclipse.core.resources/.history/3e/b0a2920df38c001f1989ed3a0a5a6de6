package review.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import review.bean.ReviewDTO;
import review.service.ReviewService;

@Controller
@RequestMapping("/review")
public class ReviewController {

    @Autowired
    private ReviewService reviewService;

    // 특정 roomId에 맞는 리뷰 목록을 반환하는 메서드
    @RequestMapping(value="/reviewListByRoom", method = RequestMethod.GET)
    public String reviewListByRoom(@RequestParam("roomId") int roomId, Model model) {
        List<ReviewDTO> reviews = reviewService.reviewListByRoom(roomId);
        model.addAttribute("reviews", reviews);
        model.addAttribute("roomId", roomId);
        return "review/reviewList";  // 리뷰 목록 페이지로 이동
    }


    // 리뷰 작성 폼으로 이동하는 메서드
    @RequestMapping(value="/reviewWriteForm", method = RequestMethod.GET)
    public String reviewWriteForm(@RequestParam("roomId") int roomId, Model model, HttpSession session) {
        String userName = (String) session.getAttribute("userName");
        model.addAttribute("userName", userName);
        model.addAttribute("roomId", roomId);
        return "review/reviewWriteForm";  // 리뷰 작성 페이지로 이동
    }

    // 리뷰 작성
    @RequestMapping(value="/insertReview", method=RequestMethod.POST)
    public String insertReview(@ModelAttribute ReviewDTO reviewDTO, HttpSession session) {
        int userId = (Integer) session.getAttribute("userId");
        String userName = (String) session.getAttribute("userName");

        reviewDTO.setUserId(userId);
        reviewDTO.setUserName(userName);

        try {
            reviewService.insertReview(reviewDTO);
        } catch (Exception e) {
            e.printStackTrace();
            return "redirect:/review/reviewWriteForm?error=true";  // 오류 발생 시 다시 폼으로 리다이렉트
        }
        return "redirect:/review/reviewListByRoom?roomId=" + reviewDTO.getRoomId();
    }

    // 리뷰 삭제
    @RequestMapping(value="/deleteReview", method=RequestMethod.POST)
    public String deleteReview(@RequestParam("reviewId") int reviewId, @RequestParam("roomId") int roomId) {
        try {
			reviewService.deleteReview(reviewId);
		} catch (Exception e) {
			e.printStackTrace();
		}
        return "redirect:/review/reviewListByRoom?roomId=" + roomId;  // 삭제 후 다시 목록으로 이동
    }

    // 리뷰 수정 폼으로 이동
    @RequestMapping(value="/updateReviewForm", method = RequestMethod.GET)
    public String updateReviewForm(@RequestParam("reviewId") int reviewId, Model model) {
        ReviewDTO review = reviewService.getReviewById(reviewId);
        model.addAttribute("review", review);
        return "review/reviewUpdateForm";  // 리뷰 수정 폼 페이지로 이동
    }

    // 리뷰 수정
    @RequestMapping(value="/updateReview", method=RequestMethod.POST)
    public String updateReview(@ModelAttribute ReviewDTO reviewDTO) {
        try {
			reviewService.updateReview(reviewDTO);
		} catch (Exception e) {
			e.printStackTrace();
		}
        return "redirect:/review/reviewListByRoom?roomId=" + reviewDTO.getRoomId();  // 수정 후 목록으로 이동
    }
}

