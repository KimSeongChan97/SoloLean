<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

<!-- <bean id="messageBeanImpl" class="sample01.MessageBeanImpl">
    <constructor-arg>
        <value>사과</value>
    </constructor-arg>

    <property name="cost">
        <value>5000</value>
    </property>

    <property name="qty" value="3"></property>
</bean> -->
<!-- 이 부분은 직접 Bean을 XML 파일에서 정의한 예입니다.
     이 방식에서는 Bean을 명시적으로 정의하고, 생성자와 프로퍼티 값을 XML 파일에서 직접 설정합니다.
     'messageBeanImpl'이라는 id로 Spring이 관리하는 Bean을 정의하고,
     생성자로 '사과'라는 값을 넘겨주고, 'cost'와 'qty'라는 속성 값도 설정한 상태입니다.
     하지만 이 방식은 더 이상 사용되지 않고, 이제는 어노테이션을 사용하는 방법을 선호합니다. -->

<context:component-scan base-package="sample01" />
<!-- component-scan은 Spring이 해당 패키지를 스캔해서 @Component, @Service, @Repository, @Controller 등의 어노테이션이 붙은 클래스를 자동으로 Bean으로 등록하게 해주는 설정입니다.
     여기서는 'sample01'이라는 패키지 내에서 이러한 어노테이션이 붙은 클래스들을 스캔하여 Spring 컨테이너가 자동으로 관리하게 됩니다.
     
     즉, 위에서 주석 처리된 <bean> 태그 부분을 더 이상 작성하지 않고, 해당 패키지에 있는 클래스에 @Component나 다른 어노테이션을 달아놓으면 Spring이 자동으로 Bean을 생성해서 관리합니다.
     이를 통해 XML 파일에 일일이 Bean을 등록할 필요가 없어집니다.

     예를 들어, MessageBeanImpl 클래스에 @Component를 붙이면 Spring이 이 클래스를 Bean으로 자동으로 등록합니다:
     
     @Component
     public class MessageBeanImpl implements MessageBean { ... }
     
     그럼 XML 파일에 <bean> 태그 없이도 Spring이 이 클래스를 알아서 Bean으로 등록하고 주입합니다.
     이를 통해 코드의 간결성을 높이고 유지보수를 쉽게 할 수 있습니다. -->
     
     <context:component-scan base-package="spring.conf" />

	
</beans>
