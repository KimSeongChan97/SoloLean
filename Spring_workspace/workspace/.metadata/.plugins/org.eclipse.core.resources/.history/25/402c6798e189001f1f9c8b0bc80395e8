package user.service.impl;

import java.io.InputStream;
import java.util.UUID;

import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.amazonaws.auth.AWSStaticCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.client.builder.AwsClientBuilder;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.CannedAccessControlList;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;

import spring.conf.NaverConfiguration;
import user.service.ObjectStorageService;

@Service
public class NCPObjectStorageService implements ObjectStorageService {
    final AmazonS3 s3;

    // NaverConfiguration을 통해 필요한 필드들을 가져옵니다.
    public NCPObjectStorageService(NaverConfiguration naverConfiguration) {
        // naverConfiguration에서 필요한 필드를 가져와 설정합니다.
        s3 = AmazonS3ClientBuilder.standard()
                .withEndpointConfiguration(
                        new AwsClientBuilder.EndpointConfiguration(
                            naverConfiguration.getEndPoint(),  // endPoint 가져오기
                            naverConfiguration.getRegionName()))  // regionName 가져오기
                .withCredentials(
                        new AWSStaticCredentialsProvider(
                                new BasicAWSCredentials(
                                    naverConfiguration.getAccessKey(),  // accessKey 가져오기
                                    naverConfiguration.getSecretKey())))  // secretKey 가져오기
                .build();
    }

    @Override
    public String uploadFile(String bucketName, String directoryPath, MultipartFile img) {
        try(InputStream inputStream = img.getInputStream()) {
            String imageFileName = UUID.randomUUID().toString();  // 고유한 파일 이름 생성

            ObjectMetadata objectMetadata = new ObjectMetadata();
            objectMetadata.setContentType(img.getContentType());  // 파일의 Content-Type 설정

            // 업로드 요청 객체 생성 및 설정
            PutObjectRequest putObjectRequest = 
                new PutObjectRequest(bucketName,
                                     directoryPath + imageFileName,
                                     inputStream,
                                     objectMetadata)
                .withCannedAcl(CannedAccessControlList.PublicRead);  // PublicRead로 설정하여 공개 접근 가능

            // S3에 업로드
            s3.putObject(putObjectRequest);
            
            return imageFileName;  // 업로드된 파일의 이름 반환
        } catch (Exception e) {
            throw new RuntimeException("파일 업로드 에러", e);  // 업로드 중 예외 발생 시 에러 던짐
        }
    }
}


// SpringConfiguration 대신에..