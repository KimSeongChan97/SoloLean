package sample04;

import java.util.List;
import java.util.Scanner;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component // @Component 어노테이션은 이 클래스를 Spring의 Bean으로 등록하여 Spring이 관리할 수 있게 만듭니다.
public class SungJukInput implements SungJuk {

    // @Setter: Lombok 라이브러리의 어노테이션으로, 이 필드에 대해 자동으로 setter 메서드를 생성합니다.
    // 즉, 외부에서 이 클래스에 SungJukDTO2 객체를 주입할 수 있는 setter 메서드가 자동으로 만들어집니다.
    // Spring에서는 의존성 주입(Dependency Injection)을 통해 sungJukDTO2 객체가 주입될 수 있습니다.
    // @Autowired는 Spring에서 의존성을 주입할 때 사용하는 어노테이션으로, SungJukDTO2 타입의 Bean을 자동으로 주입받습니다.
    // 주입된 sungJukDTO2 객체는 성적 데이터를 저장하는 데 사용됩니다.
	@Autowired
    private SungJukDTO2 sungJukDTO2 = null;
    // 성적 데이터를 저장할 SungJukDTO2 객체입니다. 학생의 이름, 국어, 영어, 수학 점수를 여기에 저장하고,
    // 이후 리스트에 추가하는 방식으로 여러 학생의 성적을 관리하게 됩니다.

    // @Setter: 이 필드(list)에 대해서도 setter 메서드가 Lombok에 의해 자동으로 생성됩니다.
    // List<SungJukDTO2>는 여러 학생의 성적 데이터를 저장하는 리스트로, Spring에서 주입될 수 있습니다.
    // Spring에서 관리하는 SungJukDTO2 객체들의 리스트가 자동으로 주입됩니다.
	@Autowired
    private List<SungJukDTO2> list;
    // SungJukDTO2 객체들이 저장된 리스트입니다. 이 리스트에 학생들의 성적 정보가 차례대로 저장됩니다.
    // Spring에서 이 리스트를 관리하며, 리스트는 성적 데이터를 입력할 때마다 여기에 추가됩니다.

//  public void setSungJukDTO2(SungJukDTO2 sungJukDTO2) {
//      this.sungJukDTO2 = sungJukDTO2;
//  }
    // 위 코드는 setter 메서드를 수동으로 작성한 코드입니다.
    // 하지만 Lombok의 @Setter 어노테이션을 사용했기 때문에, 이 코드는 주석 처리되어 있습니다.
    // Lombok이 자동으로 setter 메서드를 생성해 주므로 직접 작성할 필요가 없습니다.

//  public void setList(List<SungJukDTO2> list) {
//      this.list = list;
//  }
    // 마찬가지로, 리스트에 대한 setter 메서드도 Lombok @Setter로 대체되어 자동으로 생성됩니다.
    // 수동으로 작성된 setter는 주석 처리되었습니다.

    @Override
    public void execute() {
        System.out.println(); // 공백 줄 출력
        // 출력 시 보기 좋게 공백을 추가하여 화면 구성을 정리합니다.

        Scanner scan = new Scanner(System.in); // 사용자로부터 입력을 받기 위한 Scanner 객체 생성
        // Scanner 객체는 콘솔에서 사용자의 입력을 받기 위해 사용됩니다.
        // 각 입력 항목마다 사용자가 직접 값을 입력할 수 있습니다.

        System.out.print("이름 입력: ");
        String name = scan.next(); // 사용자가 입력한 이름을 저장
        // 사용자로부터 학생의 이름을 입력받아 name 변수에 저장합니다.

        System.out.print("국어점수 입력: ");
        int kor = scan.nextInt(); // 사용자가 입력한 국어 점수를 저장
        // 국어 점수를 입력받아 kor 변수에 저장합니다.

        System.out.print("영어점수 입력: ");
        int eng = scan.nextInt(); // 사용자가 입력한 영어 점수를 저장
        // 영어 점수를 입력받아 eng 변수에 저장합니다.

        System.out.print("수학점수 입력: ");
        int math = scan.nextInt(); // 사용자가 입력한 수학 점수를 저장
        // 수학 점수를 입력받아 math 변수에 저장합니다.

        // 국어, 영어, 수학 점수를 합산하여 총점을 계산
        int tot = kor + eng + math;
        // 입력된 국어, 영어, 수학 점수를 합산하여 tot 변수에 총점을 저장합니다.

        // 평균을 계산, 총점을 3.0으로 나누어 실수형 평균을 구함
        double avg = tot / 3.0;
        // 총점을 3으로 나누어 평균을 계산하고, avg 변수에 저장합니다.
        // 3으로 나누는 이유는 성적이 국어, 영어, 수학 세 과목이기 때문입니다.
        // 3.0으로 나누어 실수형(double) 값으로 평균을 구합니다.

        // 성적 데이터를 SungJukDTO2 객체에 설정
        sungJukDTO2.setName(name); // 이름 설정
        sungJukDTO2.setKor(kor); // 국어 점수 설정
        sungJukDTO2.setEng(eng); // 영어 점수 설정
        sungJukDTO2.setMath(math); // 수학 점수 설정
        sungJukDTO2.setTot(tot); // 총점 설정
        sungJukDTO2.setAvg(avg); // 평균 설정
        // 사용자가 입력한 성적 데이터를 sungJukDTO2 객체에 설정합니다.
        // setName(), setKor(), setEng(), setMath(), setTot(), setAvg() 메서드를 통해
        // 각 필드에 값을 설정하여 sungJukDTO2 객체에 성적 정보를 저장합니다.

        // SungJukDTO2 객체를 리스트에 추가
        list.add(sungJukDTO2);
        // 성적 데이터가 설정된 sungJukDTO2 객체를 리스트에 추가합니다.
        // 이렇게 추가된 데이터는 리스트를 통해 관리되며, 이후 출력, 수정, 삭제 등의 작업에 사용됩니다.

        // 입력 완료 메시지 출력
        System.out.println(name + "님의 데이터를 입력 하였습니다.");
        // 성적 데이터 입력이 완료되었음을 사용자에게 알리는 메시지를 출력합니다.
        // 여기서는 학생의 이름을 포함하여 메시지를 출력합니다.

        System.out.println(); // 공백 줄 출력
        // 화면 구성을 깔끔하게 하기 위해 공백을 추가로 출력합니다.
    }
}
