<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

<!-- 웹과 독립된 WAC -->
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/spring/root-context.xml</param-value>
</context-param>
<!-- 
[기존 주석] 웹과 독립된 WAC
[추가 주석] 이 설정은 애플리케이션의 전반적인 Spring 설정 파일을 지정하는 부분입니다. 
- `contextConfigLocation`은 Spring의 루트 애플리케이션 컨텍스트에 대한 설정 파일 경로를 지정합니다. 여기서는 `/WEB-INF/spring/root-context.xml` 파일을 로드하여 애플리케이션 전반에 걸친 빈(bean) 설정을 처리합니다. 
루트 컨텍스트는 웹과 독립적이며, 주로 서비스 계층이나 데이터 계층의 빈을 정의합니다.
-->

<listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
<!-- 
[기존 주석] 웹과 독립된 WAC 설정을 위해 필요한 리스너입니다.
[추가 주석] `ContextLoaderListener`는 루트 애플리케이션 컨텍스트를 초기화하고 관리하는 리스너입니다. 
이 리스너는 애플리케이션이 시작될 때 Spring의 컨텍스트를 로드하고, 애플리케이션이 종료될 때 이를 정리하는 역할을 합니다. 
이로 인해 루트 컨텍스트에서 정의된 빈(bean)들이 웹 애플리케이션 전체에서 공유되고 관리됩니다.
-->

<!-- 웹과 관련된 WAC -->
<servlet>
    <servlet-name>appServlet</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
    </init-param>
    <!-- <load-on-startup>1</load-on-startup> -->
</servlet>
<!-- 
[기존 주석] 웹과 관련된 WAC
[추가 주석] `DispatcherServlet`은 Spring MVC의 핵심 역할을 하는 서블릿입니다. 클라이언트로부터 요청을 받아 적절한 컨트롤러로 요청을 전달하고, 해당 요청에 대한 응답을 다시 반환하는 역할을 합니다.
- `contextConfigLocation`은 이 서블릿에만 적용되는 Spring 설정 파일을 지정합니다. 여기서는 `/WEB-INF/spring/appServlet/servlet-context.xml` 파일을 로드하여 웹 관련 빈(bean) 설정을 처리합니다.
`DispatcherServlet`은 웹 애플리케이션 컨텍스트(Web Application Context)를 관리하며, 이 컨텍스트는 루트 애플리케이션 컨텍스트와 달리 웹과 관련된 빈들만을 관리합니다.
-->

<servlet-mapping>
    <servlet-name>appServlet</servlet-name>
    <url-pattern>/</url-pattern>
</servlet-mapping>
<!-- 
[기존 주석] 서블릿 요청 경로를 매핑합니다.
[추가 주석] 이 부분은 `appServlet` 서블릿이 처리할 URL 패턴을 지정하는 설정입니다. 
- `url-pattern`이 "/"로 지정되어 있어, 루트 경로로 들어오는 모든 요청을 `appServlet`이 처리하도록 설정됩니다. 즉, 클라이언트로부터 오는 대부분의 요청이 이 서블릿을 통해 처리됩니다.
이 설정은 Spring MVC 애플리케이션에서 모든 웹 요청을 `DispatcherServlet`으로 전달하여 컨트롤러, 서비스 계층, 뷰로 요청을 처리하는 일종의 진입점 역할을 합니다.
-->

<!-- 넘어오는 한글 파라메터 인코딩 -->
<filter>
    <filter-name>encodingFilter</filter-name> 
    <!-- CharacterEncodingFilter라는 필터를 설정하는 부분으로, 이 필터는 클라이언트로부터 전달되는 모든 요청과 응답에 대해 문자 인코딩을 설정하는 역할을 함. -->
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class> 
    <!-- Spring에서 제공하는 CharacterEncodingFilter 클래스를 사용하여 모든 요청에 대해 지정한 문자 인코딩을 적용함. -->
    <init-param>
        <param-name>encoding</param-name> 
        <!-- 요청과 응답에 적용할 문자 인코딩을 지정. -->     
        <param-value>UTF-8</param-value> 
        <!-- UTF-8 인코딩을 지정함. UTF-8은 다양한 언어(특히 한글)를 올바르게 처리할 수 있도록 널리 사용되는 인코딩 방식임. 
        이를 통해 한글과 같은 다국어 문자 데이터를 올바르게 전송하고 처리할 수 있게 됨. -->
    </init-param>
</filter>
<filter-mapping>
    <filter-name>encodingFilter</filter-name> 
    <!-- 위에서 정의한 encodingFilter 필터를 매핑하는 부분으로, 필터 이름이 동일해야 함. -->   
    <url-pattern>/*</url-pattern> 
    <!-- 모든 요청 URL에 대해 이 필터를 적용하도록 설정. 즉, 모든 페이지 요청에 대해 UTF-8 인코딩이 적용됨. 
    "/login.do", "/signup.do" 등 어떤 경로가 오더라도 필터가 적용되며, 모든 요청과 응답에 대해 UTF-8로 인코딩이 설정됨. -->
</filter-mapping>

</web-app>
