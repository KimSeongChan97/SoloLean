package user.service.impl;

import java.io.File;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import user.bean.UserUploadDTO;
import user.dao.UserUploadDAO;
import user.service.ObjectStorageService;
import user.service.UserUploadService;

@Service
public class UserUploadServiceImpl implements UserUploadService {
		
		@Autowired
		private UserUploadDAO userUploadDAO;

		@Autowired
		private HttpSession session;
		
		@Autowired
		private ObjectStorageService objectStorageService;
		
		private String bucketName = "bitcamp-9th-bucket-65";

		
		@Override
		public void upload(List<UserUploadDTO> imageUploadList) {
			userUploadDAO.upload(imageUploadList);		
		}
	
		@Override
		public List<UserUploadDTO> uploadList() {
			return userUploadDAO.uploadList();
		}
		
		@Override
		public UserUploadDTO getuploadDTO(String seq) {
		
			return userUploadDAO.getuploadDTO(seq);
		}
		
		@Override
		public void uploadUpdate(UserUploadDTO userUploadDTO, MultipartFile img) {
			
			// 실제 폴더
			String filePath = session.getServletContext().getRealPath("WEB-INF/storage");  
			System.out.println("실제 폴더 = " + filePath);
			
			// Object Storage (NCP) 는 이미지를 덮어쓰지 않는다.
			// 기존 이미지를 삭제하고 나서 새로운 이미지를 넣어야 한다.
			// DB 에서 seq 에 해당하는 imageFileName 을 꺼내와서
			// Object Storage (NCP)의 이미지를 삭제하고,
			// 새로운 이미지를 업로드 한다.
			
			// seq 가져오기
			String imageFileName = userUploadDAO.getImageFileName(userUploadDTO.getSeq());
		    System.out.println("imageFileName = " + imageFileName); 
			
		    // 1. 이미지 삭제
		    objectStorageService.deleteFile(bucketName, "storage/", imageFileName);
		    
			// 2. 새로운 객체 이미지 삽입

			String imageOriginalFileName = img.getOriginalFilename();  // 업로드된 파일의 원본 이름을 가져옵니다.
			File file = new File(filePath, imageOriginalFileName);  // 서버 내에 저장할 파일 경로와 이름을 설정합니다.
			
			try {
				img.transferTo(file);  // 업로드된 파일을 지정한 경로로 실제 저장합니다.
			} catch (IllegalStateException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			
		}
		
}
