package review.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;
import review.bean.ReviewDTO;
import review.service.ReviewService;

@Controller
@RequestMapping("/review") // 기본 경로 설정: /review
public class ReviewController {

    @Autowired
    private ReviewService reviewService;

    // 1. 특정 roomId에 맞는 리뷰 목록을 반환하는 메서드
    @RequestMapping(value="/reviewListByRoom", method = RequestMethod.GET)
    public String getReviewListByRoom(@RequestParam("roomId") int roomId, Model model) {
        // 리뷰 목록을 roomId로 필터링하여 가져옴
        List<ReviewDTO> reviews = reviewService.getReviewsByRoomId(roomId); 
        // JSP로 데이터 전달
        model.addAttribute("reviews", reviews);
        model.addAttribute("roomId", roomId); // roomId를 JSP로 전달
        // JSP 페이지로 이동 (예: /WEB-INF/views/review/reviewList.jsp)
        return "review/reviewList"; 
    }

    // 2. 리뷰 작성 폼으로 이동하는 메서드
    @RequestMapping(value="/reviewWriteForm", method = RequestMethod.GET)
    public String reviewWriteForm(@RequestParam("roomId") int roomId, Model model) throws Exception {
        // JSP로 roomId 전달
        model.addAttribute("roomId", roomId);
        // 리뷰 작성 폼을 보여줄 JSP 경로 (예: /WEB-INF/views/review/reviewWriteForm.jsp)
        return "review/reviewWriteForm";  
    }

    // 3. 리뷰 작성 후 roomId로 필터링된 리뷰 목록을 보여줌
    @RequestMapping(value="/insertReview", method = RequestMethod.POST)
    @ResponseBody
    public ResponseEntity<String> insertReview(@ModelAttribute ReviewDTO review) {
        try {
            // 리뷰 작성 로직 호출
            reviewService.insertReview(review);
            return new ResponseEntity<>("리뷰 작성 성공", HttpStatus.OK);  // 성공 응답
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 작성 실패", HttpStatus.INTERNAL_SERVER_ERROR);  // 실패 응답
        }
    }

    // 4. 리뷰 업데이트 메서드
    @RequestMapping(value="/updateReview", method = RequestMethod.POST)
    @ResponseBody  
    public ResponseEntity<String> updateReview(@ModelAttribute ReviewDTO review) {
        try {
            reviewService.updateReview(review);  // 리뷰 수정 로직 호출
            return new ResponseEntity<>("리뷰 수정 성공", HttpStatus.OK);  // 성공 응답
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 수정 실패", HttpStatus.INTERNAL_SERVER_ERROR);  // 실패 응답
        }
    }

    // 5. 리뷰 삭제 메서드
    @RequestMapping(value="/deleteReview", method = RequestMethod.POST)
    @ResponseBody  
    public ResponseEntity<String> deleteReview(@RequestParam("reviewId") int reviewId) {
        try {
            reviewService.deleteReview(reviewId);  // 리뷰 삭제 로직 호출
            return new ResponseEntity<>("리뷰 삭제 성공", HttpStatus.OK);  // 성공 응답
        } catch (Exception e) {
            return new ResponseEntity<>("리뷰 삭제 실패", HttpStatus.INTERNAL_SERVER_ERROR);  // 실패 응답
        }
    }
}
