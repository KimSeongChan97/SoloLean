package sample01;

import org.aspectj.lang.ProceedingJoinPoint;
import org.springframework.util.StopWatch;

// 공통관심사항(부가적인 기능)
// 이 클래스는 AOP에서 사용되는 공통 관심 사항(부가적인 기능)을 정의합니다. 주로 로깅과 같은 부가 기능을 처리합니다.
public class LoggingAdvice {
    
    // 메서드가 실행되기 전에 실행되는 부가 기능을 담당하는 메서드
    // AOP에서 'before' advice로 사용되며, 주로 메서드 실행 전 로그를 출력하거나 사전 검증을 할 때 사용
    public void beforeTrace() {
        System.out.println("before trace"); // 메서드 실행 전에 "before trace"라는 메시지를 출력
        // 이 메서드는 AOP의 Before Advice로 설정되어, 타겟 메서드가 실행되기 전에 자동으로 실행됩니다.
    }
    
    // 메서드가 실행된 후에 실행되는 부가 기능을 담당하는 메서드
    // AOP에서 'after' advice로 사용되며, 주로 메서드 실행 후 로그를 출력하거나 후처리를 할 때 사용
    public void afterTrace() {
        System.out.println("after trace"); // 메서드 실행 후에 "after trace"라는 메시지를 출력
        // 이 메서드는 AOP의 After Advice로 설정되어, 타겟 메서드가 실행된 후 자동으로 실행됩니다.
    }
    
    // 'trace' 메서드는 Around Advice를 구현한 메서드입니다.
    // ProceedingJoinPoint는 Around Advice에서 사용되는 매개변수로, 타겟 메서드에 접근할 수 있도록 해줍니다.
    public void trace(ProceedingJoinPoint joinPoint) throws Throwable {
        // 1. 출력
        // 타겟 메서드 실행 전 수행되는 부가적인 작업으로, 여기서는 입실 로그를 출력합니다.
        //System.out.println("입실");
        // 2. 핵심코드(Around)
        // 핵심코드를 수행하는 메서드를 호출하는 부분입니다. 타겟 메서드가 실제로 실행되는 지점입니다.
        // joinPoint.proceed()를 호출하면 타겟 메서드가 실행됩니다.
        //joinPoint.proceed();
        // 3. 출력
        // 타겟 메서드 실행 후 수행되는 부가적인 작업으로, 여기서는 퇴실 로그를 출력합니다.
        //System.out.println("퇴실");
    	
    	String methodName = joinPoint.getSignature().toShortString();
    	System.out.println("메소드 이름 = " + methodName);
    	
    	StopWatch stopWatch = new StopWatch();
    	stopWatch.start();
    	joinPoint.proceed();
    	stopWatch.stop();
    	System.out.println("처리시간 = " + stopWatch.getTotalTimeMillis()/1000 + " 초 경과 ");
    	
    }
    
}
