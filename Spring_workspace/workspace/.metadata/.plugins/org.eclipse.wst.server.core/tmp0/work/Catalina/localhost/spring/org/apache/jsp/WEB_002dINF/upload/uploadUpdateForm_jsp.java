/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-14 08:38:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.upload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadUpdateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Upload File Update Page</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/uploadUpdate.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"home-container\">\r\n");
      out.write("    <a href=\"/spring/\"><i class=\"fa-solid fa-house\"></i> HOME</a>\r\n");
      out.write("</div>\r\n");
      out.write("	\r\n");
      out.write("	<form  id=\"uploadUpdateForm\">\r\n");
      out.write("	\r\n");
      out.write("		<input type=\"hidden\" name=\"seq\" size=\"35\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userUploadDTO.seq }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>상품명</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<i class=\"fa-solid fa-pen-to-square\"></i><input type=\"text\" \r\n");
      out.write("				name=\"imageName\" size=\"35\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userUploadDTO.imageName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\">\r\n");
      out.write("				<textarea name=\"imageContent\" rows=\"10\" cols=\"50\" >");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userUploadDTO.imageContent }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\">\r\n");
      out.write("				<span id=\"showImageList\"> \r\n");
      out.write("					<img src=\"http://kr.object.ncloudstorage.com/bitcamp-9th-bucket-65/storage/");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userUploadDTO.imageFileName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" \r\n");
      out.write("						alt=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userUploadDTO.imageName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("				 </span>\r\n");
      out.write("				 \r\n");
      out.write("				<i class=\"fa-solid fa-camera-retro\" \r\n");
      out.write("					alt=\"이미지 선택\" width=\"100\" height=\"100\"\r\n");
      out.write("					id=\"camera\" >\r\n");
      out.write("				</i>\r\n");
      out.write("				<input type=\"file\" style=\"visibility: hidden;\" name=\"img\" id=\"img\" />\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\" align=\"center\">\r\n");
      out.write("				<input type=\"button\" value=\"수정\" id=\"uploadUpdateBtn\" />  \r\n");
      out.write("				<input type=\"reset\" value=\"취소\" /> \r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>			\r\n");
      out.write("	</table>\r\n");
      out.write("</form>\r\n");
      out.write("	\r\n");
      out.write("	<div>\r\n");
      out.write("	    <input type=\"button\" value=\"목록\" onclick=\"location.href='/spring/user/uploadList'\" />\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"../js/uploadUpdate.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("$('#camera').click(function(){\r\n");
      out.write("	// 카메라 아이콘 클릭 시 파일 선택 창이 강제로 열리도록 설정합니다.\r\n");
      out.write("	$('#img').trigger('click'); // 강제 이벤트 발생시킴\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 이미지 미리보기 처리\r\n");
      out.write("$('#img').change(function(){\r\n");
      out.write("	// 이미지 미리보기 영역을 비웁니다.\r\n");
      out.write("	$('#showImageList').empty();\r\n");
      out.write("	\r\n");
      out.write("	// 선택된 파일들을 순차적으로 읽어서 미리보기로 출력합니다.\r\n");
      out.write("	for(var i=0; i<this.files.length; i++){\r\n");
      out.write("		readURL(this.files[i]);\r\n");
      out.write("	}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 선택된 파일을 화면에 미리보는 함수\r\n");
      out.write("function readURL(file){\r\n");
      out.write("	var reader = new FileReader(); // FileReader 객체를 생성하여 파일을 읽습니다.\r\n");
      out.write("	\r\n");
      out.write("	var show;\r\n");
      out.write("	reader.onload = function(e){\r\n");
      out.write("		// 파일을 성공적으로 읽은 후, 미리보기로 보여줄 이미지 태그를 생성합니다.\r\n");
      out.write("		var img = document.createElement('img'); // 이미지 태그를 동적으로 생성\r\n");
      out.write("		img.src = e.target.result; // 파일 데이터를 이미지 소스로 설정\r\n");
      out.write("		img.width = 70; // 미리보기 이미지의 너비 설정\r\n");
      out.write("		img.height = 70; // 미리보기 이미지의 높이 설정\r\n");
      out.write("		$('#showImageList').append(img); // 미리보기 영역에 이미지 추가\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	reader.readAsDataURL(file); // 파일을 읽어 데이터 URL로 변환\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
