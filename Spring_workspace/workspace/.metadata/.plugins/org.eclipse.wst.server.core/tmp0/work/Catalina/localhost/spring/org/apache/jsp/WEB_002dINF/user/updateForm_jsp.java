/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-11 01:06:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class updateForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원정보 수정</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css\">\r\n");
      out.write("<!-- updateForm.css 파일을 불러와 회원정보 수정 폼의 스타일을 적용합니다 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/updateForm.css\">\r\n");
      out.write("<!-- Font Awesome 아이콘 라이브러리를 사용하여 페이지에 아이콘을 추가합니다 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"update-jsp\">\r\n");
      out.write("        <div id=\"left\">\r\n");
      out.write("            <div id=\"header\">\r\n");
      out.write("                <!-- 홈으로 돌아가는 링크입니다. /spring 경로로 이동하며, 로고와 텍스트가 함께 표시됩니다 -->\r\n");
      out.write("                <a href=\"/spring/\">\r\n");
      out.write("                    <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/image/Logo.png\" alt=\"Logo\" width=\"50\" height=\"50\" /> HOME\r\n");
      out.write("                </a>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"profile\">\r\n");
      out.write("                <!-- 프로필 이미지를 표시하는 부분입니다. 여기서는 'mang.png' 이미지를 사용하고 있습니다. -->\r\n");
      out.write("                <img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/image/mang.png\" width=\"140\" height=\"140\" alt=\"mangLogo\" />\r\n");
      out.write("            </div>\r\n");
      out.write("            <div id=\"links\">\r\n");
      out.write("                <!-- 고객센터와 언어 선택 링크가 제공됩니다. 현재는 링크가 실제로 작동하지 않습니다. -->\r\n");
      out.write("                <a href=\"#\">고객센터</a> | <a href=\"#\">한국어</a>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div id=\"right\">\r\n");
      out.write("            <div id=\"container\">\r\n");
      out.write("                <!-- 회원정보 수정 폼의 헤더 부분입니다. -->\r\n");
      out.write("                <div id=\"edit-header\">회원수정</div>\r\n");
      out.write("                <!-- 회원정보 수정을 위한 폼입니다. -->\r\n");
      out.write("                <form name=\"userUpdateForm\" id=\"userUpdateForm\">\r\n");
      out.write("                    <!-- 현재 페이지(pg) 정보를 숨김 필드로 저장하여 나중에 사용할 수 있게 합니다. -->\r\n");
      out.write("                    <input type=\"hidden\" id=\"pg\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pg }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("                    <table>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <!-- '이름' 필드를 표시하며, 아이콘과 함께 이름 입력 필드가 제공됩니다. -->\r\n");
      out.write("                            <th class=\"label\"><i class=\"fas fa-user\"></i> 이름</th>\r\n");
      out.write("                            <td class=\"input\">\r\n");
      out.write("                                <!-- 사용자 이름을 입력하는 텍스트 필드입니다. 기존의 이름을 'userDTO.name' 값으로 불러옵니다. -->\r\n");
      out.write("                                <input type=\"text\" name=\"name\" id=\"name\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userDTO.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("                                <!-- 입력 오류나 추가 정보를 표시할 div입니다. -->\r\n");
      out.write("                                <div id=\"nameDiv\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <!-- '아이디' 필드를 표시하며, 아이콘과 함께 아이디를 출력합니다. 아이디는 수정할 수 없도록 읽기 전용으로 설정되어 있습니다. -->\r\n");
      out.write("                            <th class=\"label\"><i class=\"fas fa-id-badge\"></i> 아이디</th>\r\n");
      out.write("                            <td class=\"input\">\r\n");
      out.write("                                <!-- 사용자 아이디를 표시하는 필드입니다. readonly 속성으로 인해 수정이 불가능합니다. -->\r\n");
      out.write("                                <input type=\"text\" name=\"id\" id=\"id\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userDTO.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" readonly />\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <!-- '비밀번호' 필드를 표시하며, 아이콘과 함께 비밀번호 입력 필드가 제공됩니다. -->\r\n");
      out.write("                            <th class=\"label\"><i class=\"fas fa-lock\"></i> 비밀번호</th>\r\n");
      out.write("                            <td class=\"input\">\r\n");
      out.write("                                <!-- 사용자 비밀번호를 입력하는 필드입니다. 보안상 비밀번호는 화면에 표시되지 않고 별표(*)로 표시됩니다. -->\r\n");
      out.write("                                <input type=\"password\" name=\"pwd\" id=\"pwd\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userDTO.pwd}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" />\r\n");
      out.write("                                <!-- 입력 오류나 추가 정보를 표시할 div입니다. -->\r\n");
      out.write("                                <div id=\"pwdDiv\"></div>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        <tr align=\"center\">\r\n");
      out.write("                            <!-- 테이블의 하단에 여러 버튼들을 배치합니다. -->\r\n");
      out.write("                            <td colspan=\"2\" height=\"20\">\r\n");
      out.write("                                <!-- '회원목록' 버튼을 클릭하면 회원 목록 페이지로 이동합니다. 현재 페이지 정보(pg)를 URL에 포함시켜 전송합니다. -->\r\n");
      out.write("                                <button type=\"button\" onclick=\"location.href='/spring/user/list?pg=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">회원목록</button>\r\n");
      out.write("                                <!-- '정보수정' 버튼입니다. 클릭 시 자바스크립트의 update.js 파일에서 처리됩니다. -->\r\n");
      out.write("                                <button type=\"button\" id=\"updateBtn\">정보수정</button>\r\n");
      out.write("                                <!-- '회원탈퇴' 버튼입니다. 클릭 시 회원 탈퇴 기능이 수행되도록 설정되어 있습니다. -->\r\n");
      out.write("                                <button type=\"button\"\r\n");
      out.write("								    onclick=\"location.href='/spring/user/deleteForm?id=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userDTO.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&pg=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\">\r\n");
      out.write("								    회원탈퇴\r\n");
      out.write("								</button>\r\n");
      out.write("\r\n");
      out.write("                                <!-- '초기화' 버튼입니다. 클릭 시 입력된 내용을 초기화합니다. -->\r\n");
      out.write("                                <button type=\"reset\">초기화</button>\r\n");
      out.write("                            </td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </table>\r\n");
      out.write("                </form>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("	<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("    <!-- jQuery 라이브러리를 불러옵니다. 주로 Ajax 요청과 DOM 조작을 위해 사용됩니다. -->\r\n");
      out.write("    <script src=\"http://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("    <!-- 사용자 정보 수정을 처리하기 위한 자바스크립트 파일을 불러옵니다. 'update.js'는 정보 수정과 탈퇴와 같은 기능을 처리합니다. -->\r\n");
      out.write("    <script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/js/update.js\"></script>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
