/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-11 07:21:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>메인 인덱스</title>\r\n");
      out.write("    <!-- 부트스트랩 CSS 불러오기 -->\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/css/bootstrap.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/index.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!-- 메인 컨테이너 -->\r\n");
      out.write("<div id=\"main-container\" class=\"container\">\r\n");
      out.write("    \r\n");
      out.write("    <!-- 로그인 상태 표시 -->\r\n");
      out.write("    <div id=\"login_status\">\r\n");
      out.write("        <p>환영합니다, ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.loginUser.name}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("님!</p>\r\n");
      out.write("        <div>\r\n");
      out.write("            <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/logout\" class=\"btn btn-sm btn-outline-primary\">로그아웃</a>\r\n");
      out.write("            <a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/loginForm\" class=\"btn btn-sm btn-outline-secondary\">로그인</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <!-- 메인 화면 제목 -->\r\n");
      out.write("    <h2>*** 메인화면 ***</h2>\r\n");
      out.write("    \r\n");
      out.write("    <!-- 메뉴 링크들 -->\r\n");
      out.write("    <h3>\r\n");
      out.write("        <p><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/loginForm\">Login</a></p>\r\n");
      out.write("        <p><a href=\"http://localhost:8080/spring/user/writeForm\">회원가입(입력)</a></p>\r\n");
      out.write("        <p><a href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/user/list?pg=1\">회원정보(출력)</a></p>\r\n");
      out.write("        <br/>\r\n");
      out.write("        <p><a href=\"/spring/user/uploadForm\">파일 업로드</a></p>\r\n");
      out.write("        <p><a href=\"/spring/user/uploadAJaxForm\">파일 업로드 AJax</a></p>\r\n");
      out.write("        <br/>\r\n");
      out.write("        <p><a href=\"/spring/user/uploadList\">이미지 출력</a></p>\r\n");
      out.write("    </h3>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 부트스트랩 JS 불러오기 -->\r\n");
      out.write("<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/5.3.0/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("Spring Framework + Maven + MySQL + MyBatis(@Mapper 사용) + JSP(jQuery) + NCP (예정)\r\n");
      out.write("\r\n");
      out.write("Project: SpringProject\r\n");
      out.write("src/main/java\r\n");
      out.write("	com.controller.SpringProject\r\n");
      out.write("		MainController.java\r\n");
      out.write("	user.controller\r\n");
      out.write("		UserController.java\r\n");
      out.write("		UserUploadController.java\r\n");
      out.write("	user.service\r\n");
      out.write("		UserService.java (Interface)\r\n");
      out.write("	user.service.impl\r\n");
      out.write("		UserServiceImpl.java	\r\n");
      out.write("	user.dao\r\n");
      out.write("		UserDAO.java (Interface)\r\n");
      out.write("	user.dao.impl\r\n");
      out.write("		UserMyBatisDAO.java ===> 제거	\r\n");
      out.write("	user.bean\r\n");
      out.write("		UserDTO.java\r\n");
      out.write("		UserPaging.java\r\n");
      out.write("		UserUploadDTO.java\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("src/main/resources\r\n");
      out.write("	mapper\r\n");
      out.write("		userMapper.xml\r\n");
      out.write("	spring\r\n");
      out.write("		applicationContext.xml\r\n");
      out.write("	sql\r\n");
      out.write("		usertable.sql				\r\n");
      out.write("src/main/webapp\r\n");
      out.write("	WEB-INF\r\n");
      out.write("		css\r\n");
      out.write("			write.css\r\n");
      out.write("			...\r\n");
      out.write("		js\r\n");
      out.write("			write.js\r\n");
      out.write("			..\r\n");
      out.write("		image\r\n");
      out.write("			*.png\r\n");
      out.write("		user\r\n");
      out.write("			..\r\n");
      out.write("		upload\r\n");
      out.write("			uploadForm.jsp\r\n");
      out.write("		storage(가상주소, 업로드의 위치)\r\n");
      out.write("				\r\n");
      out.write("		spring\r\n");
      out.write("			..							\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write(" -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
