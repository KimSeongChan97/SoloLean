/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.93
 * Generated at: 2024-10-14 05:05:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.upload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>파일 업로드 페이지</title>\r\n");
      out.write("<!-- Font Awesome을 이용하여 아이콘을 사용할 수 있게 해주는 CSS 파일을 로드합니다. -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\r\n");
      out.write("<!-- 외부 CSS 파일을 불러와 스타일을 적용합니다. -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/css/uploadForm.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 홈으로 돌아가는 링크를 제공합니다. Font Awesome의 집 모양 아이콘을 사용하고 있습니다. -->\r\n");
      out.write("<a href=\"/spring/\"><i class=\"fa-solid fa-house\"></i> HOME</a>\r\n");
      out.write("<br/>\r\n");
      out.write("\r\n");
      out.write("<!-- \r\n");
      out.write("    enctype 속성에 \"multipart/form-data\"를 설정하여 폼에서 파일을 함께 전송할 수 있게 설정.\r\n");
      out.write("    action은 파일 업로드 처리를 위한 서버의 URL을 지정하고 있습니다.\r\n");
      out.write("-->\r\n");
      out.write("<form method=\"post\" enctype=\"multipart/form-data\" action=\"/spring/user/upload\">\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<!-- 상품명 입력을 위한 행입니다. -->\r\n");
      out.write("			<th>상품명</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<!-- 상품명을 입력할 수 있는 입력 필드입니다. size 속성으로 필드 크기를 설정하고 있으며, 아이콘도 추가되었습니다. -->\r\n");
      out.write("				<i class=\"fa-solid fa-pen-to-square\"></i><input type=\"text\" name=\"imageName\" size=\"35\" />\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<!-- 상품 설명을 입력할 수 있는 행입니다. -->\r\n");
      out.write("			<td colspan=\"2\">\r\n");
      out.write("				<!-- 다중행 텍스트 입력 필드입니다. rows는 줄 수, cols는 칸 수를 지정합니다. 아이콘이 포함되어 있습니다. -->\r\n");
      out.write("				<textarea name=\"imageContent\" rows=\"10\" cols=\"50\"></textarea>\r\n");
      out.write("				<i class=\"fa-brands fa-google\"></i>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<!-- \r\n");
      out.write("			파일 업로드 시 한번에 여러 파일을 업로드할 수 있는 필드입니다. \r\n");
      out.write("			서버에서는 List로 파일을 받을 수 있습니다. multiple 속성으로 다중 선택을 허용합니다.\r\n");
      out.write("		-->\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"2\"><i class=\"fa-solid fa-image\"></i>\r\n");
      out.write("				<input type=\"file\" name=\"img[]\" multiple=\"multiple\" />\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<!-- 이미지 업로드 및 취소 버튼을 제공하는 마지막 행입니다. -->\r\n");
      out.write("			<td colspan=\"2\" align=\"center\">\r\n");
      out.write("				<!-- 이미지를 업로드할 때 사용하는 버튼입니다. 아이콘이 함께 표시됩니다. -->\r\n");
      out.write("				<input type=\"submit\" value=\"이미지 업로드\" />  <i class=\"fa-solid fa-arrow-up\"></i>\r\n");
      out.write("				<!-- 취소 버튼입니다. 입력 필드를 초기화합니다. 아이콘이 함께 표시됩니다. -->\r\n");
      out.write("				<input type=\"reset\" value=\"취소\" />  <i class=\"fa-solid fa-xmark\"></i>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>			\r\n");
      out.write("	</table>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<!-- jQuery 라이브러리를 사용하여 이벤트 처리 및 Ajax 통신을 쉽게 할 수 있도록 추가합니다. -->\r\n");
      out.write("<script src=\"http://code.jquery.com/jquery-3.7.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
