Spring_and_SpringBoot


1. 스프링(Spring Framework)
스프링은 자바 엔터프라이즈 애플리케이션 개발을 쉽게 하기 위해 만들어진 오픈 소스 프레임워크입니다. 주요 특징은 **의존성 주입(DI)**과 **AOP(Aspect-Oriented Programming)**입니다.

주요 특징
POJO 기반 개발: 스프링은 기존의 Java 객체(Plain Old Java Objects, POJO)를 사용할 수 있도록 지원하여, 복잡한 자바 EE 애플리케이션의 구조를 간단하게 만듭니다.
의존성 주입(DI, Dependency Injection): 객체 간의 의존성을 외부에서 주입받아 애플리케이션의 유연성을 높입니다.
AOP(Aspect-Oriented Programming): 보안, 로깅 등과 같은 부가적인 기능을 비즈니스 로직과 분리하여 개발할 수 있습니다.
트랜잭션 관리: 스프링은 선언적 트랜잭션 관리(주로 데이터베이스 관련 작업)를 지원합니다.
다양한 모듈 지원: 스프링은 웹, 데이터 접근, 보안, 메시징 등 다양한 기능을 제공하는 모듈을 포함합니다.
스프링의 구성 요소
스프링 코어(Core): DI와 AOP의 기능을 제공하는 핵심 모듈입니다.
스프링 MVC(Model-View-Controller): 웹 애플리케이션 개발에 사용되는 웹 모듈로, 요청을 처리하고 그 결과를 보여주는 MVC 패턴을 지원합니다.
스프링 데이터: 데이터베이스 연동을 단순화하는 모듈입니다. JPA, MyBatis 등의 ORM(객체 관계 매핑) 프레임워크와 함께 사용할 수 있습니다.
스프링 시큐리티(Security): 애플리케이션의 보안을 담당하는 모듈로, 인증과 권한 관리 기능을 제공합니다.
2. 스프링 부트(Spring Boot)
스프링 부트는 스프링 프레임워크를 더 쉽게 사용할 수 있도록 만든 프로젝트입니다. 기본적으로 스프링의 복잡한 설정을 줄이고, 개발자가 빠르게 애플리케이션을 구축할 수 있도록 돕습니다.

스프링 부트의 주요 특징
자동 설정(Auto Configuration): 스프링 부트는 기본적으로 다양한 설정을 자동으로 해주어, 개발자가 복잡한 설정 파일을 작성할 필요가 없습니다.
내장 서버(Embedded Server): 스프링 부트는 톰캣(Tomcat), 제티(Jetty) 등의 서버를 내장하고 있어 별도의 웹 서버 설정 없이 독립 실행형 애플리케이션을 쉽게 배포할 수 있습니다.
스타터 패키지(Starter Packages): 스프링 부트는 데이터베이스, 보안, 웹 등 여러 기능을 쉽게 사용할 수 있는 스타터 패키지를 제공합니다. 예를 들어, spring-boot-starter-web을 사용하면 웹 애플리케이션 개발에 필요한 의존성을 자동으로 추가할 수 있습니다.
의존성 관리: 프로젝트에서 필요한 의존성을 자동으로 관리해 주며, 버전 충돌 문제를 줄여 줍니다.
간편한 배포: 스프링 부트 애플리케이션은 JAR 파일로 패키징하여 쉽게 배포할 수 있습니다. 또한, CI/CD 환경에서 스프링 부트 애플리케이션을 매우 효율적으로 관리할 수 있습니다.

스프링 부트의 장점
빠른 애플리케이션 개발: 스프링 부트는 복잡한 설정을 줄여 주고, 개발을 빠르게 진행할 수 있게 해줍니다.
의존성 자동 관리: 필요에 따라 기본 의존성을 쉽게 추가하고 관리할 수 있습니다.
내장 서버: 외부 서버를 설정할 필요 없이 바로 애플리케이션을 실행할 수 있어 개발 환경 구축이 용이합니다.
프로덕션 준비 완료: 스프링 부트는 기본적으로 로그 관리, 모니터링, 보안 등의 기능이 준비되어 있어, 프로덕션 환경에서도 빠르게 배포할 수 있습니다.
스프링과 스프링 부트의 차이점
설정: 스프링은 설정을 일일이 작성해야 하지만, 스프링 부트는 많은 설정을 자동으로 해줍니다.
서버: 스프링은 외부 서버 설정이 필요하지만, 스프링 부트는 내장 서버를 제공합니다.
프로젝트 구조: 스프링 부트는 매우 간단한 구조로 애플리케이션을 시작할 수 있지만, 스프링은 처음부터 다양한 모듈을 설정해야 할 수 있습니다.

학습을 위한 주요 개념들
Spring MVC: 웹 애플리케이션의 컨트롤러와 뷰를 관리하는 핵심 패턴입니다.
JPA(Java Persistence API): 객체와 데이터베이스 간의 매핑을 도와주는 API로, 데이터베이스 연동을 단순화합니다. 스프링 데이터 JPA와 함께 자주 사용됩니다.
REST API: 웹 애플리케이션이 다른 애플리케이션과 통신할 수 있도록 하는 방식으로, 주로 JSON을 사용해 데이터를 주고받습니다.


============================================================================

Setting 부터...

JDK 11, Tomcat 9.0, Spring 5.x...

부팅만 jdk 11, 이후 버전 변경하여 사용가능

Spring 에서 객체는 bin 이다

new 클래스명() => 
1. XML
2. Annotation
3. *.java

프로젝트 만들고 빌드패스를 통해 17버전으로 변경 가능

Project Facets  17 설정
Java Build Path 17 설정

Maven 은 
프로젝트 우클 -> Maven - > UpdateProject 를 해야함

( 이후 JDK 버전 변경 등 )

 	<dependencies>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context</artifactId>
		    <version>5.3.39</version>
		</dependency>
	</dependencies>
이후
C:\Users\sck22\.m2\repository

설치됨


    <build>
    <sourceDirectory>src</sourceDirectory>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>17</release>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
 	 <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
 	 <dependencies>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context</artifactId>
		    <version>5.3.39</version>
		</dependency>
	</dependencies>


---------------------------------------


함수()
- 명령어들의 집합

class 클래스명 {
		멤버함수()
		}

함수와 멤버함수는 같은 기능이지만 클래스 안에 있음
멤버함수는 자바에서 메서드() 라고 하며 셋 다 같은 기능(이름만 다름)



객체
Test t = new Test();
~~~.xml

<bean id="t" class="Test" />

* 빈 생성
1. <bean />
2. @Compent
@ 에는 3가지가 더 있음

--------------------------------
DI (Dependency Injection)
스프링의 핵심 개념
객체사이의 의존 관계를 자기 자신이 아닌 외부에 의해서 설정된다는 개념이다
스프링에서는 설정파일을 사용하여 손쉽게 객체간의 의존관계를 설정하기에 스프링을 DI컨테이너라고 부
르기도 한다.
DI 컨테이너는 어떤 클래스가 필요로 하는 인스턴스를 자동으로 생성, 취득하여 연결시켜주는 역활을 한
다.
DI 컨테이너가 인스턴스를 생성하도록 하려면 프로그램 소스 내부에서 new 로 직접 생성하지 않고 설정
파일에서 필요로 하는 클래스의 정보를 설정해 주어야한다.
스프링은 각 클래스간의 의존관계를 관리하기 위한 방법
- Constructor Injection
- Setter Injection

------------------------------------
1. Constructor Injection
: 생성자를 통해서 의존 관계를 연결시키는 것을 말한다.
: 생성자를 통해서 의존 관계를 연결하기 위해서는 XML 설정 파일에서 <bean>요소의 하위요소로 
<constructor-arg>를 추가해야 한다. 
① 전달인자가 2개 이상인 경우
기본데이터 타입일 경우에는 value 요소를 사용하여 의존관계를 연결시키기 위한 값을 지정
public class Foo {
public Foo(int a, String b) { } }

[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg>
<value>25</value>
</constructor-arg>
<constructor-arg value="Hello" />
</bean>

② index 속성을 이용하여 지정
[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg index="1" value="Hello" />
<constructor-arg index="0">
<value>25</value>
</constructor-arg>
</bean>

③ type 속성을 이용하여 지정
[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg type="int" value="25" />
<constructor-arg type="java.lang.String" value="Hello" /> 
</bean>

④ 객체를 전달할 경우에는 ref 요소를 사용
public class Foo {
private Bar bar;
public Foo(Bar bar){
this.bar = bar;
} }

public class Bar { }
[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg>
<ref bean="bar" />
</constructor-arg>
</bean>
<bean id="bar" class="Bar" />

2. Setter Injection
: setter메소드를 이용하여 의존 관계를 연결시키는 것을 말한다.
: <property>요소의 name 속성을 이용하여 값의 의존 관계를 연결시킬 대상이 되는 필드값을 지정한다

① 전달인자가 2개 이상인 경우
기본데이터 타입일 경우에는 value 요소를 사용하여 의존관계를 연결시키기 위한 값을 지정
public class Foo {
private int a
private String b;
public void setA(int a) { }
public void setB(String b) { } }

[applicationContext.xml]
<bean id="foo" class="Foo">
<property name="a">
<value>25</value>
</property>
<property name="b" value="Hello" />
</bean>

② 객체를 전달할 경우에는 ref 요소를 사용
public class Foo {
private Bar bar;
public void setBar(Bar bar){
this.bar = bar;
} }

public class Bar { }

[applicationContext.xml]
<bean id="foo" class="Foo">
	<property name="bar" ref="bar"></property>
</bean>
<bean id="bar" class="Bar" />

--------------------------------------



* 빈 생성
1. <bean id="" class="" />
2. @Compent
   @Bean








































































