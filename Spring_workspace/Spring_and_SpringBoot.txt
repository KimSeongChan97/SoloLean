Spring_and_SpringBoot


1. 스프링(Spring Framework)
스프링은 자바 엔터프라이즈 애플리케이션 개발을 쉽게 하기 위해 만들어진 오픈 소스 프레임워크입니다. 주요 특징은 **의존성 주입(DI)**과 **AOP(Aspect-Oriented Programming)**입니다.

주요 특징
POJO 기반 개발: 스프링은 기존의 Java 객체(Plain Old Java Objects, POJO)를 사용할 수 있도록 지원하여, 복잡한 자바 EE 애플리케이션의 구조를 간단하게 만듭니다.
의존성 주입(DI, Dependency Injection): 객체 간의 의존성을 외부에서 주입받아 애플리케이션의 유연성을 높입니다.
AOP(Aspect-Oriented Programming): 보안, 로깅 등과 같은 부가적인 기능을 비즈니스 로직과 분리하여 개발할 수 있습니다.
트랜잭션 관리: 스프링은 선언적 트랜잭션 관리(주로 데이터베이스 관련 작업)를 지원합니다.
다양한 모듈 지원: 스프링은 웹, 데이터 접근, 보안, 메시징 등 다양한 기능을 제공하는 모듈을 포함합니다.
스프링의 구성 요소
스프링 코어(Core): DI와 AOP의 기능을 제공하는 핵심 모듈입니다.
스프링 MVC(Model-View-Controller): 웹 애플리케이션 개발에 사용되는 웹 모듈로, 요청을 처리하고 그 결과를 보여주는 MVC 패턴을 지원합니다.
스프링 데이터: 데이터베이스 연동을 단순화하는 모듈입니다. JPA, MyBatis 등의 ORM(객체 관계 매핑) 프레임워크와 함께 사용할 수 있습니다.
스프링 시큐리티(Security): 애플리케이션의 보안을 담당하는 모듈로, 인증과 권한 관리 기능을 제공합니다.
2. 스프링 부트(Spring Boot)
스프링 부트는 스프링 프레임워크를 더 쉽게 사용할 수 있도록 만든 프로젝트입니다. 기본적으로 스프링의 복잡한 설정을 줄이고, 개발자가 빠르게 애플리케이션을 구축할 수 있도록 돕습니다.

스프링 부트의 주요 특징
자동 설정(Auto Configuration): 스프링 부트는 기본적으로 다양한 설정을 자동으로 해주어, 개발자가 복잡한 설정 파일을 작성할 필요가 없습니다.
내장 서버(Embedded Server): 스프링 부트는 톰캣(Tomcat), 제티(Jetty) 등의 서버를 내장하고 있어 별도의 웹 서버 설정 없이 독립 실행형 애플리케이션을 쉽게 배포할 수 있습니다.
스타터 패키지(Starter Packages): 스프링 부트는 데이터베이스, 보안, 웹 등 여러 기능을 쉽게 사용할 수 있는 스타터 패키지를 제공합니다. 예를 들어, spring-boot-starter-web을 사용하면 웹 애플리케이션 개발에 필요한 의존성을 자동으로 추가할 수 있습니다.
의존성 관리: 프로젝트에서 필요한 의존성을 자동으로 관리해 주며, 버전 충돌 문제를 줄여 줍니다.
간편한 배포: 스프링 부트 애플리케이션은 JAR 파일로 패키징하여 쉽게 배포할 수 있습니다. 또한, CI/CD 환경에서 스프링 부트 애플리케이션을 매우 효율적으로 관리할 수 있습니다.

스프링 부트의 장점
빠른 애플리케이션 개발: 스프링 부트는 복잡한 설정을 줄여 주고, 개발을 빠르게 진행할 수 있게 해줍니다.
의존성 자동 관리: 필요에 따라 기본 의존성을 쉽게 추가하고 관리할 수 있습니다.
내장 서버: 외부 서버를 설정할 필요 없이 바로 애플리케이션을 실행할 수 있어 개발 환경 구축이 용이합니다.
프로덕션 준비 완료: 스프링 부트는 기본적으로 로그 관리, 모니터링, 보안 등의 기능이 준비되어 있어, 프로덕션 환경에서도 빠르게 배포할 수 있습니다.
스프링과 스프링 부트의 차이점
설정: 스프링은 설정을 일일이 작성해야 하지만, 스프링 부트는 많은 설정을 자동으로 해줍니다.
서버: 스프링은 외부 서버 설정이 필요하지만, 스프링 부트는 내장 서버를 제공합니다.
프로젝트 구조: 스프링 부트는 매우 간단한 구조로 애플리케이션을 시작할 수 있지만, 스프링은 처음부터 다양한 모듈을 설정해야 할 수 있습니다.

학습을 위한 주요 개념들
Spring MVC: 웹 애플리케이션의 컨트롤러와 뷰를 관리하는 핵심 패턴입니다.
JPA(Java Persistence API): 객체와 데이터베이스 간의 매핑을 도와주는 API로, 데이터베이스 연동을 단순화합니다. 스프링 데이터 JPA와 함께 자주 사용됩니다.
REST API: 웹 애플리케이션이 다른 애플리케이션과 통신할 수 있도록 하는 방식으로, 주로 JSON을 사용해 데이터를 주고받습니다.


============================================================================

Setting 부터...

JDK 11, Tomcat 9.0, Spring 5.x...

부팅만 jdk 11, 이후 버전 변경하여 사용가능

Spring 에서 객체는 bin 이다

new 클래스명() => 
1. XML
2. Annotation
3. *.java

프로젝트 만들고 빌드패스를 통해 17버전으로 변경 가능

Project Facets  17 설정
Java Build Path 17 설정

Maven 은 
프로젝트 우클 -> Maven - > UpdateProject 를 해야함

( 이후 JDK 버전 변경 등 )

 	<dependencies>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context</artifactId>
		    <version>5.3.39</version>
		</dependency>
	</dependencies>
이후
C:\Users\sck22\.m2\repository

설치됨


    <build>
    <sourceDirectory>src</sourceDirectory>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          <release>17</release>
        </configuration>
      </plugin>
    </plugins>
  </build>
  
 	 <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
 	 <dependencies>
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-context</artifactId>
		    <version>5.3.39</version>
		</dependency>
	</dependencies>


---------------------------------------


함수()
- 명령어들의 집합

class 클래스명 {
		멤버함수()
		}

함수와 멤버함수는 같은 기능이지만 클래스 안에 있음
멤버함수는 자바에서 메서드() 라고 하며 셋 다 같은 기능(이름만 다름)



객체
Test t = new Test();
~~~.xml

<bean id="t" class="Test" />

* 빈 생성
1. <bean />
2. @Compent
@ 에는 3가지가 더 있음

--------------------------------
DI (Dependency Injection)
스프링의 핵심 개념
객체사이의 의존 관계를 자기 자신이 아닌 외부에 의해서 설정된다는 개념이다
스프링에서는 설정파일을 사용하여 손쉽게 객체간의 의존관계를 설정하기에 스프링을 DI컨테이너라고 부
르기도 한다.
DI 컨테이너는 어떤 클래스가 필요로 하는 인스턴스를 자동으로 생성, 취득하여 연결시켜주는 역활을 한
다.
DI 컨테이너가 인스턴스를 생성하도록 하려면 프로그램 소스 내부에서 new 로 직접 생성하지 않고 설정
파일에서 필요로 하는 클래스의 정보를 설정해 주어야한다.
스프링은 각 클래스간의 의존관계를 관리하기 위한 방법
- Constructor Injection
- Setter Injection

------------------------------------
1. Constructor Injection
: 생성자를 통해서 의존 관계를 연결시키는 것을 말한다.
: 생성자를 통해서 의존 관계를 연결하기 위해서는 XML 설정 파일에서 <bean>요소의 하위요소로 
<constructor-arg>를 추가해야 한다. 
① 전달인자가 2개 이상인 경우
기본데이터 타입일 경우에는 value 요소를 사용하여 의존관계를 연결시키기 위한 값을 지정
public class Foo {
public Foo(int a, String b) { } }

[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg>
<value>25</value>
</constructor-arg>
<constructor-arg value="Hello" />
</bean>

② index 속성을 이용하여 지정
[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg index="1" value="Hello" />
<constructor-arg index="0">
<value>25</value>
</constructor-arg>
</bean>

③ type 속성을 이용하여 지정
[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg type="int" value="25" />
<constructor-arg type="java.lang.String" value="Hello" /> 
</bean>

④ 객체를 전달할 경우에는 ref 요소를 사용
public class Foo {
private Bar bar;
public Foo(Bar bar){
this.bar = bar;
} }

public class Bar { }
[applicationContext.xml]
<bean id="foo" class="Foo">
<constructor-arg>
<ref bean="bar" />
</constructor-arg>
</bean>
<bean id="bar" class="Bar" />

2. Setter Injection
: setter메소드를 이용하여 의존 관계를 연결시키는 것을 말한다.
: <property>요소의 name 속성을 이용하여 값의 의존 관계를 연결시킬 대상이 되는 필드값을 지정한다

① 전달인자가 2개 이상인 경우
기본데이터 타입일 경우에는 value 요소를 사용하여 의존관계를 연결시키기 위한 값을 지정
public class Foo {
private int a
private String b;
public void setA(int a) { }
public void setB(String b) { } }

[applicationContext.xml]
<bean id="foo" class="Foo">
<property name="a">
<value>25</value>
</property>
<property name="b" value="Hello" />
</bean>

② 객체를 전달할 경우에는 ref 요소를 사용
public class Foo {
private Bar bar;
public void setBar(Bar bar){
this.bar = bar;
} }

public class Bar { }

[applicationContext.xml]
<bean id="foo" class="Foo">
	<property name="bar" ref="bar"></property>
</bean>
<bean id="bar" class="Bar" />

--------------------------------------


스프링 AOP(Aspect Oriented Programming) - 관점지향프로그램
 OOP(Object Oriented Programming) - 객체지향프로그램

Aspect란
어플리케이션의 핵심 기능은 아니지만, 어플리케이션을 구성하는 중요한 요소이고, 부가적인 기능을 담당
하는 요소
Aspect = Advice + Pointcut
어드바이저는 아주 단순한 형태의 애스펙트라고 볼 수 있다
AOP란
어플리케이션의 핵심적인 기능에서 부가적인 기능을 분리해서 애스펙트라는 모듈로 만들어서 설계하고 개
발하는 방법을 AOP(Aspect Oriented Programming)이라고 한다
AOP는 새로운 프로그래밍 패러다임이 아니라, OOP를 돕는 보조적인 기술이다
어플리케이션의 핵심기능을 따라 코딩하지 않고, 핵심기능 대신, 부가적인 기능을 바라보고 집중해서 설계
하고 개발할 수 있다
어플리케이션을 부가기능 관점에서, 새롭게 바라볼 수 있게 해준다 라는 의미로 AOP를 관점 지향 프로그
래밍이라고도 한다
스프링이 제공하는 AOP는 프록시를 이용한다
프록시를 통해 타겟 오브젝트의 메소드가 호출될 경우, 프록시가 제어를 가로채고, InvocationHandler와 
같은 오브젝트를 통해 타겟 메소드의 실행 전 후로 부가적인 기능을 실행한다
AOP 기술의 원조인 AspectJ는 프록시를 사용하지 않는 대표적인 AOP 기술이다
타깃 오브젝트를 뜯어고쳐서 부가기능을 직접 넣어주는 방식을 사용한다
소스코드를 고치는 것이 아니라, 컴파일 된 타깃 클래스의 파일 자체를 수정하거나 클래스가 JVM에 로딩
되는 시점을 가로채서 바이트코드를 조작 한다
프록시를 사용하지 않고 클래스 파일 조작과 같은 복잡한 방법을 사용하는 이유는
1. 스프링과 같은 DI 컨테이너의 도움이 필요 없다
스프링과 같은 컨테이너가 사용되지 않는 환경에서 AOP 적용이 가능하다
2. 프록시보다 훨씬 강력하고 유연하다
프록시 방식은 타깃 오브젝트가 생성되고 난 후부터 적용이 가능하다
하지만 AspectJ는 어떤 순간에든지 적용이 가능하다
클래스 바이트코드를 직접 조작하는 것이기 때문에 거의 제한이 없다
대부분의 부가기능은 프록시 방식을 사용해 메소드의 호출 시점에 부여하는 것으로도 충분하다
AspectJ와 같은 고급 AOP 기술은 바이트코드 조작을 위해 JVM의 실행옵션을 변경하고, 별도의 바이트코
드 컴파일러를 사용하고, 특별한 클래스 로더를 사용하는 등 번거로운 작업이 필요하다
: 일반적으로 스프링의 AOP를 사용하고, 스프링의 AOP 수준을 넘어서는 기능이 필요하다면
AspectJ를 사용하는 것이다

: 핵심관심사항과 공통관심사항을 기준으로 프로그래밍 함으로써 공통 모듈을 여러 코드에 쉽게 적용
: 공통관심사항을 구현한 코드를 핵심 로직을 구현한 코드에 삽입하는 것
: 핵심로직을 구현할 때 트랜잭션 적용이나 보안 검사와 공통 기능을 삽입할 필요가 없다
AOP 용어
1. Target : 부가기능을 부여할 대상, 핵심기능이 담긴 클래스
2. Advice : 부가기능을 담은 모듈
언제 공통 관심 기능을 핵심 로직에 적용할 지를 정의
Before, After Returning, After Throwing, Around 등이 있다
3. Joinpoint : Advice를 적용 가능한 지점을 의미
 메소드 호출, 필드 값 변경 등
 스프링의 프록시 AOP에서 조인 포인트는 메소드의 실행 단계뿐이다
 타깃 오브젝트가 구현한 인터페이스의 모든 메소드가 조인 포인트가 된다
4. Pointcut : 조인 포인트를 선별하는 기능을 정의한 모듈
 가능한 조인 포인트들 중에 실제로 부가기능을 적용할 것들을 선별한다
 클래스를 선정하고, 그 안의 메소드를 선정하는 과정을 거친다
 실제로 Advice가 적용되는 Joinpoint를 나타낸다
5. Proxy : 클라이언트와 타깃 사이에 존재하면서 부가기능을 제공하는 오브젝트
 클라이언트는 타깃을 요청하지만, 클라이언트에게는 DI를 통해 타깃 대신 프록시가 주입된다
 클라이언트의 메소드 호출을 대신 받아서 타깃에게 위임하며, 그 과정에서 부가기능을 부여한
다
 스프링 AOP는 프록시를 이용한다
6. Advisor : 어드바이스와 포인트컷을 하나로 묶어 취급한 것
 AOP의 가장 기본이 되는 모듈이다
 스프링은 자동 프록시 생성기가 어드바이저 단위로 검색해서 AOP를 적용한다
7. Aspect : 다수의 포인트컷과 어드바이스의 조합으로 만들어진다
 보통 싱글톤 형태의 오브젝트로 존재한다
 어드바이저는 아주 단순한 애스펙트라고 볼 수 있다
8. Weaving : Advice를 핵심로직코드에 적용하는 것을 Weaving라고 한다.
Advice를 Weaving하는 3가지 방식
- 컴파일 시에 Weaving
 AspectJ에서 사용하는 방식
 AOP가 적용된 클래스 파일이 생성된다
- 클래스 로딩 시에 Weaving
 AspectJ 5/6 버전이 컴파일 방식과 클래스 로딩방식을 함께 지원
- 런타임 시에 Weaving
 소스코드나 클래스 정보 자체를 변경하지 않는다
 프록시를 이용한다(핵심로직을 구현한 객체에 직접 접근하는 것이 아니라 중간에 프록시를 생성하여 프
록시를 통해서 핵심로직을 구현한 객체에 접근한다.)
 프록시는 메소드가 호출될 때에만 적용할 수 있다(필드값 변경에 대해서는 적용 불가능)
: 스프링은 자체적으로 프록시 기반의 AOP를 지원한다
 메소드 호출 Joinpoint만 지원(필드값 변경과 같은 Joinpoint는 불가능)
: 스프링 AOP는 자바 기반이다.
 AspectJ는 Aspect를 위한 별도의 문법이 필요하다
: 대상 객체의 메소드를 실행하기 전/후에 원하는 기능을 삽입(Around Advice)하는데 캐시기능, 성능 모
니터링 기능과 같은 Aspect를 구현


-----------------------------

* 빈 생성
1. <bean id="" class="" />
2. @Compent - class 위
   @Bean - method 위








































































