package com.hello;
// 패키지 선언: 'com.hello'라는 패키지에 속하는 클래스를 정의합니다.
// 패키지는 클래스들을 그룹화하여 네이밍 충돌을 방지하고, 프로젝트를 체계적으로 관리할 수 있도록 도와줍니다.

import javax.servlet.http.HttpServlet;
// HttpServlet 클래스를 임포트하여 서블릿 클래스를 정의할 수 있도록 합니다.
// 서블릿은 Java EE (Jakarta EE) 웹 애플리케이션에서 클라이언트 요청을 처리하는 작은 자바 프로그램입니다.

import javax.servlet.http.HttpServletRequest;
// HttpServletRequest 클래스를 임포트하여 HTTP 요청 정보를 처리할 수 있도록 합니다.
// 클라이언트에서 서버로 보내는 요청의 메타데이터 및 파라미터를 담고 있습니다.

import javax.servlet.http.HttpServletResponse;
// HttpServletResponse 클래스를 임포트하여 HTTP 응답을 생성하고 클라이언트에 전달할 수 있도록 합니다.
// 서버가 클라이언트에 보내는 응답 데이터 및 상태 코드를 포함합니다.

public class HelloServlet extends HttpServlet {
    // HelloServlet 클래스는 HttpServlet 클래스를 상속받아, 서블릿 기능을 수행할 수 있게 합니다.
    // 서블릿(Servlet)은 서버에서 동작하며 클라이언트의 요청을 처리하고 그 결과를 반환하는 Java 프로그램입니다.
    // HttpServlet은 HTTP 프로토콜을 통해 클라이언트 요청을 처리하는 서블릿의 기본 클래스입니다.

    public void init() {
        // init() 메서드는 서블릿이 초기화될 때 호출됩니다.
        // 주로 서블릿이 초기화될 때 필요한 리소스를 로드하거나 설정을 초기화할 때 사용합니다.
        // 현재는 빈 메서드로 구현되어 있으므로, 초기화 작업은 수행되지 않습니다.
    }

    public void doGet(HttpServletRequest request, HttpServletResponse response) {
        // doGet() 메서드는 GET 요청을 처리합니다.
        // 클라이언트가 URL을 통해 서버에 요청을 보내면, 서버는 이 메서드를 통해 요청을 처리합니다.
        // HttpServletRequest 객체는 클라이언트 요청 정보를 담고 있으며,
        // HttpServletResponse 객체는 서버의 응답 정보를 클라이언트에게 전달하는 데 사용됩니다.
        // 현재는 메서드 본문이 비어 있어 실제로 요청을 처리하지 않습니다.
    }

    public void destroy() {
        // destroy() 메서드는 서블릿이 제거될 때 호출됩니다.
        // 서블릿이 더 이상 필요하지 않을 때 자원을 해제하거나 정리하는 데 사용합니다.
        // 현재는 빈 메서드로 구현되어 있어, 자원 해제 작업은 수행되지 않습니다.
    }
}


// HelloServlet -> class - > ...
// HelloServlet 클래스는 서블릿의 기본 동작을 정의한 클래스입니다.
// private < default < protected < public ...
// 자바에서 접근 제어자는 클래스, 메서드, 변수 등에 대한 접근 권한을 제한합니다.
// private: 동일 클래스에서만 접근 가능
// default: 동일 패키지 내에서만 접근 가능 (접근 제어자를 명시하지 않은 경우)
// protected: 동일 패키지 및 상속받은 클래스에서만 접근 가능
// public: 모든 클래스에서 접근 가능

// 1. 반드시 Tomcat 안에 저장 : HelloServlet.java
// Tomcat 서버는 서블릿을 실행하는 데 사용되는 웹 서버입니다.
// 서블릿 파일은 반드시 Tomcat의 지정된 디렉토리에 저장해야 합니다.
// 기본적으로 Java 소스 파일(.java)은 Tomcat의 기본 루트 경로에 직접 저장되지 않습니다.

// 기본 루트는 Tomcat 9.0 -> webapps -> ROOT (default Context) -> *.html 이나 *.jsp 가 들어간다. (java 파일은 들어가지 못한다.)
// Tomcat의 기본 웹 애플리케이션 루트 디렉토리는 'webapps/ROOT'입니다.
// HTML, JSP 파일은 이 경로에 직접 위치시킬 수 있지만, Java 소스 파일은 위치시킬 수 없습니다.
// Java 소스 파일은 서버에서 실행할 수 있도록 컴파일된 후에만 사용 가능합니다.

// java 파일은 WEB-INF 에 넣는다. (C:\Tomcat 9.0\webapps\ROOT\WEB-INF) , 내부에 있는 web.xml 은 환경설정 파일이다.
// Java 소스 파일은 일반적으로 'WEB-INF' 폴더에 위치하며, 이 폴더는 외부에서 직접 접근할 수 없습니다.
// 'WEB-INF' 폴더 내부에 있는 'web.xml' 파일은 서블릿과 관련된 설정 정보를 담고 있으며, 서블릿 매핑과 초기화 파라미터 등을 정의합니다.

// WEB-INF 에 src 폴더 생성 이후 HelloServlet.java 를 생성.
// 'WEB-INF' 폴더 내에 'src' 폴더를 생성한 후, HelloServlet.java 소스 파일을 이곳에 위치시킵니다.
// 'src' 폴더는 소스 파일을 체계적으로 관리하는 데 사용됩니다.

// 컴파일 된 것은 classes 폴더 생성 이후 package 파일들 => com 폴더 -> hello -> HelloServlet.class 가 생성.
// 소스 파일을 컴파일하면 'WEB-INF/classes' 폴더 내에 패키지 구조에 따라 클래스 파일(.class)이 생성됩니다.
// 예를 들어, HelloServlet.java가 'com.hello' 패키지에 속해 있다면, 'WEB-INF/classes/com/hello/HelloServlet.class' 파일이 생성됩니다.
// 이 클래스 파일이 실제로 서버에서 실행되는 파일입니다.

// package 는 class 에서만 생성된다.
// 'package' 선언은 자바 소스 파일의 첫 번째 줄에 위치하며, 이는 클래스가 속한 패키지를 정의합니다.
// 패키지는 네이밍 충돌을 방지하고 관련된 클래스들을 그룹화하는 데 유용합니다.

// 2. 패키지 컴파일
// > javac HelloServlet.java 하면 안된다..
// 패키지 컴파일이 필요하다
// > javac -d ../classes HelloServlet.java
// 패키지 구조가 있는 Java 소스 파일을 컴파일할 때는 '-d' 옵션을 사용하여 컴파일된 클래스 파일의 출력 디렉토리를 지정해야 합니다.
// 이 명령어는 HelloServlet.java를 컴파일하여 'WEB-INF/classes' 폴더 내의 패키지 경로에 맞게 클래스 파일을 생성합니다.
// '../classes'는 소스 파일이 있는 위치에서 상대 경로로, classes 폴더를 의미합니다.
// 컴파일된 클래스 파일은 'WEB-INF/classes/com/hello/HelloServlet.class'로 생성됩니다.

// 3. servlet-api.jar 가 필요하다
// 서블릿을 컴파일하고 실행하기 위해서는 `servlet-api.jar` 파일이 필요합니다.
// 이 파일은 Tomcat 설치 디렉토리의 `lib` 폴더에 있으며, 이를 CLASSPATH 환경 변수에 추가해야 합니다.
// 환경 변수 설정 예시:
// CLASSPATH=C:\Tomcat 9.0\lib\servlet-api.jar
