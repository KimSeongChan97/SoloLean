메소드

결과형	메소드명(매개변수형 이름, 매개변수...){ // 구현
retrunType

}

int sub(int a, int b){ }
void sub(int a, int b){ }

***********★★★★★★★★★
String
1. 문자열
2. literal("") 생성 가능
3. 문자열 편집(수정)을 할 수 없다. ★
4. 비교시 == 사용하면 reference(참조값)을 비교 한다 
equals() 사용하면 문자열의 내용을 비교한다.

※ 문자열 자체가 reference(참조값) 이다.
※ 똑같은 내용의 문자열 리터럴은 메모리에 1번만 생성된다. 
new는 할 때마다 메모리에 생성 된다

StringBuffer / StringBuilder ★
1. 문자열
2. 문자열 편집이 가능
3. append(), delete() 존재 ( String class 에 없음 )


StringTokenizer(java.util)클래스와
 String클래스의 split()
1. 문자열을 분리할 때 사용
2. 분리된 문자열을 Token이라고 한다.
3. StringTokenizer는 비어있는 값은 무시하고 split()는 비어있는 값도 인식한다.

public String[] split(String regex)
public String[] split(String regex, int limit)

regex : 문자열 분할
limit : 분할을 제한

limit > 0: limit-1개의 매칭된 문자열을 분할하고 나머지는 하나의 요소로 반환합니다.
limit < 0: 모든 매칭된 문자열을 제한 없이 분할합니다.
limit = 0: 매칭된 문자열을 분할하되, 배열의 마지막에 빈 문자열이 포함되지 않도록 합니다
**********************************************
static - 클래스변수

- static 선언 이 먼저
- 프로그램 종료시 소멸
- 공유변수

1. 메모리 static 영역에 1번만 생성된다. → 초기화 1번만 수행 
모든 객체가 공유한다. (공유변수)
2. static 메소드에서는 static 변수만 사용 가능 
static 메소드에서는 this를 참조할 수 없다

3. static변수나 메소드는 호출시 클래스명으로 직접 호출 할 수 있다. 
객체로도 호출이 가능하다
4. static{ } - 초기화 영역
- 생성자보다도 먼저 수행한다.

import static
: 간단하게 static 상수 또는 메소드를 호출할 때 사용

******************************************************

* literal("")
- 정수형 literal : -25, 48, -100 ...
- 실수형 literal : 43.8, 12.6 ...
[ 상수(Constant) 와 다름. ]
- 문자형 literal : ' 문자 '
- 문자열 literal : " 문자열 "


로그인-> 클래스를 new 하는게 아니라 1개만. =>"싱글톤"
  ----> static 으로 고정값 만듦.

*☆**☆**☆**☆**☆**☆**☆**☆**☆*
상속 (inheritance) -> 모르면 class 확인

: is~a 관계  ~이다 
: 클래스의 재 구현 ☆☆☆☆☆☆☆☆☆

1. 상속받는 클래스는 상속해주는 클래스의 생성자와 private를 제외한 모든 것을 상속받는다.
2. Super class : 상속해 주는 클래스(부모) 
Sub  class : 상속받는 클래스(자식)
3. 접근제한자 protected는 Sub class에서 접근이 가능하다
4. Sub class로 객체를 생성하면 Super class와 자신의 생성자를 모두 호출한다.
5. 다중상속을 할 수 없다.
[형식]
class   Sub클래스명   extends     Super클래스명{ }


Override 메소드 ☆☆☆☆
1. Super클래스와 Sub클래스에 똑같은 메소드가 존재
2. 모든 우선권은 Sub클래스가 갖는다.
3. Super, Sub 클래스의 접근제어자(Modifier)는 틀려도 되지만 
Super보다 Sub클래스의 접근제어자(Modifier)가 더 커야한다.

this 와 this()
1. this 는 자신의 클래스의 참조값을 갖고 있다
2. this() 는 Overload된 다른 생성자를 호출 할 수 있다.
3. this()는 생성자의 첫줄에 써야 한다

super 와 super()
1. super 는 부모클래스의 참조값을 갖고 있다.
2. super() 는 부모클래스의 생성자를 호출 할 수 있다.
3. super() 는 생성자의 첫줄에 써야 한다.

 
***  차이점.
overload							Override
쌍둥이							부모자식
1. 하나의 클래스 안에서					1.상속관계
2. 메소드 명이 똑같다.					2. 다 똑같아야함
	인수 개수, 또는 인수형이 틀린경우			Modifier(접근제어자)는 틀려도 되지만, 반드시 자식 class(sub) 가 더 커야 한다.

class Test {							class Super {
	public void sub(int a){}					protected void disp(int a){}
	public void sub(int a, int b){}			}
	public int sub(char a){}
}

class Sample {						class Sub extends Super {	
	public int sub(char a){}					public void disp(int a){}
}								}

*********************

어노테이션 : Spring Boot
자바에서는 @ 
@Override 

































