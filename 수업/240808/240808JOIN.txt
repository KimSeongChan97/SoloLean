### 1. INNER JOIN

#### 개념
`INNER JOIN`은 두 테이블 간에 공통된 값을 가진 행만 결합합니다. 즉, 결합 조건에 맞는 행들만 결과 집합에 포함됩니다. 

#### 사용 방법
```sql
SELECT 컬럼1, 컬럼2, ...
FROM 테이블1
INNER JOIN 테이블2 ON 테이블1.기준_컬럼 = 테이블2.기준_컬럼;
```

#### 예제
```sql
SELECT employees.name, departments.department_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.id;
```

#### 결과
`employees` 테이블과 `departments` 테이블을 결합하여 `department_id`와 `id`가 일치하는 행들만 반환합니다.

### 2. LEFT JOIN (또는 LEFT OUTER JOIN)

#### 개념
`LEFT JOIN`은 왼쪽 테이블의 모든 행과 오른쪽 테이블의 일치하는 행을 반환합니다. 오른쪽 테이블에 일치하는 행이 없는 경우, `NULL` 값이 반환됩니다.

#### 사용 방법
```sql
SELECT 컬럼1, 컬럼2, ...
FROM 테이블1
LEFT JOIN 테이블2 ON 테이블1.기준_컬럼 = 테이블2.기준_컬럼;
```

#### 예제
```sql
SELECT employees.name, departments.department_name
FROM employees
LEFT JOIN departments ON employees.department_id = departments.id;
```

#### 결과
`employees` 테이블의 모든 행과 `departments` 테이블의 일치하는 행을 결합하며, `departments` 테이블에 일치하지 않는 행에 대해서는 `NULL`을 반환합니다.

### 3. RIGHT JOIN (또는 RIGHT OUTER JOIN)

#### 개념
`RIGHT JOIN`은 오른쪽 테이블의 모든 행과 왼쪽 테이블의 일치하는 행을 반환합니다. 왼쪽 테이블에 일치하는 행이 없는 경우, `NULL` 값이 반환됩니다.

#### 사용 방법
```sql
SELECT 컬럼1, 컬럼2, ...
FROM 테이블1
RIGHT JOIN 테이블2 ON 테이블1.기준_컬럼 = 테이블2.기준_컬럼;
```

#### 예제
```sql
SELECT employees.name, departments.department_name
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.id;
```

#### 결과
`departments` 테이블의 모든 행과 `employees` 테이블의 일치하는 행을 결합하며, `employees` 테이블에 일치하지 않는 행에 대해서는 `NULL`을 반환합니다.

### 4. FULL JOIN (또는 FULL OUTER JOIN)

#### 개념
`FULL JOIN`은 두 테이블의 모든 행을 반환하며, 한쪽 테이블에만 있는 행도 포함합니다. 일치하지 않는 행에 대해서는 `NULL` 값이 반환됩니다.

#### 사용 방법
```sql
SELECT 컬럼1, 컬럼2, ...
FROM 테이블1
FULL JOIN 테이블2 ON 테이블1.기준_컬럼 = 테이블2.기준_컬럼;
```

#### 예제
```sql
SELECT employees.name, departments.department_name
FROM employees
FULL JOIN departments ON employees.department_id = departments.id;
```

#### 결과
두 테이블의 모든 행을 결합하며, 일치하지 않는 행에 대해서는 `NULL` 값을 반환합니다.

### 5. CROSS JOIN

#### 개념
`CROSS JOIN`은 두 테이블의 모든 가능한 행의 조합을 반환합니다. 이는 Cartesian 곱을 반환하며, 각 행이 서로의 모든 행과 결합됩니다.

#### 사용 방법
```sql
SELECT 컬럼1, 컬럼2, ...
FROM 테이블1
CROSS JOIN 테이블2;
```

#### 예제
```sql
SELECT employees.name, departments.department_name
FROM employees
CROSS JOIN departments;
```

#### 결과
`employees` 테이블의 각 행과 `departments` 테이블의 각 행을 모두 조합하여 결과를 반환합니다.

### 예제 데이터
#### employees 테이블
| id  | name       | department_id |
|-----|------------|----------------|
| 1   | Alice      | 1              |
| 2   | Bob        | 2              |
| 3   | Charlie    | NULL           |
| 4   | David      | 1              |

#### departments 테이블
| id  | department_name |
|-----|-----------------|
| 1   | HR              |
| 2   | IT              |
| 3   | Marketing       |

### 각 JOIN의 결과

#### INNER JOIN 결과
```sql
SELECT employees.name, departments.department_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.id;
```
| name    | department_name |
|---------|-----------------|
| Alice   | HR              |
| Bob     | IT              |
| David   | HR              |

#### LEFT JOIN 결과
```sql
SELECT employees.name, departments.department_name
FROM employees
LEFT JOIN departments ON employees.department_id = departments.id;
```
| name    | department_name |
|---------|-----------------|
| Alice   | HR              |
| Bob     | IT              |
| Charlie | NULL            |
| David   | HR              |

#### RIGHT JOIN 결과
```sql
SELECT employees.name, departments.department_name
FROM employees
RIGHT JOIN departments ON employees.department_id = departments.id;
```
| name    | department_name |
|---------|-----------------|
| Alice   | HR              |
| Bob     | IT              |
| David   | HR              |
| NULL    | Marketing       |

#### FULL JOIN 결과
```sql
SELECT employees.name, departments.department_name
FROM employees
FULL JOIN departments ON employees.department_id = departments.id;
```
| name    | department_name |
|---------|-----------------|
| Alice   | HR              |
| Bob     | IT              |
| Charlie | NULL            |
| David   | HR              |
| NULL    | Marketing       |

#### CROSS JOIN 결과
```sql
SELECT employees.name, departments.department_name
FROM employees
CROSS JOIN departments;
```
| name    | department_name |
|---------|-----------------|
| Alice   | HR              |
| Alice   | IT              |
| Alice   | Marketing       |
| Bob     | HR              |
| Bob     | IT              |
| Bob     | Marketing       |
| Charlie | HR              |
| Charlie | IT              |
| Charlie | Marketing       |
| David   | HR              |
| David   | IT              |
| David   | Marketing       |

위의 예제와 같이 각 `JOIN`의 결과는 매우 다릅니다. 각 `JOIN`을 언제 어떻게 사용할지 이해하는 것은 데이터베이스 쿼리를 작성하는 데 매우 중요합니다. 