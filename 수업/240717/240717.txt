
interface ☆
- is~a 관계

-틀
1. 표준명세서의 역활
2. 상수와 추상메소드만 존재 
public static final는 생략가능 
abstract는 생략가능
3. interface를 implements 한 클래스(예약어)는 반드시 추상메소드를 Override(재구현)해주어야 한다.
4. Override(재구현) 할때 반드시 public를 붙여야 한다.
5. 다중상속이 가능
6. 상속과 같이 쓰일 때는 extends, implements 순서로 쓴다.
[형식]
interface 인터페이스명 {
..... 
}
class 클래스명 implements 인터페이스명{
... 
}
[EX] 맞는 문장을 모두 고르시오 
class A{}
interface InterA{}
1. class B extends A { }
2. class B implements InterA { }

3. class B implements A { }
4. class B extends InterA { }
5. interface InterB  extends A { }
6. interface InterB  implements InterA { }
7. interface InterB  implements A { }

8. interface InterB  extends InterA { }

*****
ArraryList ... Map ...


** interface
1. implements
=> 모든 추상 method 를 Override 해야함.

2. 대신 Override 해주는 class

3. method 제공

iterator
★

it.hasNext() : 현재 위치에 항목이 있으면 true ,
					없으면 false

it.next() : 현재 위치의 항목을 꺼내서 버퍼에 기억을 시키고
		, 다음 항목으로 이동한다.

***

Comparable / Comparator 인터페이스
: 객체를 정렬하는데 필요한 메소드가 정의되어 있다
: 비교대상자가 더 크면(<) -1, 같다면(==) 0, 작으면(>) 1을 반환시켜줍니다. 
: 이 값을 비교하여 정렬을 할 수 있다.

일반적인 int, char, double 같은 타입의 배열이라면 다음 함수들을 이용 
Collections(또는 Arrays).sort()       : 정렬 
Collectoins(또는 Arrays).reverse()    : 뒤집기

1. Comparable (java.lang)
- 기본 정렬기준을 구현하는데 사용
- 주로 Integer와 같은 warpper클래스와 String, Date, File과 같은 것 
- 기본적으로 오름차순으로 정렬되도록 구현되어 있다
- public int compareTo(T o) 
public final class Integer
extends Number
implements Comparable<Integer>


2. Comparator (java.util)
- 기본 정렬기준 외에 다른 기준으로 정렬하고자할 때 사용 
- public int compare(T o1, T o2)
public boolean equals(Object obj)
Collections.sort()
객체 정렬






































