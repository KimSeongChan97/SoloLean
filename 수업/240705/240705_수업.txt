변수 복습.

~
* 변수 - 변하는 값
- 데이터를 저장하는 곳

변수명
: 영문자, 숫자(0~9) , _ , $를 섞어서 사용 가능
: 첫 글자는 소문자로 기술한다.
: 단어가 바뀌면 첫 글자를 대문자로 사용

 [형식]
자료형 변수명

자료형의 종류
1. 기본형
★- 논리형 : boolean (1bit) - true, false
★- 문자형 : char  (2byte - 16bit)  0 ~ 65,535 :: 단일 문자 하나를 저장한다.
- 정수형 : byte (1byte - 8bit) -128 ~ +127
             short (2byte - 16bit) -32,768 ~ +32,767
기본       ★int     (4byte - 32bit)  .. :: 정수 값을 저장한다.
             long (8byte - 64bit) .. 

- 실수형 : float     (4byte)
기본        ★double  (8byte)


*패키지
- 자바의 기본 패키지 java.lang
Overload = mehod 이름이 같은 것

2. 객체형 (class)
- 모든 클래스는 new 생성해서 써야 한다.
 다만, static일 경우에는 new하지 않아도 된다.
String
Integer
Double

--

**진수

2진수 : 0 , 1 // 2(1/0), 3(1/1).... ( 2로 나눔 )

8진수 : 0 ~ 7 // 8(1/0), 9(1/1).. ( 8로 나눔 ) 

10진수 : 0 ~ 9 // 10( 1 / 0 )

16진수 : 0~15 // 16( 1 / 0 )
     * 10부터  a, b c d f (15) 까지 표기함.

234 => 10진수
234(8) -> java에서 : 0 2 3 4 라고 표기
234(16) -> java에서 : 0x 2 3 4 라고 표기

int  a=50;
a+3 = 변수 + 3 = 53
'a'+3= 문자상수(97) + 3 = 100
"a"+3= 문자열 = a3
0x a+3= 숫자 +3 = 10 + 3
~
int a;           정수형 변수
int b = 20;
double c;     실수형 변수
String d = "apple";    객체(클래스형 변수)

===========================================
연산자
1. 최우선 연산자
( )  ++  -- 
     1증 1감
2. 산술 연산자
+ - * /   %(나머지 -> 항(데이터)가 반드시 정수형이어야 한다.)
         25/3 => 25%3
3. 관계 연산자
> 크다
< 작다
>=
<=
==
!=
4. 논리연산자
- 조건이 2개 이상인 경우

① && (AND) - 모든 조건이 참일 때 참.
② || (OR) - 조건 중에서 1개라도 참이면 참.

③ & (AND) - 모든 조건이 참일 때 참.
④ | (OR) - 조건 중에서 1개라도 참이면 참.

5. 조건연산자 (삼항 연산자)
[형식]
조건 ?  참 : 거짓;
  항      항   항

6. 증감 연산자 ☆
++
--
7. 대입 연산자 ☆
+=
-=
*=
/=
%=

a=a+3 -> a += 3
a=a*2 -> a *= 2
a=a+1 -> a +=1 -> ++a , a++
a=a-1 ->  a -=1 -> --a , a--
                       [선행] [후행]

int b = a++;
1) int b=a; 22
2) a++; 23

int c = ++a - b--;
1) ++a = 24
2) a-b = 24-22 = 2
3) b--  = 21 

8. 부정(NOT) 연산자
!

true -> false
false -> true 변경

* bit 연산자 => 0 또는 1
1. ~ (bit NOT, 1의 보수)
0 -> 1  
1 -> 0

2. bit의 논리 연산자
① & (AND) - 모든 1일 때 1.
② | (OR) - 조건 중에서 1개라도 1이면 1.

            &      |    XOR     
0    0     0      0     0
0    1     0      1     1
1    0     0      1     1
1    1     1      1     0

3. bit 이동연산자 -> Shift 연산자
① << (값이 커짐)
② >> (값이 작아짐)



***** ☆★☆★ *****
조건문
1. if
2. switch

1. if
[형식]
① if (조건) 참; -> 조건을 참일 때만 본다. 다른건 안봄.
조건이 참이면 ; 기준으로 앞의 것을 본다.

if (조건) A; // 일때 조건이 참이라면 ,, 조건이 거짓이면
B;
참 : A -> B
거짓 : B

if(조건) A; B;
C;
참 : A -> B -> C
거짓 : B -> C

if(조건) {A; B;}
C;
참 : A -> B -> C
거짓 : C

if(조건) A;
else B;
C;
참 : A -> C
거짓 : B -> C

if(조건) {A; B;} // 문장이 여러개 이므로 { } 으로 묶어야함
else C;

if(조건)
      if(조건) A;  // 조건이 F 일때, C . <- ; 으로 문장 구분
      else B;
C;


② if (조건) 참;
   else 거짓; ->둘다 구분

③ 다중 if문
if (조건) 참;
else if (조건) 참;
else if (조건) 참;
else if (조건) 참;
else 거짓;

2. switch
- 실수형 변수를 사용할 수 없다
(조건이 아님)
[형식]
switch(정수,문자,식.. : 변수 또는 식) {
case 값1: break;
case 값2: break;
case 값3: break;
default:  < 그 외
}

double a=2.8;
switch(int(a)) < int 형변환//2

String.format("%.0f".a); //3
-------------------
**if문장
if(a==1)A;
else if(a==2)B;
else if(a==3)C;
else D;
E;
**switch문장
switch(a){
case 1: A;
case 2: B;
case 3: C;
default: D;
-------------------

Exception (예외처리)
- 컴파일 할때 : 예방이 필요
                ex) 자동차 보험

- 실행 할때 : 개발자의 잘못을 수정


메모리  < ㅡ    버퍼     <ㅡ  화면
  a               a 엔터         데이터입력 : a 엔터
  97      a 저장             
  b      엔터 값 13
 13

 97/98                               데이터입력 : ab 엔터

                버퍼 지우기
                flush (1글자씩) 

  *엔터
1. 맨 앞      \r
2. 다음 줄    \n























