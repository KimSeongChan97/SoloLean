Collection (java.util)
: 객체를 담아주는 저장 창고
: 객체 타입에 상관없이 저장 가능 
(전부 Object이므로 형변환이 필요->Generic)
: 크기 조절 가능
# Enumeration 
# Iterator

-> ArrayList(int> = X
-> ArrayList(Integer... 0
ArrayList는 Collection 인터페이스를 구현한 클래스 중 하나입니다. Collection은 객체를 저장하는 자료구조를 위한 인터페이스입니다. 따라서 ArrayList는 기본형 int를 직접 저장할 수 없고, 대신 Integer 객체를 저장해야 합니다.

자식 = (자식)부모 : downcast
-> 강제형변환 ( cast )

Object[] ob = {25, 43.8, "apple" }


*
public void sub(int a) { }
public int sub(String a, inb) { } 
public void sub(Object a) { } // 정수, 객체 다 가능

***
Generic
: 제네릭은 동적으로 타입을 결정하지 않고 컴파일 시 타입이 결정되므로 보다 안전한 프로그래밍이 가능 
하다
: 실행 중에 타입 충돌 문제를 방지할 수 있다
: 프로그램 개발 시 타입 캐스팅 절차가 필요 없어지고 ClassCastException을 방지 할 수 있다 
: 클래스 생성 시 타입을 명시해 준다.
: <T> <E> <K> <V> 4개의 문자로 표시한다. 
<T> Type (데이터형)
<E> Element (요소, 항목) 
<K> Key
<V> Value

제네릭(Generic)은 Java에서 타입을 매개변수로 사용할 수 있는 기능입니다. 제네릭을 사용하면 코드의 재사용성을 높이고, 컴파일 타임에 타입 안정성을 보장받을 수 있습니다. 제네릭은 컬렉션 클래스(ArrayList, HashMap 등)와 같은 자료구조에서 주로 사용되지만, 메서드나 클래스에서도 사용할 수 있습니다.

제네릭의 장점
타입 안정성(Type Safety): 컴파일 시 타입 검사를 하여 타입 오류를 방지합니다.
재사용성(Reusability): 여러 타입에 대해 동일한 코드를 사용할 수 있습니다.
가독성(Readability): 코드의 의도를 명확하게 나타낼 수 있습니다.

기본형          Wrapper Class 
--------------------------------
boolean       Boolean 
char             Character 
byte             Byte 
short           Short 
int               Integer 
long             Long 
float             Float 
double         Double

AutoBoxing  : 자동으로 박스처리(class형)
unAutoBoxing : wrapper -> 기본형 가는 것.

***
Interface !!
1. implements
모든 추상 method Override

2. 모든 추상 method 를 Override 해주는 class를 찾아야함.

3. 대신 처리해주는 method // DB에서 사용.
-> DriverManager.
: static Connection	getConnection(String url, String user, String password)
Attempts to establish a connection to the given database URL.
이 메서드는 주어진 데이터베이스 URL, 사용자 이름, 비밀번호를 사용하여 데이터베이스에 연결을 시도합니다. 성공적으로 연결되면 Connection 객체를 반환합니다. 이 객체를 통해 데이터베이스와의 상호작용이 가능합니다.

4. 익명 inner class -> 안드로이드 모바일.
(단점 : 모든 추상 method Override 가 필요함 )

*참고 : ArrayList 배열 처럼 저장 (수정힘듦) - 인덱스 재배열
	LinkedList 주소를 가지고 찾음.(수정용이) - 주소변경
	Stack : 컵의 구조 (in/out) - 함수 저장.
	」CPU가 명령어 처리할 때 Queue ( <-+-*/<- )
	먼저 들어간게 먼저 처리 FIFO
★☆	Treeset : 2+3*5 저장 "연산자 우선구조"

Map
<K> : 모델넘버
<V> : 값


**
예외처리
: 생각지도 않은 error가 발생하여 프로그램이 중도에 멈추는 것을 미리 예방하는 것

1. 예외처리의 최 상위 클래스는 Exception 이다
2. Exception이 여러 개 발생을 하면 한 번에 최 상위 클래스 Exception으로 처리하는 것이 편하다.
3. 자바가 제공하는 Override한 메소드에는 throws 사용해서는 안 된다.
4. 컴파일 Exception 
- RuntimeException 으로부터 상속을 받지 않기때문에 
반드시 Exception을 처리한다 => try~catch, throws

실행 Exception    
- RuntimeException 으로부터 상속을 받으며
Exception을 처리하지 말고 비즈니스 로직으로 처리한다.
 
※ 처리
1. try {
error가 발생할 가능성이 있는 영역 
} catch( ){
error가 발생하면 처리되는 부분 
}

2. try { 
}catch( ) { 
}catch( ) { 
} try{~} 사이 부분이 에러가 날 수 있음.을 catch(~){ } 에러내용

3. try {
} catch( ) { 
} finally {
error가 있건 없건 무조건 실행하는 부분 
}

4. throws - JVM에게 떠넘기는 것

5. throw  - 사용자가 직접 Exception을 작성하여 발생

====================================


IO Stream
입출력 처리 

입력 / 출력
Application < - IO Steam -> 파일/DB

ExceptionMain2 < -  BufferedReader br = new BufferedReader(new InputStreamReader(System.in))

BufferedReader
InputStreamReader(System.in)						
			
* 단위
1. byte 단위 처리 (숫자, 영문자) - byte 스트림  : byte 이기 때문에 느림.
InputStream 
OutputStream 
2. 문자(char-2byte) 단위 처리(숫자, 영문자, 한글) - 문자 스트림 
Reader 
Writer 

출력 시 파일 없으면 자동으로 파일 생성
입력 시 파일 없으면 Error (FileNotFoundException)

FileInputStream
FileOutputStream

**
BufferedOutputStream

DataOutputStream

PrintStream ★
(Overload 되어있어서 간단함) = System.out.print()

*-*-★★★★★★★★★★★★★★★★★★★
객체 직렬화
: 객체는 파일이나 네트워크로 전송이 안된다 
: 객체를 byte[] 변환시켜서 전송해야한다 
: Serializable






























