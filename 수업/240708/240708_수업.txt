진수에 관하여 복습

*2진수                       *16진수                        *10진수

*Weighted Code
- 자리값이 존재(진수 값의 자리)
2의
8 4 2 1
3 2 1 0
1 0 1 1
- 8421코드값이 대표적 
자바할 때는 2의 10승까지의 코드값을 아는게 좋음
1024/512/256/128/64/32/16/8/4/2/1
10     9    8    7   6   5  4  3 2 1 0

1Kb = 1024byte = 2의10 = 10의3
1Mb = 2의20 = 10의 6
1Gb = 2의 30 = 10의 9
1Tb = 2의 40 

1byte = 8bit = 1111 1111 = 255

16진수 => 2진수를 4개씩 묶는 것.
1 0 1 1 =>11(10) => 0xb(16)
(0~9,a,b,c,d,e,f)
(0~15)
0100 0001 => 65(10) => 0x41(16) => 'A'
  4        1   

1111 1011 =>251(10) =>0xfb(16)
8421  8421
  f       b

**음수
① 부호와 절대치

② ★ 2의 보수 = [ 1의 보수 + 1 ]
(1의보수 = 0 -> 1 / 1 -> 0 ) = 2개를 바꾸고 하여 더하면 1
 --> Java연산자는 ~ 이 된다.
"양수+
1음수-"
부호비트( 0 -> 양수 / 1 -> 음수 )
0000 0101 = +5(10)
0111 1111 = +127
1의보수
1111 1010 = ~5 (= -6 이므로 2진수는 +1 한다. )
1111 1011 = -5

0000 1111 = +15
1111 0000 = ~15
1111 0001 = -15

0001 0000 = +16
1110 1111 = ~16
         +1
 2=10 자리올림
1111 0000 = -16

--------------------------------------------------------------
basic_operator 신규 클래스

[반복문] for

기본구조
for (초기화; 조건; 증감) {
    // 반복할 코드
}

while (조건) {
    // 반복할 코드
}

do {
    // 반복할 코드
} while (조건);


초기화: 반복문이 시작될 때 한 번 실행됩니다. 반복 변수 초기화가 주로 이루어집니다.
조건: 각 반복 전에 평가됩니다. true이면 반복을 계속하고, false이면 반복을 종료합니다.
증감: 각 반복이 끝날 때마다 실행됩니다. 반복 변수를 증가시키거나 감소시키는 작업이 주로 이루어집니다.

for 반복문: 반복 횟수가 명확할 때 사용.
while 반복문: 반복 횟수가 명확하지 않을 때 사용.
do-while 반복문: 최소 한 번은 실행해야 할 때 사용.
향상된 for 반복문: 배열이나 컬렉션을 순회할 때 사용.
break와 continue: 반복문 내 흐름 제어

*반복문
- 조건이 참인 동안 반복한다. 
(조건이 거짓이면 중단한다.)
- 반복되는 문장이 1개일 경우에는 { }를 생략해도 된다.
(뉴비는 넣고..)


1. for (반복횟수가 정확할 때)
2. while
3. do ~ while
1. ~
[형식]
for(변수값=초기값; 조건; 증감값) {
     참 일때
}
~
=> 거짓

2. while
~

while(조건) {                  do{
	참 일때
}                                   }while(조건);
=> 거짓                          => 거짓
~

****다중for문
- for 문 안에 또 다른 for 문이 존재하는 것
- for 문에 사용되는 변수 명은 서로 달라야 한다.
- 겹쳐서도 안된다.
for (i ~ ) {
    for (j ~ ) {
   }
}


** break / continue

1. break 
- 반드시 반복문(for, while, do~while), switch를 벗어날 때 사용
- break가 속해있는 반복문 1개만 벗어난다.
- 만약에 여러개의 반복문을 벗어나고 싶을 때는 라벨을 사용한다.
( * 라벨은 대문자로 
LOOP: while(true) {
          for ( ~ ) {
            break LOOP;
             }
           -> for 외
                       } -> while

2. continue
- 반복문(for, while, do~while)의 끝으로 ( } ) 무조건 이동
- 자신이 소속된 끝으로 ( } ) 무조건 이동
- 만약에 2개 이상 반복문 끝으로 이동할려면 라벨을 사용한다.
continue; -> 컨티뉴 부터~ 아래의 문장을 무시(처리X)하는것.


for ( ~ ) { 
	if ( ~ ) continue ;
	}
















































