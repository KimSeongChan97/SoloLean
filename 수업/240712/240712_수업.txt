12일

기초 함수
int: 정수
double: 실수
char: 문자
boolean: 참 또는 거짓
String: 문자열 (참고로, String은 객체)
-

class 를 생성하면(new 하면) 무조건 생성자 메소드가 호출된다. ☆★
-----------------------------------------------------
생성자 (Constructor) 메소드
: 객체 초기화 ( 쓰레기 값 초기화 )
1. 생성자명은 반드시 클래스명과 동일하다.
2. 자동호출 - 클래스를 메모리에 생성 시(new 할때)
(강제호출X , new 필요 )
3. returnType(결과형)이 없다.
: return 형 메소드(인수형 인수, ~ )
int sub(int a)
void sub(char a) :: XXX...
->> 생성자는 메소드 앞에 아무것도 쓰지 않는다. (void도 자료형 ) -->> 3. 의 의미.

4. 클래스 안에 생성자가 하나도 없을 시에는 자동으로 기본(default) 생성자 호출 
기본 생성자 - 인수가 없는 메소드

# 생성자 Overload
this
1. 생략가능
2. 자기 자신 클래스의 정보(reference-참조값)를 갖고 있다.
this()
1. Overload 된 다른 생성자를 호출할 때
2. 생성자에서 반드시 첫줄에 써야 한다.


varargs (Variable Argument)
: JDK 5.0에서 추가
: 통일된 인수의 자료형에 인수(매개변수)의 개수를 자유롭게 구현 
: 내부적으로 배열화 작업으로 처리해 준다.
-----------------------------------------------------
**
메소드()
① 명령어들의 집합
② 기본적으로 public static void main(String[] ) 제공
③ 인수는 반드시 따로 따로 선언한다.
★④ 호출한 메소드는 반드시 호출한 곳으로 되돌아온다.
⑤ return(결과값, 반환값)은 반드시 1개뿐이다.
⑥ return이 없으면 void로 선언한다.
[형식]
1. 구현 함수
returnType 메소드명(인수형 인수, 인수형 인수,...) {
	메소드 body
}

2. 호출 함수
객체명.메소드명(값1, 값2,...)
클래스명.메소드명(값1, 값2,...) → 메소드가 static 일 경우

기본형          Wrapper Class 
--------------------------------
boolean       Boolean 
char             Character 
byte             Byte 
short           Short 
int               Integer 
long             Long 
float             Float 
double         Double
AutoBoxing 
unAutoBoxing

==================================


***********★★★★★★★★★
String
1. 문자열
2. literal("") 생성 가능
3. 문자열 편집(수정)을 할 수 없다. ★
4. 비교시 == 사용하면 reference(참조값)을 비교 한다 
equals() 사용하면 문자열의 내용을 비교한다.

※ 문자열 자체가 reference(참조값) 이다.
※ 똑같은 내용의 문자열 리터럴은 메모리에 1번만 생성된다. 
new는 할 때마다 메모리에 생성 된다

StringBuffer / StringBuilder ★
1. 문자열
2. 문자열 편집이 가능
3. append(), delete() 존재 ( String class 에 없음 )


StringTokenizer(java.util)클래스와
 String클래스의 split()
1. 문자열을 분리할 때 사용
2. 분리된 문자열을 Token이라고 한다.
3. StringTokenizer는 비어있는 값은 무시하고 split()는 비어있는 값도 인식한다.

public String[] split(String regex)
public String[] split(String regex, int limit)


static - 클래스변수
1. 메모리 static 영역에 1번만 생성된다. → 초기화 1번만 수행 
모든 객체가 공유한다. (공유변수)
2. static 메소드에서는 static 변수만 사용 가능 
static 메소드에서는 this를 참조할 수 없다
3. static변수나 메소드는 호출시 클래스명으로 직접 호출 할 수 있다. 
객체로도 호출이 가능하다
4. static{ } - 초기화 영역
- 생성자보다도 먼저 수행한다.

import static
: 간단하게 static 상수 또는 메소드를 호출할 때 사용

******************************************************

* literal("")
- 정수형 literal : -25, 48, -100 ...
- 실수형 literal : 43.8, 12.6 ...
[ 상수(Constant) 와 다름. ]
- 문자형 literal : ' 문자 '
- 문자열 literal : " 문자열 "


로그인-> 클래스를 new 하는게 아니라 1개만. =>"싱글톤"
  ----> static 으로 고정값 만듦.




























