<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Thymeleaf 에 대해 아라보자</title>
</head>
<body>
   <h1>Hello Thymeleaf</h1>
   <p><a href="hithymeleaf">hithymeleaf.html</a></p>

</body>
</html>

<!--/*-->
<!-- * HTML -->
<!--/* Thymeleaf 1 줄 주석 */-->
<!--*/-->

<!-- 

Thymeleaf
     
1. Thymeleaf 란?
Thymeleaf는 주로 서버 측 자바 웹 애플리케이션 개발에서 사용되는 템플릿 엔진이다.
즉, HTML을 생성하는 데 사용된다.
하지만 Thymeleaf는 서버 측에서만 사용되는 것은 아니며, 이메일 템플릿, PDF 생성, XML 처리 등 다양한 용도로도 활용될 수 있다.
     
2. 특징
 서버 사이드 HTML 렌더링(SSR)
타임리프는 백엔드 서버에서 HTML을 동적으로 렌더링하는 용도로 사용된다. 
     
 네츄럴 템플릿
타임리프는 순수한 HTML을 최대한 유지하려는 특징이 있다. 
이게 JSP와의 큰 차이점으로 타임리프로 작성한 파일은 확장자도 .HTML이고 웹 브라우저에서 직접 파일을 열어도 내용을 확인할 수 있다. 
서버를 통해 뷰 템플릿을 거치면 동적으로 변경된 결과를 확인할 수도 있다.
이렇게 순수 HTML을 그대로 유지하면서 뷰 템플릿도 사용할 수 있는 타임리프의 특징을 네츄럴 템플릿 (natural templates)이라고 한다.
     
 스프링 통합 지원
타임리프는 스프링과 자연스럽게 통합되어 스프링의 다양한 기능을 쉽게 사용할 수 있다. 
     
3. 사용법
타임리프는 문서 최상단에 다음과 같은 코드를 넣어서 사용할 수 있다. 
http://www.thymeleaf.org">
     
타임리프는 주로 HTML 태그에 th:* 속성을 지정하는 방식으로 동작한다.
th:* 로 속성을 적용하면 기존 HTML 속성을 대체하고, 기존 속성이 없으면 새로 만든다.

 --> 


<!-- 
		
		<p th:text="${message}"> 타임리프를 통한 데이터 표시 </p>
		th:text="${message} : 타임리프의 텍스트 바인딩 기능을 사용하여 서버에서 전달된 message 변수를 출력합니다.
        - ${message} : 타임리프에서 사용하는 표현식으로, model에 담긴 message 데이터를 이 위치에 표시합니다.
        - 타임리프의 템플릿 엔진이 동작하면서 ${message}가 실제 값으로 변환되어 브라우저에 렌더링됩니다.
        - 이 요소가 렌더링될 때, 태그 내부의 텍스트인 "타임리프를 통한 데이터 표시"는 message 값으로 대체됩니다.
        // 추가 설명: th:text 속성은 타임리프의 주요 기능 중 하나로, 서버 측에서 전달된 데이터를 HTML 텍스트로 쉽게 표현할 수 있게 합니다.
        // 타임리프에서 사용하는 ${}는 스프링 모델에 담긴 데이터를 뷰에 표시할 때 사용하며, 서버가 ${message}를 해석하여 렌더링 시 텍스트로 바꿔줍니다.
        
        <a th:href="@{/user/profile/{id}(id=${userId})}">Profile</a>
        th:text="'Hello, ' + ${name} + '!'" : 타임리프의 표현식을 사용하여 문자열과 변수를 결합하여 출력합니다.
        - 'Hello, ' : 출력될 문자열의 시작 부분입니다. 문자열은 작은 따옴표로 감싸줍니다.
        - ${name} : 타임리프에서 사용하는 표현식으로, model에 담긴 name 데이터를 이 위치에 삽입합니다.
        - + '!' : 마지막으로 느낌표를 추가합니다. + 연산자를 사용하여 문자열을 이어 붙일 수 있습니다.
        - 이 구문은 최종적으로 'Hello, [name 값]!' 형태로 렌더링됩니다. 예를 들어, name이 "John"이라면 "Hello, John!"이 출력됩니다.
        // 추가 설명: 위의 th:text 표현식은 HTML에서 스크립트 없이 서버의 데이터를 동적으로 문자열과 결합해 표시할 수 있도록 돕습니다.
        // th:text와 함께 문자열 연산이 가능하므로, 쉽게 동적인 문장을 생성하여 사용자에게 출력할 수 있습니다.
        
        th:href="@{/user/profile/{id}(id=${userId})}" : 타임리프의 URL 경로 바인딩 기능을 사용하여 링크를 동적으로 생성합니다.
        - @{} : 타임리프에서 URL을 정의하는 구문입니다. Spring의 URL 경로와 함께 사용됩니다.
        - /user/profile/{id} : 사용자 프로필 페이지로 연결되는 경로입니다. {id}는 변수로, 실제 값은 뒤에 지정됩니다.
        - (id=${userId}) : 경로의 {id} 부분을 실제 값으로 대체합니다. ${userId}는 서버에서 전달된 userId 변수 값입니다.
        - 예를 들어, userId가 123이라면 최종 링크는 "/user/profile/123"으로 생성되어 프로필 페이지로 연결됩니다.
        - 이 링크는 동적으로 생성되어, 각 사용자의 ID에 따라 해당 사용자의 프로필 페이지로 연결됩니다.        
        // 추가 설명: th:href는 일반 HTML href 속성과는 다르게, 서버 데이터를 활용해 동적 링크를 생성하는 데 최적화되어 있습니다.
        // @{}를 사용하여 서버 경로와 데이터를 조합한 URL을 제공하고, Spring이 각 사용자 ID에 맞게 URL을 바꿔줘서 사용자 경험을 개인화할 수 있습니다.
 -->
