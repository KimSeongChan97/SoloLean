<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"> <!-- HTML5 문서 선언과 Thymeleaf XML 네임스페이스 선언 -->
<head>
<meta charset="UTF-8"> <!-- 문서의 문자 인코딩을 UTF-8로 설정하여 한글 등의 다국어 문자 표현 -->
<title>operation</title> <!-- 페이지 제목 설정 -->
</head>
<body>
<ul>
    <li> 산술 연살자  <!-- 산술 연산자: 덧셈, 나머지 등을 예시로 연산 결과를 보여주는 섹션 -->
        <ul>
            <li> 25 + 36 = <span th:text="25 + 36"></span></li>
            <!-- 25와 36을 더하는 연산을 수행하고, 결과를 <span> 요소에 렌더링.
                 "th:text" 속성은 지정된 식의 결과를 HTML로 렌더링해 화면에 표시. -->
            <li> 25 % 2 =  <span th:text="25 % 2"></span></li>
            <!-- 25를 2로 나눈 나머지 값을 계산하여 <span>에 표시. 25 % 2 연산 결과는 1로, 홀수임을 보여줌.
                 산술 연산자는 기본적인 수학 연산(+, -, *, /, %)을 표현할 때 사용. -->
            <li> 25 % 2 == 0 =  <span th:text="25 % 2 == 0"></span></li>
            <!-- 25 % 2의 결과가 0과 같은지 비교. 결과는 false(거짓)이며, 25는 홀수이므로 참이 아님. 
                 "==" 연산자는 비교 연산자 중 하나로, 두 값이 같은지를 검사함. -->
            <!--  == 은 같은 값이 false 인지 true 인지 -->            
        </ul>
        <ul>
            <li> 25 + 36 = [[${25 + 36}]]</li>
            <!-- EL 표현식을 사용해 25와 36을 더한 결과를 직접 텍스트로 렌더링.
                 "[]" 표기법을 사용해 Thymeleaf의 텍스트 리터럴을 추가하고, EL 표현식 내 계산 결과를 출력. -->
            <li> 25 % 2 == 0 = [[${ 25 % 2 }]]</li>
            <!-- EL 표현식을 사용해 25를 2로 나눈 나머지를 표시.
                 같은 연산 결과를 EL 리터럴로 표현할 수 있음. -->
            <li> 25 % 2 == 0 = [[${ 25 % 2 == 0 }]]</li>
            <!-- EL 표현식을 사용해 25 % 2 == 0의 결과를 텍스트로 표시.
                 결과는 false로 표시될 예정이며, 해당 값을 HTML로 직접 표시. -->
        </ul>
    </li>
    <br />
    <li> 비교 연산자  <!-- 비교 연산자 예시: 두 값을 비교하는 표현식 예제 -->
        <ul>
            <li> 1 > 10 = <span th:text="1 &gt; 10"></span></li>
            <!-- 1과 10을 비교해 1이 더 큰지를 검사. 결과는 false.
                 &gt;는 HTML에서 ">" 문자를 표현하는 방법으로, HTML에서 특수 문자는 &로 시작하는 코드로 변환 필요. -->
            <li> 1 gt 10 = <span th:text="1 gt 10"></span></li>
            <!-- Thymeleaf에서 "gt"는 ">"와 동일한 비교 연산자.
                 Thymeleaf는 gt, lt 같은 단어형 비교 연산자를 제공하며, 이를 통해 HTML 특수 문자 문제를 해결 가능. -->
            <li> 1 >= 10 = <span th:text="1 >= 10"></span></li>
            <!-- 1과 10을 비교하여 1이 10보다 크거나 같은지 검사하는 표현식. 결과는 false로, HTML에서 ">="는 그대로 사용 가능. -->
            <li> 1 ge 10 = <span th:text="1 ge 10"></span></li>
            <!-- Thymeleaf에서는 "ge"를 ">="와 같은 역할로 사용 가능.
                 특정 특수 문자 사용 없이 비교를 수행하기 위한 방식. -->
            <li> 1 == 10 = <span th:text="1 == 10"></span></li>
            <!-- 1이 10과 같은지를 검사하는 표현식. 결과는 false.
                 "==" 연산자는 두 값이 같은지 확인하는 비교 연산자. -->
            <li> 1 != 10 = <span th:text="1 != 10"></span></li>
            <!-- 1이 10과 다른지를 검사하는 표현식. 결과는 true. 
                 "!=" 연산자는 두 값이 다른지를 검사함. -->
        </ul>
    </li>
    <br />    
    <li> 
        조건식 <!-- 조건식을 사용해 특정 조건을 기반으로 값을 선택하는 예시 -->
        <ul>
            <li> (10 % 2) 해당 조건이 참이면 짝수 거짓이면 홀수 </li>
            <!-- 10을 2로 나누었을 때 나머지가 0이면 짝수, 그렇지 않으면 홀수임을 설명하는 논리.
                 조건에 따라 다른 값을 선택할 수 있도록 조건식 설명. -->
            <li> (10 % 2 == 0) ? '짝수' : '홀수' = <span th:text="(10 % 2 == 0) ? '짝수' : '홀수'"></span> </li>
            <!-- 삼항 연산자를 사용해 10 % 2 == 0의 결과에 따라 '짝수' 또는 '홀수'를 선택해 표시.
                 삼항 연산자는 (조건) ? 참일 때 값 : 거짓일 때 값 형식으로 결과에 따라 다르게 렌더링. -->
        </ul>
    </li>
    <br />    
    <li>
        Elvis(?:) 연산자 = React 의 || 연산자 와 같은 의미 ( 현재 조건이 거짓이라면 ... ), <!-- Elvis 연산자는 값이 null 또는 빈 값일 때 대체할 값을 지정 -->
        -> null 또는 빈 값을 .. 일 때 사용
        <ul>
            <li>${data}?: '데이터가 없습니다.' = <span th:text="${data}?: '데이터가 없습니다.'"></span></li>
            <!-- data 변수가 null이거나 빈 값이라면 '데이터가 없습니다.'를 출력.
                 Elvis 연산자는 주어진 값이 없거나 null일 때 대체할 값을 정의하는 방식. -->
            <li>${nullData}?: '데이터가 없습니다.' = <span th:text="${nullData}?: '데이터가 없습니다.'"></span></li>
            <!-- nullData 변수가 null이거나 빈 값일 때 '데이터가 없습니다.'를 출력.
                 데이터가 존재하지 않는 경우 기본 메시지를 표시할 수 있음. -->
            <li>${bb}?: '데이터가 없습니다.' = <span th:text="${bb}?: '데이터가 없습니다.'"></span></li>
            <!-- bb 변수가 비어 있을 때 '데이터가 없습니다.'라는 기본 메시지 출력.
                 연산자의 오른쪽 값은 null이거나 빈 값일 때 표시될 대체 텍스트임. -->
        </ul>
    </li>    
    <br />    
    <li>
        No-operation <!-- No-operation 연산자는 특정 상황에서 아무 작업도 하지 않음을 의미 -->
        <ul>
            <li>${data}?: _ = <span th:text="${data}?: _"> 데이터가 없습니다 . </span></li>
            <!-- data 변수가 null이거나 빈 값일 경우 아무 작업도 수행하지 않음.
                 "_"를 사용하여 No-operation을 지정해 데이터가 없을 때 기본 텍스트를 유지할 수 있음. -->
            <li>${nullData}?: _ = <span th:text="${nullData}?: _"> 데이터가 없습니다 . </span></li>
            <!-- nullData 변수가 비었을 때도 No-operation을 지정해 화면에 표시되는 기본 텍스트 유지.
                 No-operation은 데이터를 대체하지 않고 기본 텍스트를 그대로 보여주는 역할. -->
        </ul>
    </li>
    
</ul>
</body>
</html>
