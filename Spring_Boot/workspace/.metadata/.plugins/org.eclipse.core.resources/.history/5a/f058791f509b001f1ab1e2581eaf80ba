<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"> <!-- HTML5 문서 선언과 Thymeleaf XML 네임스페이스 선언 -->
<head>
<meta charset="UTF-8"> <!-- 문서의 문자 인코딩을 UTF-8로 설정하여 한글 등의 다국어 문자 표현 -->
<title>variable</title> <!-- 페이지 제목 설정 -->
</head>
<body>
<h1> Spring EL 표현식 </h1> <!-- 페이지 주요 제목: Spring EL(Expression Language) 표현식을 사용한 예제 -->

    <h3>Object</h3> <!-- 객체 접근 방식 예제 섹션 제목 -->
    <ul>
        <li> ${aa.name} = <span th:text="${aa.name}"></span></li> 
        <!-- EL을 사용해 aa 객체의 name 필드를 출력. 여기서는 "aa" 객체의 name 속성을 직접 접근해 값을 가져옴. 
             th:text 속성으로 화면에 값을 렌더링하며, 주어진 표현식을 통해 aa.name 속성을 찾아 보여줌. -->
        <li> ${aa['name']} = <span th:text="${aa['name']}"></span></li>
        <!-- EL 문법을 통해 "[]"로 aa 객체의 name 속성 접근. 마치 map처럼 속성명을 문자열로 접근 가능. 
             이 표현은 객체 속성을 문자열 형태로 지정하여 접근할 수 있는 방법을 보여줌. -->
        <li> ${aa.getName()} = <span th:text="${aa.getName()}"></span></li>
        <!-- EL을 사용해 aa 객체의 getName() 메서드를 호출해 name 필드를 출력. 
             객체의 메서드를 직접 호출하여 값을 가져올 수도 있음. Spring EL은 일반적인 Java 메서드 호출을 지원 -->
    </ul>

    <h3>List</h3> <!-- 리스트 접근 방식 예제 섹션 제목 -->
    <ul>
        <li>${list[1].name} = <span th:text="${list[1].name}"></span></li>
        <!-- list 객체의 두 번째 요소(인덱스 1)의 name 속성에 접근하여 값을 출력. 
             이 표현식은 list에서 특정 인덱스의 객체를 선택해 해당 객체의 속성을 표시. -->
        <li>${list[1]['name']} = <span th:text="${list[1]['name']}"></span></li>
        <!-- list 객체에서 인덱스 1에 있는 요소의 name 속성을 배열 접근 문법을 사용해 출력.
             객체의 속성을 문자열로 접근하는 방식으로, name 속성명에 문자열로 접근 가능. -->
        <li>${list[1].getName()} = <span th:text="${list[1].getName()}"></span></li>
        <!-- list의 인덱스 1에 있는 객체의 getName() 메서드를 호출하여 name 속성을 가져옴.
             이 방법은 list에 담긴 객체가 getter 메서드를 가질 때 유용하게 사용할 수 있음. -->
    </ul>

    <h3>Map</h3> <!-- 맵 접근 방식 예제 섹션 제목 -->
    <ul>
        <li>${map['cc'].name} = <span th:text="${map['cc'].name}"></span></li>
        <!-- map 객체에서 키가 'cc'인 요소의 name 속성에 접근. map에서는 키를 통해 값을 가져오고, 그 값을 기반으로 속성에 접근. 
             이 표현은 map에 저장된 객체의 특정 속성을 출력할 때 사용 가능. -->
        <li>${map['cc']['name']} = <span th:text="${map['cc']['name']}"></span></li>
        <!-- map에서 키가 'cc'인 요소의 name 속성에 접근. 
             두 번의 '[]'로 속성에 접근하는 방식은 객체가 map 구조로 되어 있을 때 유용. -->
        <li>${map['cc'].getName()} = <span th:text="${map['cc'].getName()}"></span></li>
        <!-- map에서 키가 'cc'인 요소의 getName() 메서드를 호출. 
             객체가 getter 메서드를 가지고 있다면 EL에서 메서드를 호출하여 원하는 데이터를 가져올 수 있음. -->
    </ul>
    
<!-- 
    <ul th:with="변수 = ${list[0]}"></ulk
    지역 변수를 정의하기 위해 th:with 속성을 사용하여 표현식의 값을 변수로 설정. -->
    
    <h3> 지역변수 => (th:with) </h3> <!-- th:with을 사용한 지역 변수 설정을 설명하는 섹션 제목 -->
    <ul th:with="first = ${list[0]}"> <!-- th:with를 사용해 list의 첫 번째 요소를 지역 변수 first로 설정 -->
        <li> 이름 = th:text="${first.name}" : <span th:text="${first.name}"></span> </li>
        <!-- 지역 변수 first의 name 속성에 접근해 값을 출력. 
             이 코드는 list의 첫 번째 요소인 객체의 name 속성을 first 변수로 접근하여 보여줌. -->
        <li> 나이 = th:text="${first.age}" : <span th:text="${first.age}"></span> </li>
        <!-- 지역 변수 first의 age 속성에 접근해 값을 출력.
             list의 첫 번째 요소 객체의 age 속성을 first 변수로 접근해 화면에 표시. -->
    </ul>
    <ul th:with="second = ${list[1]}"> <!-- th:with를 사용해 list의 두 번째 요소를 지역 변수 second로 설정 -->
        <li> 이름 = th:text="${second.name}" : <span th:text="${second.name}"></span> </li>
        <!-- 지역 변수 second의 name 속성에 접근해 값을 출력. 
             list의 두 번째 요소 객체의 name 속성을 second 변수로 접근해 화면에 표시. -->
        <li> 나이 = th:text="${second.age}" : <span th:text="${second.age}"></span> </li>
        <!-- 지역 변수 second의 age 속성에 접근해 값을 출력.
             list의 두 번째 요소 객체의 age 속성을 second 변수로 접근하여 화면에 표시. -->
    </ul>
</body>
</html>
