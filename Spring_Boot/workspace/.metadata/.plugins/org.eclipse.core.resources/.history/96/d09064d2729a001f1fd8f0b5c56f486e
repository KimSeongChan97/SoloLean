package com.example.demo; // 패키지 선언. 이 클래스가 'com.example.demo' 패키지에 속해 있음을 나타냅니다.

import org.springframework.boot.SpringApplication; // Spring Boot 애플리케이션을 시작하고 관리하는 클래스
import org.springframework.boot.autoconfigure.SpringBootApplication; // 스프링 부트 자동 설정을 활성화하는 어노테이션

/**
 * @SpringBootApplication
 * - 스프링 부트 애플리케이션의 시작 클래스를 지정하기 위해 사용됩니다.
 * - 이 어노테이션은 여러 어노테이션의 기능을 포함하고 있습니다:
 *   1. @Configuration: 이 클래스가 스프링 설정 클래스(Bean 설정 파일)로 사용됨을 나타냅니다.
 *   2. @EnableAutoConfiguration: 스프링 부트가 클래스패스에서 필요한 설정을 자동으로 로드합니다.
 *      예를 들어, 'spring-boot-starter-web'이 포함되어 있으면, 내장 톰캣 서버와 스프링 MVC 설정이 자동으로 완료됩니다.
 *   3. @ComponentScan: 현재 패키지(com.example.demo)와 하위 패키지에 있는 @Component, @Service, @Repository 등이 
 *   붙은 클래스들을 스프링 빈으로 자동 등록합니다.
 */
@SpringBootApplication
public class Chapter01HelloGradleApplication { // 'Chapter01HelloGradleApplication'이라는 클래스 선언부

    /**
     * main 메서드: 자바 애플리케이션의 진입점(Entry Point)입니다.
     * - 모든 자바 애플리케이션은 main 메서드에서 실행을 시작합니다.
     * - 스프링 부트에서는 main 메서드를 통해 애플리케이션이 시작되며, 이 메서드를 통해 내장 서버(톰캣 등)를 실행하고 스프링 애플리케이션을 초기화합니다.
     * - 이 메서드에서 SpringApplication.run()을 호출하여 스프링 부트 애플리케이션을 실행합니다.
     *
     * @param args: 커맨드 라인에서 전달된 인자를 배열 형태로 받습니다.
     */
    public static void main(String[] args) {
        SpringApplication.run(Chapter01HelloGradleApplication.class, args); // 스프링 부트 애플리케이션을 실행하는 메서드입니다.

        // SpringApplication.run() 메서드의 역할:
        // 1. 스프링 애플리케이션 컨텍스트를 초기화하고 필요한 빈을 생성 및 설정합니다.
        // 2. 웹 애플리케이션의 경우 내장된 톰캣 서버를 구동하여 별도의 서버 설정 없이 애플리케이션을 실행할 수 있도록 합니다.
        // 3. main 메서드의 인자(args)를 애플리케이션에 전달하여 커맨드 라인에서 전달된 파라미터가 애플리케이션에서 사용될 수 있게 합니다.

        System.out.println(" Hello Spring Boot ( Gradle )"); 
        // "Hello Spring Boot ( Gradle )" 메시지를 콘솔에 출력합니다.
        // 이 명령은 스프링 부트 애플리케이션이 정상적으로 실행되었을 때 콘솔에 간단한 메시지를 출력하는 용도로 사용됩니다.
        // Gradle을 통해 빌드 및 실행한 경우임을 나타내기 위해 "( Gradle )"이라고 명시되어 있습니다.
    }

}
