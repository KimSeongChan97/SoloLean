package exam.app;

import java.util.List;

import exam.entity.Emp;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;

public class HelloJPA04 {
		
	public static void main(String[] args) throws Exception {
        
        EntityManagerFactory factory = Persistence.createEntityManagerFactory("entitytest");
        EntityManager manager = factory.createEntityManager();
        
        // Fetch Join을 사용한 JPQL 쿼리문 생성
        // fetchJoinJpql 문자열에 JPQL 쿼리를 정의합니다. 이 쿼리는 Emp 엔티티와 관련된 부서(deptno) 엔티티,
        // 그리고 부서의 지역 코드(loc_code)를 함께 로드하는 Fetch Join을 사용합니다.
        // "select distinct t"는 중복된 Emp 엔티티가 반환되지 않도록 distinct 키워드를 사용합니다.
        // "left join fetch"는 Emp 엔티티에 대해 deptno 및 loc_code 연관 데이터를 한 번에 가져오는 방식입니다.
        String fetchJoinJpql = "select distinct t " +
                               "from Emp t left join fetch t.deptno " + 
                               "left join fetch t.deptno.loc_code";
        
        // JPQL을 통해 생성한 fetchJoinJpql 쿼리를 실행하기 위해 Query 객체 생성
        // manager.createQuery(fetchJoinJpql, Emp.class)를 통해 JPQL 쿼리를 실행할 Query 객체를 생성합니다.
        // Query 객체를 통해 JPQL 쿼리를 데이터베이스에 전달합니다.
        Query query = manager.createQuery(fetchJoinJpql, Emp.class); // JPQL, Emp 은 Entity Class 이다.
        
        // getResultList() 메서드를 통해 쿼리 실행 결과를 List 타입으로 반환받습니다.
        // Emp 엔티티 리스트가 반환되며, 여기에는 Emp 엔티티와 관련된 deptno 및 loc_code 정보가 포함됩니다.
        List<Emp> list = query.getResultList();       
        System.out.println(); 
        
        // 조회된 Emp 엔티티 리스트를 반복하며 각 엔티티의 정보 출력
        // for-each문을 사용하여 리스트에 포함된 각 Emp 객체의 정보를 출력합니다.
        for(Emp emp : list) {
            // 각 emp 객체의 toString() 메서드 호출을 통해 객체 정보를 콘솔에 출력합니다.
            System.out.println(emp);
            Thread.sleep(100);
        } // for

        System.out.println("데이터 총 갯수 = " + list.size());

        manager.close();
        factory.close();
    }

}



/*

fetch join
- 연관된 엔티티들을 한번의 쿼리로 모두 처리한다.
- 여러개의 연관된 엔티티들을 조인하여 한번의 쿼리로 모든 데이터들을 가져온다.



 */
