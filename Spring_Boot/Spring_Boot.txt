Spring_Boot
-*----------------**--------------------------------------------
 스프링 프레임워크와 스프링 부트의 차이
**스프링 프레임워크(Spring Framework)**는 엔터프라이즈 애플리케이션 개발을 위한 다양한 기능을 제공하는 프레임워크입니다. 주요 모듈로는 스프링 MVC, 스프링 데이터, 스프링 시큐리티 등이 있습니다.

**스프링 부트(Spring Boot)**는 스프링 프레임워크를 더 쉽게 사용할 수 있도록 도와주는 초기 설정과 빠른 개발 환경을 제공합니다. 복잡한 XML 설정 파일 없이 애플리케이션을 빠르게 시작할 수 있고, 내장 톰캣 서버 덕분에 바로 실행할 수 있는 장점이 있습니다.
*******
스프링 부트 프로젝트의 구조
- src/main/java          # 자바 소스 코드 디렉토리
  └ com.example.demo     # 패키지 (일반적으로 도메인 기반)
    └ DemoApplication.java # 메인 애플리케이션 클래스 
			-> @SpringBootApplication 을 통해 애플리케이션의 진입점
- src/main/resources     # 리소스 파일 (설정, 정적 파일, 템플릿 등)
  └ application.properties # 설정 파일 -> DB 정보, 서버 포트, 로깅 수준 등을 설정
- src/test/java          # 테스트 코드 디렉토리
*****
주요 어노테이션

@SpringBootApplication: 메인 클래스에 사용하는 어노테이션으로,
 스프링 부트를 설정하고 시작하는 역할을 합니다.
@RestController: RESTful 웹 서비스의 컨트롤러로 사용되는 클래스에 붙입니다.
@GetMapping, @PostMapping 등: HTTP 요청을 특정 메서드와 매핑할 때 사용됩니다.
@Service: 서비스 레이어(비즈니스 로직)를 나타내는 클래스에 붙이는 어노테이션입니다.
@Repository: 데이터베이스와의 상호작용을 담당하는 클래스에 붙입니다.
 예를 들어, JPA를 사용할 때 데이터베이스 CRUD 기능을 제공하는 레포지토리로 설정합니다.
@Entity: JPA에서 데이터베이스 테이블과 매핑할 클래스를 지정할 때 사용합니다.
*******
Spring Boot DevTools
 DevTools를 제공하여 애플리케이션을 개발할 때 변경 사항을 자동으로 반영
spring-boot-devtools를 추가하면 코드 수정 시 애플리케이션이 자동으로 재시작

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-devtools</artifactId>
    <optional>true</optional>
</dependency>

*****
Spring Boot Actuator
Actuator는 애플리케이션의 상태를 모니터링하고 관리할 수 있는 기능을 제공합니다.
주로 애플리케이션의 상태(Health), 환경(Environment), 메트릭스(Metrics) 등을 확인할 수 있습니다.
사용 예: application.properties에서 management.endpoints.web.exposure.include=health,info를 추가하여 /actuator/health와 /actuator/info 엔드포인트를 활성화할 수 있습니다.
*****

Spring Data JPA
JPA (Java Persistence API)
자바 객체와 데이터베이스 간의 매핑을 제공하는 API입니다. 
스프링 부트에서 Spring Data JPA를 사용하면 복잡한 SQL 없이도 쉽게 데이터베이스 연동을 할 수 있습니다.

기본적으로 @Entity, @Id 등을 사용하여 객체와 테이블을 매핑하고, JpaRepository 인터페이스를 통해 기본적인 CRUD 기능을 제공합니다

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>

*****
application.properties 설정파일
server.port=8081                       # 서버 포트 변경
spring.datasource.url=jdbc:mysql://localhost:3306/mydb  # 데이터베이스 URL
spring.datasource.username=root
spring.datasource.password=password
logging.level.org.springframework=DEBUG  # 로그 레벨 설정
*****
Test 구성
스프링 부트는 Spring Boot Test 모듈을 통해 통합 테스트와 단위 테스트를 쉽게 할 수 있도록 지원합니다.
주요 어노테이션:
@SpringBootTest: 스프링 부트 통합 테스트를 위한 어노테이션입니다.
@MockBean: 특정 빈(Bean)을 Mock 객체로 주입하여 독립적인 테스트를 진행할 때 사용합니다.
@Test: JUnit 테스트 메서드에 붙여서 테스트 기능을 수행합니다.
******
 Spring Security
Spring Security는 인증 및 권한 부여를 위한 강력한 보안 프레임워크입니다.
스프링 부트에서는 기본 설정만으로도 간단하게 사용자 인증 기능을 추가할 수 있습니다.
예를 들어, spring-boot-starter-security 의존성을 추가하면 기본적으로 모든 엔드포인트가 보호되고, 기본 ID와 패스워드가 설정됩니다.
인증 및 권한 부여 로직은 커스터마이징이 가능하며, 이를 통해 JWT, OAuth2 등 다양한 인증 방식과 연동할수 있습니다.
*******
배포 준비
프로파일 관리: application.properties 파일을 여러 개 만들어서 개발 환경, 테스트 환경, 운영 환경에 따라 설정을 분리할 수 있습니다. 예를 들어, application-dev.properties, application-prod.properties 같은 형식으로 사용할 수 있습니다.
JAR로 빌드 및 실행: 스프링 부트 애플리케이션을 jar 파일로 빌드하여 배포할 수 있습니다. mvn package 또는 ./gradlew build 명령으로 JAR 파일을 생성하고, java -jar myapp.jar로 실행합니다.
클라우드 배포: AWS, Azure, 네이버 클라우드 같은 클라우드 서비스에 배포할 수 있습니다. 스프링 부트는 AWS Elastic Beanstalk과 Docker를 활용한 배포가 비교적 간단합니다
*****
필수 도구 및 연습 사이트 추천
Postman: REST API 테스트 도구로, 엔드포인트 테스트에 유용합니다.
H2 Console: 내장형 H2 데이터베이스를 사용할 경우 spring.h2.console.enabled=true 설정을 통해 웹 브라우저에서 SQL을 실행해 볼 수 있습니다.
Spring 공식 문서: Spring Boot 공식 문서를 참조하면 더 깊이 있는 학습을 할 수 있습니다.
Baeldung: 다양한 스프링 관련 예제와 설명을 제공하는 사이트입니다. Baeldung Spring Tutorial에서 참고하세요.

----------------------------------------------------------------------
***
초기설정..

스프링 부트의 프로젝트 초기 설정 화면에서, 프로젝트에 필요한 의존성을 추가할 수 있습니다. 여기서 제공하는 의존성들은 다양한 기능을 손쉽게 추가할 수 있도록 돕습니다. 아래에서 각 카테고리별로 어떤 기능을 제공하는지, 그리고 어떤 상황에서 유용하게 사용될 수 있는지 설명드리겠습니다.

---

### 1. **AI**
   - **Spring for Apache Spark**: 스프링 애플리케이션에서 빅데이터 처리를 위한 Apache Spark와의 통합을 지원합니다.
   - **TensorFlow**: TensorFlow를 사용하여 머신러닝 모델을 활용할 수 있습니다.
   - **PyTorch**: PyTorch 모델을 사용할 수 있습니다.
   
   **추천 사용 경우**: AI/ML 기능을 애플리케이션에 포함시키고 싶다면 해당 의존성을 추가하여 모델 로딩 및 예측 작업을 쉽게 수행할 수 있습니다.

---

### 2. **Developer Tools**
   - **Spring Boot DevTools**: 개발 환경에서 코드 변경 시 자동 재시작을 도와주는 개발자 도구입니다.
   
   **추천 사용 경우**: **개발 필수**. 코드 수정 후 애플리케이션이 자동으로 리로드되므로 개발 속도가 크게 향상됩니다.

---

### 3. **Google Cloud**
   - **Spring Cloud GCP**: Google Cloud Platform 서비스와의 연동을 지원하는 라이브러리입니다. 
   - **GCP Storage, Pub/Sub**: Google Cloud Storage와 Pub/Sub 등의 기능을 쉽게 사용할 수 있습니다.

   **추천 사용 경우**: Google Cloud 환경에서 애플리케이션을 배포하거나 Google의 특정 서비스를 사용하려는 경우 적합합니다.

---

### 4. **I/O**
   - **Web**: 웹 애플리케이션 개발에 필요한 기본 구성 요소입니다. 스프링 MVC와 내장 톰캣 서버가 포함됩니다.
   - **WebFlux**: 비동기/논블로킹 방식의 웹 애플리케이션을 개발하기 위한 리액티브 프로그래밍을 지원합니다.
   
   **추천 사용 경우**: RESTful API나 웹 애플리케이션을 개발할 때 필수로 포함시킵니다. **Web** 또는 **WebFlux**를 사용하여 동기 또는 비동기 서버 구성을 할 수 있습니다.

---

### 5. **Messaging**
   - **RabbitMQ**: AMQP 프로토콜을 사용하는 메시지 브로커인 RabbitMQ와의 통합을 지원합니다.
   - **Kafka**: 분산 메시징 시스템 Kafka와의 통합을 제공합니다.

   **추천 사용 경우**: 메시지 큐를 사용하여 비동기 메시지 전송이 필요한 경우, 예를 들어 마이크로서비스 간 통신이 필요한 경우 유용합니다.

---

### 6. **Microsoft Azure**
   - **Azure Support**: Microsoft Azure와의 연동을 지원합니다.
   - **Azure Storage, Key Vault**: Azure의 스토리지, 키 관리 기능을 사용할 수 있도록 해줍니다.
   
   **추천 사용 경우**: 애플리케이션을 Microsoft Azure 클라우드 환경에 배포하거나 Azure의 특정 서비스를 사용하려는 경우 적합합니다.

---

### 7. **NoSQL**
   - **MongoDB**: NoSQL 데이터베이스 MongoDB와 통합을 지원합니다.
   - **Cassandra**: NoSQL 데이터베이스 Cassandra와의 연동을 제공합니다.
   - **Redis**: Redis와의 연동을 지원하여 캐싱 또는 키-값 데이터 저장을 도와줍니다.

   **추천 사용 경우**: NoSQL 데이터베이스를 사용하여 데이터 저장이 필요한 경우 유용합니다. 특히 비정형 데이터나 캐싱이 필요한 경우 적합합니다.

---

### 8. **Observability**
   - **Spring Boot Actuator**: 애플리케이션 상태 및 메트릭스 등을 모니터링할 수 있습니다.
   - **Micrometer**: 다양한 모니터링 시스템과 연동하여 메트릭스를 수집할 수 있습니다.
   
   **추천 사용 경우**: 애플리케이션의 상태, 성능 등을 모니터링하고자 할 때 유용합니다. 운영 환경에서 애플리케이션의 상태를 지속적으로 점검할 수 있습니다.

---

### 9. **Ops**
   - **Scheduling**: 스케줄링을 지원하는 기능으로, 작업을 특정 시간에 자동으로 실행할 수 있도록 도와줍니다.
   - **Batch**: 대용량 데이터 처리나 일괄 작업을 관리하는 데 유용한 Spring Batch를 제공합니다.

   **추천 사용 경우**: 주기적으로 실행되는 작업이 필요하거나 대규모 일괄 처리가 필요한 경우 적합합니다.

---

### 10. **SQL**
   - **JPA**: Java Persistence API를 통해 관계형 데이터베이스와의 매핑을 지원합니다.
   - **JDBC**: 기본적인 JDBC 기능을 통해 데이터베이스와 통신할 수 있도록 합니다.
   - **MyBatis**: SQL 쿼리를 직접 작성하여 데이터베이스와 통신하는 MyBatis 통합 기능입니다.

   **추천 사용 경우**: 관계형 데이터베이스를 사용할 때 필수적인 의존성입니다. JPA는 ORM으로 객체-관계 매핑을 쉽게 처리할 수 있고, MyBatis는 SQL을 직접 관리하는 데 유용합니다.

---

### 11. **Security**
   - **Spring Security**: 인증 및 권한 부여 기능을 제공합니다.
   
   **추천 사용 경우**: 사용자 인증 및 권한 관리가 필요한 애플리케이션에서는 필수입니다. OAuth2나 JWT 등을 쉽게 연동할 수 있습니다.

---

### 12. **Spring Cloud**
   - **Circuit Breaker**: 장애 발생 시 서비스가 계속 호출되는 것을 방지하는 Circuit Breaker 패턴을 구현합니다.
   - **Config**: 분산 환경에서 설정을 외부에서 관리할 수 있게 도와줍니다.
   - **Eureka Discovery**: 마이크로서비스 간 서비스 디스커버리를 위한 Eureka 서버와 클라이언트를 지원합니다.

   **추천 사용 경우**: 마이크로서비스 아키텍처에서 각 서비스의 상태를 모니터링하고, 서비스 간의 연결을 관리할 때 유용합니다.

---

### 13. **Template Engines**
   - **Thymeleaf**: HTML 템플릿 엔진으로, HTML 파일을 동적으로 렌더링할 수 있습니다.
   - **Freemarker**: 또 다른 템플릿 엔진으로, 텍스트 기반 템플릿을 생성하는 데 유용합니다.
   - **Mustache**: 경량 템플릿 엔진입니다.
   
   **추천 사용 경우**: 서버 사이드 렌더링이 필요한 경우, 특히 MVC 웹 애플리케이션을 개발할 때 유용합니다. `Thymeleaf`는 스프링 부트와 잘 맞아 가장 많이 사용됩니다.

---

### 14. **Testing**
   - **Spring Boot Test**: 스프링 부트 애플리케이션의 단위 및 통합 테스트를 지원합니다.
   - **JUnit, Mockito**: 자바 테스트 라이브러리로, JUnit은 테스트 프레임워크, Mockito는 Mock 객체를 통해 독립적인 테스트를 지원합니다.
   
   **추천 사용 경우**: 모든 스프링 부트 애플리케이션에 **필수**입니다. 테스트 환경을 쉽게 설정할 수 있도록 해줍니다.

---

### 15. **VMware Tanzu Application Service**
   - **TAS Support**: VMware Tanzu에서 애플리케이션을 배포할 수 있는 지원 기능을 제공합니다.
   
   **추천 사용 경우**: VMware Tanzu 클라우드에서 애플리케이션을 배포 및 관리하려는 경우 사용합니다.

---

### 추천 의존성 선택 예시
- **기본적으로 모든 프로젝트에 필요한 의존성**:
  - **Developer Tools**: `Spring Boot DevTools`
  - **I/O**: `Web`
  - **Testing**: `Spring Boot Test`
  
- **웹 애플리케이션**:
  - **Template Engines**: `Thymeleaf`
  - **SQL**: `JPA` 또는 `JDBC` (필요에 따라 MyBatis)
  - **Security**: `Spring Security` (필요한 경우)
  
- **마이크로서비스 아키텍처**:
  - **Spring Cloud**: `Config`, `Eureka Discovery`, `Circuit Breaker`
  - **Observability**: `Spring Boot Actuator`, `Micrometer`
  
- **데이터베이스 연동**:
  - **SQL**: `JPA` (관계형 데이터베이스 사용 시)
  - **NoSQL**: `MongoDB`, `Redis` (NoSQL 데이터베이스 사용 시)

***
-----------

Spring Boot
     
Spring Boot ?
- 스프링 프레임워크의 서브 프로젝트로 만들어졌다.
스프링 부트는 스프링 프레임워크를 사용 가능한 상태로 만들어주는 도구 정도로 이해할 수 있다.
- 스프링 부트는 다른 프레임워크처럼 커맨드 도구를 제공하고 톰캣이나 제티 같은 내장 서버를 통해 복잡한 설정과 실행을 간소화했다.
     
스프링 부트 퀵스타트
     
스프링 부트로 프로젝트를 생성하면 스프링을 비롯한 어떤 라이브러리도 개발자가 신경 쓸 필요가 없다. 스프링 부트가 모든 라이브러리를 자동으로 다운로드하고 관리해준다. 스프링 컨테이너를 위한 XML 환경설정 파일 역시 작성하지 않는데, 이는 스프링 부트가 기본적으로 모든 빈(Bean) 설정을 XML이 아닌 어노테이션으로 처리하기 때문이다.
     
생성되는 프로젝트를 웹 프로젝트로 패키징하여 실행하려면 WAR로 설정해야 하지만 스프링 부트는 웹 애플리케이션도 JAR 파일로 패키징하여 실행할 수 있다.

-------------------------------------------

Spring Framework (STS3)
->
Spring Boot(STS4 또는 IntelliJs)

STS4 : spring.io ( 스프링 공식 사이트 )
	-> Spring Tool 4

*특징*
- main 메소드 를 시작점으로 가진다.(class)
프로젝트 명은 메인 메소드 class 에 따라 대문자로 시작하기를 추천
>> 클래스명 : 프로젝트명+Application.java	

http://localhost:9000/board2/boardInput
http://localhost:9000/board2/boardList
=> 입력시 seq 는 useRef() 로 처리한다.
=> 입력시 name, subject, content 는 <Input /> 에서 입력받는다.
( 시간은 new DateTime )

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

D:
   Spring Boot
	workspace
		Chapter01HelloMaven
		src/main/java
				Chapter01HelloMavenApplication.java(main메소드)
		Chapter01HelloGradle
		src/main/java
			com.example.demo
				Chapter01HelloGradleApplication.java
			com.example.demo.controller
				HelloController.java
			board.controller
				BoardController.java
				Board2Controller.java
			board.bean
				BoardDTO.java
		src
		  main
		    frontend (리액트)
			src
			   App.js
			   components
				BoardInput.jsx
				BoardList.jsx
			  

		

		





























































































