package thread;

class Synchronized extends Thread { // Thread 클래스를 상속받아 Synchronized 클래스를 만듭니다.
    private static int count; // 모든 Synchronized 인스턴스가 공유하는 정적 변수 count

    @Override
    public void run() {
        // Synchronized.class 객체를 기준으로 동기화 블록을 설정합니다.
        // 이렇게 하면 여러 스레드가 동시에 이 블록에 진입할 수 없습니다.
        synchronized (Synchronized.class) {
            for (int i = 1; i <= 5; i++) {
                count++; // count 변수를 1씩 증가시킵니다.
                System.out.println(Thread.currentThread().getName() + " : " + count); // 현재 실행 중인 스레드 이름과 count 값을 출력합니다.
            }
        }
    }
}


//----------------------------------------
public class SynchronizedMain {

	public static void main(String[] args) {
		Synchronized aa = new Synchronized(); // 상속을 받았기 때문에 Thread 생성.
		Synchronized bb = new Synchronized();
		Synchronized cc = new Synchronized();
		// Thread 명칭 부여
		aa.setName("aa");
		bb.setName("bb");
		cc.setName("cc");
		
		// 우선순위
		// 1부터 10까지 부여
		aa.setPriority(Thread.MIN_PRIORITY); //aa.setPriority(1);
		bb.setPriority(Thread.MAX_PRIORITY); //bb.setPriority(10);
		cc.setPriority(Thread.NORM_PRIORITY); //cc.setPriority(5);
		
		// Thread 시작
		aa.start(); // thread 실행 하기 위해 run() 을 찾아감.
		bb.start();
		cc.start();
		
		
	}

}
