import React, { useState, useRef, useEffect } from 'react'; 
// React에서 useState와 useRef 훅을 사용하여 상태와 참조를 관리함.
// useState: 컴포넌트에서 상태를 관리하는 훅으로, 상태가 변경되면 컴포넌트가 다시 렌더링됨.
// useRef: 특정 DOM 요소나 값을 기억하는 훅으로, 값이 변경되어도 컴포넌트가 다시 렌더링되지 않음. 주로 컴포넌트 렌더 간에 값을 유지하기 위해 사용함.
// useEffect: 컴포넌트가 마운트되거나 업데이트될 때 특정 작업을 수행할 수 있게 해주는 훅. 주로 비동기 작업이나 외부 데이터를 가져올 때 사용함.

import TodoForm from './TodoForm'; 
// 할 일 추가 폼 컴포넌트를 가져옴.
// 할 일을 입력하고 추가하는 기능을 제공하는 컴포넌트.
// 이 컴포넌트에서 사용자가 할 일을 입력하고 추가 버튼을 클릭하면 새로운 할 일이 추가됨.

import TodoList from './TodoList'; 
// 할 일 목록 컴포넌트를 가져옴.
// 현재 추가된 할 일 목록을 보여주는 컴포넌트.
// 이 컴포넌트는 list라는 배열을 받아와서 사용자가 추가한 모든 할 일을 화면에 표시함.

import TodoStyle from '../css/Todos.module.css'; 
// CSS 모듈을 가져와서 스타일 적용.
// CSS 모듈을 사용하면 각 컴포넌트에 고유한 클래스 이름을 만들어 충돌을 방지함.
// CSS 모듈을 사용하면 동일한 클래스명이 다른 파일에서 사용되더라도 영향을 받지 않음.

const Todos = () => {
    // const [list, setList] = useState([]); // 할 일 목록을 저장하는 상태. 초기값은 빈 배열.
    // list는 현재까지 추가된 모든 할 일의 배열로, 각 항목은 객체 형태로 저장됨.
    // setList는 list 상태를 업데이트하는 함수로, 새로운 할 일을 추가하거나 삭제할 때 사용됨.
    // 이 부분이 주석처리된 이유는 로컬스토리지에서 데이터를 가져와 초기화하는 방식으로 대체되었기 때문임.

    // const [list, setList] = useState([]); 를 주석처리하고 사용됨.
    // Local Storage 읽어오기
    const [list, setList] = useState(JSON.parse(localStorage.getItem('list')) || [] ); 
    // 로컬 스토리지에서 'list'라는 키를 통해 할 일 목록을 불러옴. 
    // 만약 로컬 스토리지에 데이터가 없으면 빈 배열([])을 초기값으로 사용함.
    // JSON.parse는 문자열로 저장된 데이터를 실제 JavaScript 객체로 변환하는 함수임.
    // JSON.stringify와 함께 자주 사용되며, 로컬스토리지에서 객체를 저장하고 불러올 때 필수적임.
    // 로컬스토리지는 브라우저에 데이터를 영구적으로 저장할 수 있는 메커니즘임.

    // Local Storage 저장하기 -> list(배열)이 바뀔 때마다 저장
    useEffect(() => {
        // useEffect는 list 배열이 변경될 때마다 실행됨.
        // setItem(키값, 밸류), JSON의 형식을 문자열로 변환하여 list에 저장
        localStorage.setItem('list', JSON.stringify(list))
        // 로컬 스토리지에 list 배열을 JSON 형태로 문자열로 변환해 저장함.
        // 이렇게 하면 페이지를 새로고침해도 기존에 추가한 할 일이 유지됨.
        // useEffect의 두 번째 인자인 [list]는 list가 변경될 때마다 이 함수를 실행하게 만듦.
    }, [list]);
    // useEffect의 두 번째 인자로 list를 넣어 주었기 때문에, list가 업데이트될 때마다 이 효과가 실행됨.
    // 이로 인해 할 일이 추가되거나 삭제될 때마다 로컬스토리지에 자동으로 업데이트됨.

    const seq = useRef(1); 
    // 각 할 일 항목의 고유 번호를 위한 참조 변수. useRef는 렌더링 사이에 값이 유지됨.
    // seq는 각 할 일 항목에 고유한 번호(순번)를 부여하기 위한 변수로, 렌더링이 다시 일어나도 값이 유지됨.
    // useRef로 선언된 변수는 값이 변경되어도 컴포넌트를 다시 렌더링하지 않음. 여기서는 할 일을 추가할 때마다 seq의 값을 1씩 증가시킴.
    // seq는 직접 상태로 관리하지 않음으로써, 불필요한 렌더링을 방지하고 성능을 최적화함.

    const onDel = (seq) => { 
        // 특정 seq를 가진 할 일을 삭제하는 함수.
        // 인자로 받은 seq를 기준으로 해당 항목을 목록에서 삭제함.
        setList(
            list.filter(item => item.seq !== seq) 
            // 선택한 seq와 일치하지 않는 할 일들만 필터링하여 새로운 리스트를 만듦.
            // filter 메서드는 배열을 순회하며 조건에 맞는 요소들만 새 배열로 반환하는 함수임.
            // 이 경우 item.seq가 삭제하고자 하는 seq와 다른 항목들만 남겨 새로운 배열을 생성함.
            // 그 결과 삭제하고자 하는 항목을 제외한 새로운 배열을 상태로 설정함.
        )
    }

    return (
        <div className={TodoStyle.Todos}> 
            {/* 전체 할 일 관리 UI를 감싸는 div. CSS 모듈로 스타일 적용. */}
            {/* TodoStyle에서 정의한 CSS 클래스명을 사용해 이 div에 스타일을 적용함. */}
            <h1>일정관리</h1> 
            {/* 일정관리 타이틀을 표시 */}
            <TodoForm seq={seq} list={list} setList={setList} /> 
            {/* 할 일 추가 폼을 렌더링하고 상태와 함수들을 전달. */}
            {/* TodoForm 컴포넌트에 seq, list, setList를 props로 전달하여 할 일 추가 기능을 구현함. */}
            {/* TodoForm은 사용자가 새로운 할 일을 입력할 수 있는 폼이며, 제출 시 새로운 할 일을 list에 추가하는 기능을 함. */}
            <br/>
            <TodoList list={list} onDel={onDel} /> 
            {/* 할 일 목록을 렌더링하고 삭제 함수를 전달. */}
            {/* TodoList 컴포넌트에 현재 할 일 목록과 삭제 기능을 props로 전달하여, 사용자가 추가한 할 일 목록을 보여주고 삭제할 수 있게 함. */}
        </div>
    );
};

export default Todos;

/*
데이터 읽기, 쓰기

웹 스토리지
HTML5에서 추가된 기술로 로컬스토리지와 세션스토리지로 구분된다.

특징
웹 스토리지는 Key와 Value 형태로 이루어졌다.
웹 스토리지는 클라이언트에 대한 정보를 저장한다.
웹 스토리지는 로컬에만 정보를 저장하고 쿠키는 서버와 로컬에 정보를 저장한다.

종류
로컬스토리지 (localStorage) - 클라이언트에 대한 정보를 영구적으로 저장
세션스토리지 (sessionStorage) - 세션 종료 시(브라우저 닫을 경우) 클라이언트에 대한 정보 삭제

장점
서버에 불필요하게 데이터를 저장하지 않는다. (백엔드에 절대로 전송되지 않는다.)
저장 가능한 데이터의 용량이 크다. (약 5Mb, 브라우저마다 차이 존재)

단점
HTML5를 지원하지 않는 브라우저의 경우 사용 불가. (현재는 거의 없다고 봐야 한다.)
*/
// 이 주석에서는 웹 스토리지에 대해 설명하고 있음.
// 로컬 스토리지와 세션 스토리지를 비교하며, 로컬 스토리지는 영구 저장을 위해, 세션 스토리지는 브라우저 세션 동안만 데이터를 저장하는 방식임.
// 추가적으로, 쿠키는 서버와 클라이언트 모두에 데이터를 저장할 수 있는 반면, 로컬 스토리지는 클라이언트 측에서만 데이터를 저장함.
