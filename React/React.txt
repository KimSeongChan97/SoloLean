ECMA6
SpringBoot (jsp x -> Thymeleaf)
JPA
React

훅스
ECMAScript6
MyBatis != ORM
ORM -> JPA

React !!

[Final]
SpringBoot + JPA + React => NaverColud ( Server 2EA_SpringBootServer/JenkinsServer )


----------------------------------------
React
리액트 공식 홈페이지: https://react.dev/
리액트란?
• 사용자 인터페이스(UI)를 구축하기 위해 메타(페이스북)에서 개발한 Javascript 기반의 라이브러리
• SPA(Single Page Application) 개발에 가장 적합한 라이브러리
• 화면상에 데이터가 변경되는 경우 페이지 전체를 렌더링하는 것이 아니라 필요한 부분만 렌더링 할 수 
있다. • 웹 앱(Web App) 또는 네이티브 앱(Native App)
• 유지보수를 쉽게, DOM 관리
• 성능 최적화 쉽게
• 컴포넌트 단위로 구성하여 코드 재사용성이 높으며, 독립적인 유지보수 가능
• 대부분 공식 라이브러리가 없음 (높은 자유도)
• 자바스크립트 친화적 ES6 기반로 배우기가 쉽다
1. Nodejs - https://nodejs.org/ko/
- 자바스크립트 런타임 환경
- 리액트 프로젝트를 준비하는 데 필요한 webpack, babel 등의 도구들을 실행하는 데 사용된다. - npm은 자바스크립트 프로그래밍 언어를 위한 패키지 관리자이다. 2. Yarn
- https://classic.yarnpkg.com/en/docs/install#windows-stable - 자바스크립트 패키지를 관리하기 위해서 사용된다. - yarn은 npm동작 방식과 비슷하지만 npm의 단점을 보완해 성능과 속도를 개선한 패키지 관리도구이
다. Node.js 를 설치하면 npm 이 설치되어서 npm 으로 해도 되긴 하지만, yarn을 사용하면 훨씬 빠르다. npm VS yarn
npm은 여러 패키지를 설치할 경우 패키지가 완전히 설치될 때까지 기다렸다가 다른 패키지로 이동한다. 작업이 패키지별로 순차적으로 실행된다는 것이다. yarn은 이 작업들을 병렬로 설치하기 때문에 성능과 
속도가 향상된다는 장점이 있다. 노드 설치가 완료된 후
C:\Users\yeoni>node -v
3. VS Code ( 에디터 ) - https://code.visualstudio.com/
- VS Code 확장설치 (부가기능설치) - 기본 브라우저는 Chrome 설정해야 한다.
톱니바퀴 → Settings → browser 검색 → 아래로 내려오면 Custom Browser : Chrome 선택
톱니바퀴 → Settings → local 검색 → Extensions(왼쪽)
 → 아래로 내려오면 Use local IP as host 체크
확장 페키지
① Live Server
② Korean Language Pack for Visual Studio Code
③ Auto Close Tag
④ Auto Complete Tag
⑤ Auto Import 
⑥ Auto Rename Tag
⑦ Reactjs code snippets – 코드 자동 생성

리액트 컴포넌트
Ÿ 컴포넌트는 UI를 구성하는 조각(piece)에 해당하며, 독립적으로 분리되어 재사용이 됨을 목적으로 사용
된다. 
Ÿ React 앱에서 컴포넌트는 개별적인 JavaScript 파일로 분리되어 관리한다. 함수형 컴포넌트
Ÿ React 컴포넌트는 개념상 JavaScript 함수와 유사하다. 
Ÿ 컴포넌트 외부로부터 속성(props)을 전달받아 어떻게 UI를 구성해야 할지 설정하여 React 요소 (JSX를 
Babel이 변환 처리)로 반환한다. 
Ÿ 이러한 문법 구문을 사용하는 컴포넌트를 React는 '함수형(functional)'으로 분류한다.
JSX 규칙 : JavaScript + XML
Ÿ JSX는 리액트에서 사용하는 파일로 JavaScript 코드 안에 HTML과 유사한 코드를 작성할 수 있게 해
준다. 
Ÿ JSX는 리액트 컴포넌트를 작성하면서 return 문에 사용하는 문법이다. 
Ÿ 브라우저에서 직접 실행되지 않으며, Babel과 같은 변환기를 통해 Javascript로 변환 후 실행한다. 
Ÿ JSX가 하는 일은 React 요소(Element)를 만드는 것이다. 
Ÿ 얼핏 보면 JSX는 JavaScript 문법 확장(JavaScript eXtension) 으로 구문이 HTML과 유사하다.
 하지만 React 요소는 실제 DOM 요소가 아니라, JavaScript 객체이다. 
Ÿ 리액트 자체 빌드 도구 덕분에 *.js, *.jsx로 작성해도 아무런 문제 없이 실행은 가능하나 jsx파일로 컴
포넌트 만들 것을 권장한다. 
규칙
1. 태그는 반드시 닫아줘야 한다. 
2. 최상단에서는 반드시 div로 감싸주어야 한다. ( Fragment 사용, <></> 상황에 따라 )
3. JSX안에서 자바스크립트 값을 사용하고 싶을 때는 { }를 사용한다.
 변수값 출력 예시 참고 -> { name }
4. 조건부 렌더링을 하고 싶으면 &&연산자나 삼항 연산자를 사용한다. 
5. 인라인 스타일링은 항상 객체형식으로 작성한다.
 스타일 작성 시 – 빼고 첫 글자는 대문자로 작성한다. 
6. 별도의 스타일 파일을 만들었으면 class 대신 className을 사용한다. ( 권장사항 )
7. 주석은 {/* */}을 사용해 작성한다. 
※ <></> Fragment
브라우저 상의 HTML 트리 구조에서 흔적을 남기지 않고 그룹화를 해준다. 그룹화를 하는 이유는 실행될 때 JSX에 작성한 내용은 하나의 JavaScript 객체로 변환되는데 하나의 
태그로 감싸지지 않으면 변환이 되지 않는다.


------------------------------------------------------------------------------------------

npx create-react-app day01
npm create vite@latest day01_vite


day01 : cd day01 -> npm start
day01_vite : cd day01_vite -> npm run dev

yarn add react-redux
yarn add redux-devtools-extension
yarn add react-router-dom

----------------------------------------------------------

따로 파일을 가져갈 때는 node_modules 를 삭제 하여 복사해간다
(삭제 이후 npm i 시 다시 설치함 )

화면에는 index.html 이 반응하지만(root 태그 안에)
작업은 src/App.js 에서 한다 ( .root 로 연결 )

-----------------------------------------------------------

Spring Framework + MyBatis[MySQL(DB)] + React
- Spring Framework, React Project 따로 만든다.
-> http://localhost:8080 (Spring Framework)
-> http://localhost:3000 (React Project)

[SpringFramework Project]
SpringReactProject
  com.spring.SpringReactProject
  member.controller
	MemberController.java



[React Project]
frontend
	src
		css
			style.css
		components
		    	Main.jsx
			member
				LoginForm.jsx
			





--------------------
입력 : axios.get()
출력 : axios.post()
수정 : axios.put()
삭제 : axios.delete()
-------------------






































