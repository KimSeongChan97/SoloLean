
# React & Redux Overview

## 코드 구성 및 설명

```javascript
import React from 'react'; // React 라이브러리에서 React를 가져옵니다. 이는 JSX 구문을 해석하고 컴포넌트를 만들 때 필요합니다.
import ReactDOM from 'react-dom/client'; // React 18에서 도입된 'react-dom/client'에서 ReactDOM을 가져옵니다. 이 모듈은 애플리케이션을 실제 DOM에 렌더링하는 데 사용됩니다.
import './index.css'; // 전역 스타일 시트를 가져옵니다. 모든 컴포넌트에서 이 CSS 파일의 스타일을 적용받을 수 있습니다.
import App from './App'; // 최상위 컴포넌트인 App을 가져옵니다. 이 컴포넌트는 애플리케이션의 주요 UI 구조를 포함합니다.
import reportWebVitals from './reportWebVitals'; // 성능 측정을 위한 reportWebVitals 함수를 가져옵니다.

// ---------------------- 임의로 추가하는 import
import { Provider } from 'react-redux'; // Provider는 Redux 스토어를 React 애플리케이션에 공급하는 역할을 합니다.
import rootReducer from './store'; // 애플리케이션의 전체 상태 관리 로직을 정의한 rootReducer를 가져옵니다.

import { legacy_createStore as createStore } from 'redux'; // createStore 함수를 사용하여 스토어 생성
import { composeWithDevTools } from 'redux-devtools-extension'; // Redux DevTools와의 연동을 돕는 composeWithDevTools를 가져옵니다.

const store = createStore(rootReducer, composeWithDevTools()); // DevTools와 연결된 스토어 생성

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <Provider store={ store } > 
        <App /> 
    </Provider>
);
reportWebVitals();
```

---

## 리덕스(Redux) 구성

1. **액션(Action)**
   - **RED, GREEN, BLUE, MAGENTA**와 같은 액션을 정의하여, 각각 색상을 변경하는 역할을 수행합니다.
   - Action 객체는 액션 타입(type)을 정의하는 상수를 사용하여 생성됩니다.
   - 예: `const RED = 'color/RED';`

2. **액션 생성 함수**
   - 액션 객체를 반환하는 함수들로, 상태를 변경할 수 있도록 액션 객체를 생성하는 함수입니다.
   - 예: `export const red = () => ({ type: RED });`

3. **초기 상태 및 리듀서**
   - 리듀서 함수는 현재 상태(state)와 액션(action)을 받아서 새로운 상태를 반환하는 함수입니다.
   - 예: `const reducer = (state = initialState, action) => { switch(action.type) { ... } }`

4. **combineReducers를 통한 리듀서 결합**
   - 여러 개의 리듀서를 결합하여 루트 리듀서로 만드는 방식입니다.

---

## 주요 용어 및 Redux 흐름

- **Store**: 애플리케이션의 중앙 상태 저장소로, 상태와 리듀서를 관리합니다.
- **Action**: 상태를 변경하기 위한 데이터 객체.
- **Reducer**: 액션에 따라 상태를 변경하는 함수.
- **Dispatch**: 액션을 리듀서에 전달하여 상태를 변경하는 메소드.

### 설치 및 설정
yarn add react-redux
yarn add react-router-dom
yarn add axioxyarn add axiox

1. `yarn add react-redux redux redux-devtools-extension`
2. **createStore**: Redux 저장소 생성.
3. **combineReducers**: 여러 리듀서를 루트 리듀서로 결합.

### Example of Redux Dispatch and Action Flow
1. 액션을 디스패치(dispatch)하면 해당 액션이 리듀서로 전달됩니다.
2. 리듀서는 액션 타입에 따라 새로운 상태를 반환합니다.
3. 상태가 변경되면 컴포넌트가 새로운 상태에 맞춰 UI를 업데이트합니다.

---
리듀서, 리덕스 활용 예


===================

리덕스와 리듀서를 활용하여 할 수 있는 것들은 매우 다양하며, 특히 상태 관리를 필요로 하는 대규모 애플리케이션에서 그 진가를 발휘합니다. 리덕스는 중앙 집중형 상태 관리 라이브러리로서, 상태를 예측 가능하고 일관되게 유지할 수 있도록 도와줍니다. 

### 1. **애플리케이션의 전역 상태 관리**
   - 컴포넌트 간에 공유해야 하는 상태를 중앙에서 관리하여 애플리케이션의 복잡성을 줄입니다.
   - 여러 컴포넌트가 같은 데이터를 사용하거나 조작해야 하는 경우, 리덕스를 통해 한 곳에서 데이터를 관리할 수 있습니다.

### 2. **상태 변화 추적 및 디버깅**
   - 리덕스를 사용하면 Redux DevTools와 같은 도구로 상태 변화 과정을 추적할 수 있습니다.
   - 애플리케이션의 상태가 어떻게 변하는지 시각적으로 확인하고, 디버깅이 용이해집니다.
   - 상태 변화를 되돌리는 "시간 여행" 디버깅 기능을 제공하여 이전 상태로 돌아가거나 특정 시점의 상태를 확인할 수 있습니다.

### 3. **애플리케이션 초기 상태 설정**
   - 리덕스는 애플리케이션의 초기 상태를 정의하여, 처음 로딩 시 설정을 한 번에 할 수 있게 합니다.
   - 예를 들어, 사용자 로그인 정보, 테마, 초기 설정 등을 미리 정의할 수 있습니다.

### 4. **사용자 인터페이스 상태 관리**
   - UI의 특정 상태(예: 모달 열림/닫힘 상태, 드롭다운 선택 상태)를 전역으로 관리할 수 있습니다.
   - UI의 상태를 전역으로 관리함으로써, 여러 컴포넌트에서 동일한 UI 상태에 접근할 수 있습니다.

### 5. **비동기 데이터 페칭 및 관리**
   - 리덕스를 이용해 서버로부터 데이터를 불러오는 비동기 작업을 관리할 수 있습니다.
   - Redux Thunk나 Redux Saga 같은 미들웨어를 추가하여 API 요청과 같은 비동기 작업의 상태를 관리할 수 있습니다.
   - 데이터 로딩 중 상태, 성공/실패 상태를 리덕스를 통해 관리하고, 이를 UI에 반영할 수 있습니다.

### 6. **컴포넌트 간 상태 공유**
   - 상태가 여러 컴포넌트에서 필요할 경우, 리덕스를 통해 상태를 중앙에서 관리함으로써 중복 데이터와 불필요한 상태 전달을 피할 수 있습니다.
   - 예를 들어, 장바구니 애플리케이션에서 상품 목록과 장바구니에 담긴 상품 상태를 여러 컴포넌트에서 공유할 수 있습니다.

### 7. **폼 상태 관리**
   - 복잡한 폼의 데이터와 상태를 리덕스를 통해 관리할 수 있습니다.
   - 폼의 각 필드 값과 유효성 검사 상태를 리덕스에서 관리하면, 상태가 일관되게 유지되며 여러 단계에 걸친 폼에서도 유용하게 활용할 수 있습니다.

### 8. **다국어 지원 (i18n)**
   - 리덕스를 통해 언어 설정을 전역으로 관리하면, 사용자가 언어를 변경할 때마다 모든 컴포넌트에서 즉시 반영할 수 있습니다.
   - 다국어 지원을 위한 언어 설정 상태를 리덕스에서 관리하고, 애플리케이션 전체에서 사용할 수 있습니다.

### 9. **테마 및 사용자 설정 관리**
   - 애플리케이션의 테마(예: 다크 모드, 라이트 모드)와 사용자 설정을 리덕스를 통해 관리하여 전체 컴포넌트에서 쉽게 사용할 수 있습니다.
   - 테마를 리덕스 상태로 관리하면, 사용자가 설정한 테마가 모든 컴포넌트에서 일관되게 적용됩니다.

### 10. **알림 시스템 구현**
   - 사용자에게 알림을 제공하는 시스템을 구현할 수 있습니다.
   - 알림 목록을 리덕스 상태로 관리하고, 새로운 알림이 올 때마다 이를 추가하여 알림 아이콘 등에 표시할 수 있습니다.

### 11. **탭/페이지 상태 관리**
   - 여러 탭이나 페이지에서 상태를 유지해야 할 때 유용합니다.
   - 예를 들어, 여러 탭을 가진 애플리케이션에서 각 탭의 선택 상태를 리덕스로 관리하여, 페이지를 이동해도 탭 상태를 유지할 수 있습니다.

### 12. **유저 인증 상태 관리**
   - 로그인 상태와 사용자 정보를 관리하여 인증 상태를 모든 컴포넌트에서 쉽게 접근할 수 있습니다.
   - 로그인, 로그아웃, 사용자 정보 변경 등의 상태를 관리하고, 권한에 따라 페이지 접근을 제어할 수 있습니다.

### 13. **미들웨어와의 조합을 통한 복잡한 로직 처리**
   - Redux Thunk, Redux Saga와 같은 미들웨어를 활용하여 비동기 로직이나 복잡한 비즈니스 로직을 처리할 수 있습니다.
   - 이로 인해 비즈니스 로직이 컴포넌트에서 분리되어, 코드가 더욱 깔끔해지고 유지보수가 쉬워집니다.

### 14. **상태 기반 애니메이션 제어**
   - 리덕스 상태를 이용해 애니메이션을 제어할 수 있습니다.
   - 예를 들어, 특정 상태가 변경될 때마다 애니메이션을 실행하도록 설정할 수 있습니다.

### 15. **리액트 라우터와의 결합**
   - 리액트 라우터와 결합하여, 특정 페이지의 상태나 파라미터를 리덕스로 관리할 수 있습니다.
   - 예를 들어, 페이지 방문 시 특정 데이터를 미리 로드하거나, 라우트 변경에 따른 상태 초기화를 리덕스를 통해 제어할 수 있습니다.

### 16. **프로젝트의 일관성과 유지보수성 향상**
   - 모든 상태 변경이 일관된 방식으로 관리되므로, 프로젝트가 커지더라도 코드의 유지보수가 용이해집니다.
   - 액션과 리듀서를 통해 명확한 상태 변화 로직이 정의되기 때문에, 코드의 예측 가능성과 일관성이 크게 향상됩니다.

### 17. **상태를 사용한 조건부 렌더링**
   - 특정 상태 값에 따라 컴포넌트를 조건부로 렌더링하거나 UI를 다르게 표시할 수 있습니다.
   - 예를 들어, 특정 상태 값이 true일 때 모달을 열고 false일 때 닫는 등의 UI 제어가 가능합니다.

---

